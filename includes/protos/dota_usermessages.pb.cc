// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

#include "dota_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_AIDebugLineDefaultTypeInternal {
  constexpr CDOTAUserMsg_AIDebugLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AIDebugLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AIDebugLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AIDebugLineDefaultTypeInternal _CDOTAUserMsg_AIDebugLine_default_instance_;
constexpr CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_(0u)
  , loss_(0u){}
struct CDOTAUserMsg_PingDefaultTypeInternal {
  constexpr CDOTAUserMsg_PingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PingDefaultTypeInternal _CDOTAUserMsg_Ping_default_instance_;
constexpr CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAUserMsg_SwapVerifyDefaultTypeInternal {
  constexpr CDOTAUserMsg_SwapVerifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SwapVerifyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SwapVerify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SwapVerifyDefaultTypeInternal _CDOTAUserMsg_SwapVerify_default_instance_;
constexpr CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u)
  , value2_(0u)
  , value3_(0u)
  , playerid_6_(-1)
  , type_(-1)

  , playerid_1_(-1)
  , playerid_2_(-1)
  , playerid_3_(-1)
  , playerid_4_(-1)
  , playerid_5_(-1){}
struct CDOTAUserMsg_ChatEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_ChatEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ChatEventDefaultTypeInternal _CDOTAUserMsg_ChatEvent_default_instance_;
constexpr CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u)
  , team_only_(false){}
struct CDOTAUserMsg_BotChatDefaultTypeInternal {
  constexpr CDOTAUserMsg_BotChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BotChatDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BotChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_BotChatDefaultTypeInternal _CDOTAUserMsg_BotChat_default_instance_;
constexpr CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : world_pos_(nullptr)
  , index_(0u)
  , time_(0)
  , health_(0){}
struct CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal {
  constexpr CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CombatHeroPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal _CDOTAUserMsg_CombatHeroPositions_default_instance_;
constexpr CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : combat_entries_()
  , timestamp_(0)
  , duration_(0)
  , player_id_(0u){}
struct CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal {
  constexpr CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CombatLogBulkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CombatLogBulkDataDefaultTypeInternal _CDOTAUserMsg_CombatLogBulkData_default_instance_;
constexpr CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_id_(0u)
  , damage_(0){}
struct CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal {
  constexpr CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_;
constexpr CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_()
  , attacker_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attacker_(0u)
  , total_damage_(0){}
struct CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal {
  constexpr CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo_Attacker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_;
constexpr CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attackers_(){}
struct CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal {
  constexpr CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniKillCamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal _CDOTAUserMsg_MiniKillCamInfo_default_instance_;
constexpr CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_(0u)
  , duration_(0){}
struct CDOTAUserMsg_GlobalLightColorDefaultTypeInternal {
  constexpr CDOTAUserMsg_GlobalLightColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlobalLightColorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlobalLightColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GlobalLightColorDefaultTypeInternal _CDOTAUserMsg_GlobalLightColor_default_instance_;
constexpr CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : direction_(nullptr)
  , duration_(0){}
struct CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal {
  constexpr CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlobalLightDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal _CDOTAUserMsg_GlobalLightDirection_default_instance_;
constexpr CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_ping_(nullptr)
  , player_id_(0u){}
struct CDOTAUserMsg_LocationPingDefaultTypeInternal {
  constexpr CDOTAUserMsg_LocationPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_LocationPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_LocationPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_LocationPingDefaultTypeInternal _CDOTAUserMsg_LocationPing_default_instance_;
constexpr CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , player_id_of_original_pinger_(0u)
  , entity_index_(0u)
  , icon_type_(0u){}
struct CDOTAUserMsg_PingConfirmationDefaultTypeInternal {
  constexpr CDOTAUserMsg_PingConfirmationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PingConfirmationDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PingConfirmation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PingConfirmationDefaultTypeInternal _CDOTAUserMsg_PingConfirmation_default_instance_;
constexpr CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_alert_(nullptr)
  , player_id_(0u){}
struct CDOTAUserMsg_ItemAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_ItemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ItemAlertDefaultTypeInternal _CDOTAUserMsg_ItemAlert_default_instance_;
constexpr CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , target_player_id_(0u)
  , item_ability_id_(0)
  , entity_id_(0)
  , rune_type_(-1)
  , item_level_(-1)
  , primary_charges_(-1)
  , secondary_charges_(-1){}
struct CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EnemyItemAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal _CDOTAUserMsg_EnemyItemAlert_default_instance_;
constexpr CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u)
  , stack_count_(0u)
  , is_debuff_(false)
  , target_entindex_(0u)
  , seconds_remaining_(0){}
struct CDOTAUserMsg_ModifierAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_ModifierAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ModifierAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ModifierAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ModifierAlertDefaultTypeInternal _CDOTAUserMsg_ModifierAlert_default_instance_;
constexpr CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , target_entindex_(0u)
  , show_raw_values_(false){}
struct CDOTAUserMsg_HPManaAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_HPManaAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HPManaAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HPManaAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HPManaAlertDefaultTypeInternal _CDOTAUserMsg_HPManaAlert_default_instance_;
constexpr CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , negative_(false){}
struct CDOTAUserMsg_GlyphAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_GlyphAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GlyphAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GlyphAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GlyphAlertDefaultTypeInternal _CDOTAUserMsg_GlyphAlert_default_instance_;
constexpr CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , negative_(false){}
struct CDOTAUserMsg_RadarAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_RadarAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RadarAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RadarAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_RadarAlertDefaultTypeInternal _CDOTAUserMsg_RadarAlert_default_instance_;
constexpr CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0)
  , player_id_(0)
  , gold_remaining_(0u)
  , suggestion_player_id_(0){}
struct CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WillPurchaseAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal _CDOTAUserMsg_WillPurchaseAlert_default_instance_;
constexpr CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_player_id_(0)
  , target_player_id_(0)
  , cooldown_seconds_(0){}
struct CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EmptyTeleportAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_EmptyTeleportAlertDefaultTypeInternal _CDOTAUserMsg_EmptyTeleportAlert_default_instance_;
constexpr CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_ehandle_(0)
  , target_ehandle_(0)
  , warrior_index_(0){}
struct CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal {
  constexpr CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MarsArenaOfBloodAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MarsArenaOfBloodAttackDefaultTypeInternal _CDOTAUserMsg_MarsArenaOfBloodAttack_default_instance_;
constexpr CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_msg_(nullptr)
  , cast_activity_(0){}
struct CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal {
  constexpr CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal() {}
  union {
    CDOTAEntityMsg_InvokerSpellCast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAEntityMsg_InvokerSpellCastDefaultTypeInternal _CDOTAEntityMsg_InvokerSpellCast_default_instance_;
constexpr CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BuyBackStateAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal _CDOTAUserMsg_BuyBackStateAlert_default_instance_;
constexpr CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , item_ability_id_(0)
  , gold_cost_(0)
  , item_cooldown_seconds_(0)
  , show_buyback_(false){}
struct CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QuickBuyAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal _CDOTAUserMsg_QuickBuyAlert_default_instance_;
constexpr CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0)
  , quantity_(0u){}
struct CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal {
  constexpr CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CourierKilledAlert_LostItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal _CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_;
constexpr CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lost_items_()
  , team_(0u)
  , gold_value_(0u)
  , entity_handle_(0)
  , timestamp_(0)
  , killer_player_id_(0)
  , owning_player_id_(0){}
struct CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CourierKilledAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal _CDOTAUserMsg_CourierKilledAlert_default_instance_;
constexpr CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_type_(0)
  , entity_handle_(0)
  , x_(0)
  , y_(0)
  , duration_(0)
  , target_entity_handle_(0){}
struct CDOTAUserMsg_MinimapEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_MinimapEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MinimapEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MinimapEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MinimapEventDefaultTypeInternal _CDOTAUserMsg_MinimapEvent_default_instance_;
constexpr CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapline_(nullptr)
  , player_id_(0){}
struct CDOTAUserMsg_MapLineDefaultTypeInternal {
  constexpr CDOTAUserMsg_MapLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MapLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MapLineDefaultTypeInternal _CDOTAUserMsg_MapLine_default_instance_;
constexpr CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , color_(0u)
  , size_(0)
  , duration_(0)
  , index_(0){}
struct CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal {
  constexpr CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MinimapDebugPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal _CDOTAUserMsg_MinimapDebugPoint_default_instance_;
constexpr CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr)
  , particle_index_(PROTOBUF_ULONGLONG(0))
  , entindex_(0)
  , handle_(0)
  , max_speed_(0)
  , fow_radius_(0)
  , sticky_fow_reveal_(false)
  , distance_(0)
  , colorgemcolor_(0u){}
struct CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal {
  constexpr CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CreateLinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal _CDOTAUserMsg_CreateLinearProjectile_default_instance_;
constexpr CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(0){}
struct CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal {
  constexpr CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DestroyLinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal _CDOTAUserMsg_DestroyLinearProjectile_default_instance_;
constexpr CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entindex_(0)
  , attacks_only_(false){}
struct CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal {
  constexpr CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DodgeTrackingProjectiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal _CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_;
constexpr CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entindex_(0)
  , order_type_(0)
  , target_index_(0){}
struct CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal {
  constexpr CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpectatorPlayerClick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal _CDOTAUserMsg_SpectatorPlayerClick_default_instance_;
constexpr CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , position_(nullptr)
  , entindex_(0)
  , order_type_(0)
  , target_index_(0)
  , ability_id_(0)
  , queue_(false)
  , sequence_number_(0)
  , flags_(0u){}
struct CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal {
  constexpr CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpectatorPlayerUnitOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_;
constexpr CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , entity_handle_(0)
  , lines_(0)
  , reverse_(false){}
struct CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal {
  constexpr CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_NevermoreRequiem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal _CDOTAUserMsg_NevermoreRequiem_default_instance_;
constexpr CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_InvalidCommandDefaultTypeInternal {
  constexpr CDOTAUserMsg_InvalidCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_InvalidCommandDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_InvalidCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_InvalidCommandDefaultTypeInternal _CDOTAUserMsg_InvalidCommand_default_instance_;
constexpr CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(0){}
struct CDOTAUserMsg_HudErrorDefaultTypeInternal {
  constexpr CDOTAUserMsg_HudErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HudErrorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HudError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HudErrorDefaultTypeInternal _CDOTAUserMsg_HudError_default_instance_;
constexpr CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entindex_(0)
  , cooldown_(0)
  , name_index_(0){}
struct CDOTAUserMsg_SharedCooldownDefaultTypeInternal {
  constexpr CDOTAUserMsg_SharedCooldownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SharedCooldownDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SharedCooldown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SharedCooldownDefaultTypeInternal _CDOTAUserMsg_SharedCooldown_default_instance_;
constexpr CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal {
  constexpr CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SetNextAutobuyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal _CDOTAUserMsg_SetNextAutobuyItem_default_instance_;
constexpr CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_defs_()
  , player_ids_()
  , prize_list_(0u){}
struct CDOTAUserMsg_HalloweenDropsDefaultTypeInternal {
  constexpr CDOTAUserMsg_HalloweenDropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HalloweenDropsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HalloweenDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HalloweenDropsDefaultTypeInternal _CDOTAUserMsg_HalloweenDrops_default_instance_;
constexpr CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : granted_item_defs_()
  , item_def_(0u)
  , num_correct_(0u)
  , num_fails_(0u)
  , result_(1)
{}
struct CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal {
  constexpr CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PredictionResult_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal _CDOTAUserMsg_PredictionResult_Prediction_default_instance_;
constexpr CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictions_()
  , match_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , correct_(false){}
struct CDOTAUserMsg_PredictionResultDefaultTypeInternal {
  constexpr CDOTAUserMsg_PredictionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PredictionResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PredictionResultDefaultTypeInternal _CDOTAUserMsg_PredictionResult_default_instance_;
constexpr CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(0)
  , val_numeric_(0)
  , val_stringtable_index_(0)
  , val_int_numeric_(0)
  , valtype_(1)
{}
struct CDOTAResponseQuerySerialized_FactDefaultTypeInternal {
  constexpr CDOTAResponseQuerySerialized_FactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAResponseQuerySerialized_FactDefaultTypeInternal() {}
  union {
    CDOTAResponseQuerySerialized_Fact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAResponseQuerySerialized_FactDefaultTypeInternal _CDOTAResponseQuerySerialized_Fact_default_instance_;
constexpr CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : facts_(){}
struct CDOTAResponseQuerySerializedDefaultTypeInternal {
  constexpr CDOTAResponseQuerySerializedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAResponseQuerySerializedDefaultTypeInternal() {}
  union {
    CDOTAResponseQuerySerialized _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAResponseQuerySerializedDefaultTypeInternal _CDOTAResponseQuerySerialized_default_instance_;
constexpr CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responsequery_(nullptr)
  , speech_concept_(0)
  , recipient_type_(0)
  , randomseed_(0){}
struct CDOTASpeechMatchOnClientDefaultTypeInternal {
  constexpr CDOTASpeechMatchOnClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTASpeechMatchOnClientDefaultTypeInternal() {}
  union {
    CDOTASpeechMatchOnClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTASpeechMatchOnClientDefaultTypeInternal _CDOTASpeechMatchOnClient_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(0)
  , range_(0){}
struct CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_IntervalDefaultTypeInternal _CDOTAUserMsg_UnitEvent_Interval_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predelay_(nullptr)
  , speech_concept_(0)
  , recipient_type_(0)
  , level_(0)
  , muteable_(false)
  , flags_(0u){}
struct CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_Speech _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal _CDOTAUserMsg_UnitEvent_Speech_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delay_(0.5f){}
struct CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_SpeechMute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal _CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_(0)
  , slot_(0)
  , fade_in_(0)
  , sequence_variant_(0)
  , fade_out_(0.1f)
  , playback_rate_(1){}
struct CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_AddGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_AddGesture_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_(0){}
struct CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_RemoveGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scale_(0)
  , x_normal_(0)
  , y_normal_(0){}
struct CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_BloodImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal _CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_;
constexpr CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_(0){}
struct CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent_FadeGesture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal _CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_;
constexpr CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speech_(nullptr)
  , speech_mute_(nullptr)
  , add_gesture_(nullptr)
  , remove_gesture_(nullptr)
  , blood_impact_(nullptr)
  , fade_gesture_(nullptr)
  , speech_match_on_client_(nullptr)
  , msg_type_(0)

  , entity_index_(0){}
struct CDOTAUserMsg_UnitEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_UnitEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UnitEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UnitEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UnitEventDefaultTypeInternal _CDOTAUserMsg_UnitEvent_default_instance_;
constexpr CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0){}
struct CDOTAUserMsg_ItemPurchasedDefaultTypeInternal {
  constexpr CDOTAUserMsg_ItemPurchasedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemPurchasedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemPurchased _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ItemPurchasedDefaultTypeInternal _CDOTAUserMsg_ItemPurchased_default_instance_;
constexpr CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ability_id_(0){}
struct CDOTAUserMsg_ItemSoldDefaultTypeInternal {
  constexpr CDOTAUserMsg_ItemSoldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemSoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemSold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ItemSoldDefaultTypeInternal _CDOTAUserMsg_ItemSold_default_instance_;
constexpr CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(0)
  , quality_(0)
  , rarity_(0)
  , method_(0)
  , itemdef_(0){}
struct CDOTAUserMsg_ItemFoundDefaultTypeInternal {
  constexpr CDOTAUserMsg_ItemFoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ItemFoundDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ItemFound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ItemFoundDefaultTypeInternal _CDOTAUserMsg_ItemFound_default_instance_;
constexpr CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_type_(0)

  , value_(0)
  , target_player_entindex_(0)
  , target_entindex_(0)
  , source_player_entindex_(0){}
struct CDOTAUserMsg_OverheadEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_OverheadEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OverheadEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OverheadEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_OverheadEventDefaultTypeInternal _CDOTAUserMsg_OverheadEvent_default_instance_;
constexpr CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(0){}
struct CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialTipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal _CDOTAUserMsg_TutorialTipInfo_default_instance_;
constexpr CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , emblem_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct CDOTAUserMsg_TutorialFinishDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialFinishDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialFinishDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialFinish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialFinishDefaultTypeInternal _CDOTAUserMsg_TutorialFinish_default_instance_;
constexpr CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialMinimapPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal _CDOTAUserMsg_TutorialMinimapPosition_default_instance_;
constexpr CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entindex_(0)
  , close_(false){}
struct CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal {
  constexpr CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendGenericToolTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal _CDOTAUserMsg_SendGenericToolTip_default_instance_;
constexpr CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldline_(nullptr)
  , player_id_(0){}
struct CDOTAUserMsg_WorldLineDefaultTypeInternal {
  constexpr CDOTAUserMsg_WorldLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WorldLineDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WorldLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_WorldLineDefaultTypeInternal _CDOTAUserMsg_WorldLine_default_instance_;
constexpr CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_message_id_(0u)
  , player_id_(0u)
  , account_id_(0u)
  , param_hero_id_(0u)
  , emoticon_id_(0u){}
struct CDOTAUserMsg_ChatWheelDefaultTypeInternal {
  constexpr CDOTAUserMsg_ChatWheelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatWheelDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ChatWheelDefaultTypeInternal _CDOTAUserMsg_ChatWheel_default_instance_;
constexpr CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , inventory_slot_(0){}
struct CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal {
  constexpr CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ReceivedXmasGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal _CDOTAUserMsg_ReceivedXmasGift_default_instance_;
constexpr CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_style_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , teammate_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , survey_id_(0)
  , teammate_hero_id_(0u)
  , teammate_account_id_(0u){}
struct CDOTAUserMsg_ShowSurveyDefaultTypeInternal {
  constexpr CDOTAUserMsg_ShowSurveyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShowSurveyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShowSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ShowSurveyDefaultTypeInternal _CDOTAUserMsg_ShowSurvey_default_instance_;
constexpr CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_type_(0){}
struct CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal {
  constexpr CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UpdateSharedContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal _CDOTAUserMsg_UpdateSharedContent_default_instance_;
constexpr CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialRequestExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal _CDOTAUserMsg_TutorialRequestExp_default_instance_;
constexpr CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tgt_alpha_(0){}
struct CDOTAUserMsg_TutorialFadeDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialFadeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialFadeDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialFade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialFadeDefaultTypeInternal _CDOTAUserMsg_TutorialFade_default_instance_;
constexpr CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , entity_index_(0){}
struct CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal {
  constexpr CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TutorialPingMinimap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal _CDOTAUserMsg_TutorialPingMinimap_default_instance_;
constexpr CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0u){}
struct CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal {
  constexpr CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GamerulesStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal _CDOTAUserMsg_GamerulesStateChanged_default_instance_;
constexpr CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : npc_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , npc_dialog_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal {
  constexpr CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AddQuestLogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal _CDOTAUserMsg_AddQuestLogEntry_default_instance_;
constexpr CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : statpopup_(nullptr)
  , player_id_(0){}
struct CDOTAUserMsg_SendStatPopupDefaultTypeInternal {
  constexpr CDOTAUserMsg_SendStatPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendStatPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendStatPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SendStatPopupDefaultTypeInternal _CDOTAUserMsg_SendStatPopup_default_instance_;
constexpr CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dismissallmsg_(nullptr){}
struct CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal {
  constexpr CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DismissAllStatPopups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAUserMsg_DismissAllStatPopups_default_instance_;
constexpr CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phase_(0)

  , phase_start_time_(0)
  , phase_length_(0){}
struct CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal {
  constexpr CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendRoshanSpectatorPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal _CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_;
constexpr CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reclaimed_(false)
  , gametime_(0){}
struct CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal {
  constexpr CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendRoshanPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal _CDOTAUserMsg_SendRoshanPopup_default_instance_;
constexpr CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reliable_gold_()
  , unreliable_gold_(){}
struct CDOTAUserMsg_SendFinalGoldDefaultTypeInternal {
  constexpr CDOTAUserMsg_SendFinalGoldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SendFinalGoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SendFinalGold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SendFinalGoldDefaultTypeInternal _CDOTAUserMsg_SendFinalGold_default_instance_;
constexpr CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , value_(0){}
struct CDOTAUserMsg_CustomMsgDefaultTypeInternal {
  constexpr CDOTAUserMsg_CustomMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomMsgDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CustomMsgDefaultTypeInternal _CDOTAUserMsg_CustomMsg_default_instance_;
constexpr CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hud_ping_(nullptr)
  , player_id_(0u){}
struct CDOTAUserMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAUserMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CoachHUDPingDefaultTypeInternal _CDOTAUserMsg_CoachHUDPing_default_instance_;
constexpr CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal {
  constexpr CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ClientLoadGridNav _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal _CDOTAUserMsg_ClientLoadGridNav_default_instance_;
constexpr CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vtargetloc_(nullptr)
  , hsource_(0)
  , htarget_(0)
  , movespeed_(0)
  , sourceattachment_(0)
  , particlesystemhandle_(PROTOBUF_LONGLONG(0))
  , dodgeable_(false)
  , isattack_(false)
  , expiretime_(0)
  , maximpacttime_(0)
  , colorgemcolor_(0u)
  , launch_tick_(0)
  , handle_(0){}
struct CDOTAUserMsg_TE_ProjectileDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_ProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_ProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_Projectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_ProjectileDefaultTypeInternal _CDOTAUserMsg_TE_Projectile_default_instance_;
constexpr CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vsourceloc_(nullptr)
  , vtargetloc_(nullptr)
  , htarget_(0)
  , movespeed_(0)
  , particlesystemhandle_(PROTOBUF_LONGLONG(0))
  , dodgeable_(false)
  , isattack_(false)
  , expiretime_(0)
  , colorgemcolor_(0u)
  , launch_tick_(0)
  , handle_(0)
  , hsource_(0)
  , sourceattachment_(0){}
struct CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_ProjectileLoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal _CDOTAUserMsg_TE_ProjectileLoc_default_instance_;
constexpr CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(0){}
struct CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_DestroyProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_DestroyProjectileDefaultTypeInternal _CDOTAUserMsg_TE_DestroyProjectile_default_instance_;
constexpr CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(0)
  , scale_(0)
  , xnormal_(0)
  , ynormal_(0){}
struct CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_DotaBloodImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal _CDOTAUserMsg_TE_DotaBloodImpact_default_instance_;
constexpr CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , ability_id_(0u)
  , cooldown_seconds_(0u)
  , level_(0u)
  , mana_needed_(0u)
  , entity_id_(0u)
  , primary_charges_(0)
  , passive_(false)
  , ctrl_held_(false)
  , secondary_charges_(0)
  , caster_id_(0u)
  , reclaim_time_(0)
  , type_(1)
{}
struct CDOTAUserMsg_AbilityPingDefaultTypeInternal {
  constexpr CDOTAUserMsg_AbilityPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilityPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AbilityPingDefaultTypeInternal _CDOTAUserMsg_AbilityPing_default_instance_;
constexpr CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(0)
  , sequencevariant_(0)
  , playbackrate_(0)
  , castpoint_(0)
  , type_(0)
  , activity_(0)
  , lag_compensation_time_(0){}
struct CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_UnitAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal _CDOTAUserMsg_TE_UnitAnimation_default_instance_;
constexpr CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_(0)
  , snap_(false){}
struct CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal {
  constexpr CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TE_UnitAnimationEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal _CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_;
constexpr CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tint_screen_(false)
  , show_no_other_dialogs_(false){}
struct CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal {
  constexpr CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShowGenericPopup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal _CDOTAUserMsg_ShowGenericPopup_default_instance_;
constexpr CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : choices_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(0)
  , choice_count_(0){}
struct CDOTAUserMsg_VoteStartDefaultTypeInternal {
  constexpr CDOTAUserMsg_VoteStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteStartDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_VoteStartDefaultTypeInternal _CDOTAUserMsg_VoteStart_default_instance_;
constexpr CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : choice_counts_(){}
struct CDOTAUserMsg_VoteUpdateDefaultTypeInternal {
  constexpr CDOTAUserMsg_VoteUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteUpdateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_VoteUpdateDefaultTypeInternal _CDOTAUserMsg_VoteUpdate_default_instance_;
constexpr CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_choice_(0){}
struct CDOTAUserMsg_VoteEndDefaultTypeInternal {
  constexpr CDOTAUserMsg_VoteEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VoteEndDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VoteEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_VoteEndDefaultTypeInternal _CDOTAUserMsg_VoteEnd_default_instance_;
constexpr CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , bonus_(0)
  , event_bonus_(0)
  , bonus_item_id_(0u)
  , event_bonus_item_id_(0u){}
struct CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal {
  constexpr CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BoosterStatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal _CDOTAUserMsg_BoosterStatePlayer_default_instance_;
constexpr CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boosted_players_(){}
struct CDOTAUserMsg_BoosterStateDefaultTypeInternal {
  constexpr CDOTAUserMsg_BoosterStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BoosterStateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BoosterState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_BoosterStateDefaultTypeInternal _CDOTAUserMsg_BoosterState_default_instance_;
constexpr CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mmr_()
  , _mmr_cached_byte_size_(){}
struct CDOTAUserMsg_PlayerMMRDefaultTypeInternal {
  constexpr CDOTAUserMsg_PlayerMMRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PlayerMMRDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PlayerMMR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PlayerMMRDefaultTypeInternal _CDOTAUserMsg_PlayerMMR_default_instance_;
constexpr CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , ability_id_(0u)
  , ability_level_(0u){}
struct CDOTAUserMsg_AbilityStealDefaultTypeInternal {
  constexpr CDOTAUserMsg_AbilityStealDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityStealDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilitySteal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AbilityStealDefaultTypeInternal _CDOTAUserMsg_AbilitySteal_default_instance_;
constexpr CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0)
  , hero_id_(0){}
struct CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroLookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal _CDOTAUserMsg_StatsHeroLookup_default_instance_;
constexpr CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_category_(0)

  , position_count_(0u){}
struct CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroPositionInfo_PositionPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal _CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_;
constexpr CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_details_()
  , average_position_(0){}
struct CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroPositionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal _CDOTAUserMsg_StatsHeroPositionInfo_default_instance_;
constexpr CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mana_spent_()
  , damage_absorbed_()
  , damage_done_()
  , position_info_(nullptr)
  , last_hits_(0u)
  , hero_kills_(0u)
  , hero_damage_(0u)
  , tower_damage_(0u)
  , total_xp_(0u)
  , net_worth_(0u)
  , harvested_creep_gold_(0u)
  , claimed_farm_(0u)
  , wards_placed_(0u)
  , runes_collected_(0u)
  , tps_used_(0u){}
struct CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsHeroMinuteDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_;
constexpr CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_category_(0u)
  , stat_type_(0u)
  , value_(0u){}
struct CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal _CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_;
constexpr CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_stats_()
  , lane_performance_()
  , tower_kills_(0u)
  , barrack_kills_(0u)
  , available_lane_creep_gold_(0u)
  , balance_kill_value_(0u)
  , balance_tower_value_(0u)
  , balance_barracks_value_(0u)
  , balance_gold_value_(0u)
  , balance_xp_value_(0u){}
struct CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsTeamMinuteDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal _CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_;
constexpr CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , kill_share_percent_(0)
  , player_loc_x_(0)
  , player_loc_y_(0)
  , health_percent_(0)
  , mana_percent_(0){}
struct CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsPlayerKillShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal _CDOTAUserMsg_StatsPlayerKillShare_default_instance_;
constexpr CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_shares_()
  , victim_id_(0u)
  , damage_to_kill_(0u)
  , effective_health_(0u)
  , death_time_(0)
  , killer_id_(0u){}
struct CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsKillDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal _CDOTAUserMsg_StatsKillDetails_default_instance_;
constexpr CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : participants_()
  , deaths_()
  , gold_delta_(0u)
  , xp_delta_(0u){}
struct CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_;
constexpr CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radiant_fight_details_(nullptr)
  , dire_fight_details_(nullptr)
  , start_time_(0)
  , end_time_(0){}
struct CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_;
constexpr CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_lookup_()
  , radiant_stats_()
  , dire_stats_()
  , radiant_kills_()
  , dire_kills_()
  , fight_details_(){}
struct CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal {
  constexpr CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_StatsMatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal _CDOTAUserMsg_StatsMatchDetails_default_instance_;
constexpr CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taunting_player_id_(0u){}
struct CDOTAUserMsg_MiniTauntDefaultTypeInternal {
  constexpr CDOTAUserMsg_MiniTauntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MiniTauntDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MiniTaunt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MiniTauntDefaultTypeInternal _CDOTAUserMsg_MiniTaunt_default_instance_;
constexpr CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destroy_all_(false){}
struct CDOTAUserMsg_SpeechBubbleDefaultTypeInternal {
  constexpr CDOTAUserMsg_SpeechBubbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SpeechBubbleDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SpeechBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SpeechBubbleDefaultTypeInternal _CDOTAUserMsg_SpeechBubble_default_instance_;
constexpr CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u)
  , duration_(0)
  , value_(0){}
struct CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal {
  constexpr CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHeaderMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal _CDOTAUserMsg_CustomHeaderMessage_default_instance_;
constexpr CMsgHeroAbilityStat::CMsgHeroAbilityStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_type_(0)

  , int_value_(0)
  , float_value_(0){}
struct CMsgHeroAbilityStatDefaultTypeInternal {
  constexpr CMsgHeroAbilityStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHeroAbilityStatDefaultTypeInternal() {}
  union {
    CMsgHeroAbilityStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHeroAbilityStatDefaultTypeInternal _CMsgHeroAbilityStat_default_instance_;
constexpr CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_ability_stats_()
  , account_id_(0u){}
struct CMsgCombatAnalyzerPlayerStatDefaultTypeInternal {
  constexpr CMsgCombatAnalyzerPlayerStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCombatAnalyzerPlayerStatDefaultTypeInternal() {}
  union {
    CMsgCombatAnalyzerPlayerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCombatAnalyzerPlayerStatDefaultTypeInternal _CMsgCombatAnalyzerPlayerStat_default_instance_;
constexpr CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_stats_()
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgCombatAnalyzerStatsDefaultTypeInternal {
  constexpr CMsgCombatAnalyzerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCombatAnalyzerStatsDefaultTypeInternal() {}
  union {
    CMsgCombatAnalyzerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCombatAnalyzerStatsDefaultTypeInternal _CMsgCombatAnalyzerStats_default_instance_;
constexpr CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_(0u){}
struct CDOTAUserMsg_BeastChatDefaultTypeInternal {
  constexpr CDOTAUserMsg_BeastChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_BeastChatDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_BeastChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_BeastChatDefaultTypeInternal _CDOTAUserMsg_BeastChat_default_instance_;
constexpr CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , layout_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal {
  constexpr CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Create _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Create_default_instance_;
constexpr CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modify_visible_(false){}
struct CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal {
  constexpr CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Modify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Modify_default_instance_;
constexpr CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal {
  constexpr CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CustomHudElement_Destroy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal _CDOTAUserMsg_CustomHudElement_Destroy_default_instance_;
constexpr CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , level_(0u){}
struct CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal {
  constexpr CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CompendiumStatePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal _CDOTAUserMsg_CompendiumStatePlayer_default_instance_;
constexpr CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compendium_players_(){}
struct CDOTAUserMsg_CompendiumStateDefaultTypeInternal {
  constexpr CDOTAUserMsg_CompendiumStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CompendiumStateDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CompendiumState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CompendiumStateDefaultTypeInternal _CDOTAUserMsg_CompendiumState_default_instance_;
constexpr CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , ability_id_(0u)
  , caster_ent_index_(0)
  , caster_team_(0)
  , channel_end_(false)
  , track_caster_only_(false)
  , end_time_(0)
  , victim_ent_index_(0){}
struct CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal {
  constexpr CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ProjectionAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal _CDOTAUserMsg_ProjectionAbility_default_instance_;
constexpr CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0)

  , team_(0u){}
struct CDOTAUserMsg_ProjectionEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_ProjectionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ProjectionEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ProjectionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ProjectionEventDefaultTypeInternal _CDOTAUserMsg_ProjectionEvent_default_instance_;
constexpr CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , target_entindex_(0u){}
struct CDOTAUserMsg_XPAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_XPAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_XPAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_XPAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_XPAlertDefaultTypeInternal _CDOTAUserMsg_XPAlert_default_instance_;
constexpr CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , target_entindex_(0u)
  , ability_id_(0)
  , slot_(0)
  , learned_(false){}
struct CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TalentTreeAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TalentTreeAlertDefaultTypeInternal _CDOTAUserMsg_TalentTreeAlert_default_instance_;
constexpr CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_UpdateQuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal _CDOTAUserMsg_UpdateQuestProgress_default_instance_;
constexpr CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , quest_id_(0u)
  , challenge_id_(0u)
  , progress_(0u)
  , goal_(0u)
  , query_(0u)
  , fail_gametime_(0)
  , item_ability_id_(0u){}
struct CDOTAUserMsg_QuestStatusDefaultTypeInternal {
  constexpr CDOTAUserMsg_QuestStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QuestStatusDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_QuestStatusDefaultTypeInternal _CDOTAUserMsg_QuestStatus_default_instance_;
constexpr CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , hero_id_(0u)
  , ban_(false){}
struct CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal {
  constexpr CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SuggestHeroPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal _CDOTAUserMsg_SuggestHeroPick_default_instance_;
constexpr CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u){}
struct CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal {
  constexpr CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SuggestHeroRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal _CDOTAUserMsg_SuggestHeroRole_default_instance_;
constexpr CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , damage_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u)
  , damage_taken_(0u)
  , item_type_(0u)
  , item_ability_id_(0u){}
struct CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal {
  constexpr CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_KillcamDamageTaken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal _CDOTAUserMsg_KillcamDamageTaken_default_instance_;
constexpr CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , cost_(0){}
struct CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal {
  constexpr CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SelectPenaltyGold _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal _CDOTAUserMsg_SelectPenaltyGold_default_instance_;
constexpr CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , channel_type_(0u)
  , roll_min_(0u)
  , roll_max_(0u)
  , result_(0u){}
struct CDOTAUserMsg_RollDiceResultDefaultTypeInternal {
  constexpr CDOTAUserMsg_RollDiceResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_RollDiceResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_RollDiceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_RollDiceResultDefaultTypeInternal _CDOTAUserMsg_RollDiceResult_default_instance_;
constexpr CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , channel_type_(0u)
  , result_(false){}
struct CDOTAUserMsg_FlipCoinResultDefaultTypeInternal {
  constexpr CDOTAUserMsg_FlipCoinResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_FlipCoinResultDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_FlipCoinResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_FlipCoinResultDefaultTypeInternal _CDOTAUserMsg_FlipCoinResult_default_instance_;
constexpr CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal {
  constexpr CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal() {}
  union {
    CDOTAUserMessage_RequestItemSuggestions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal _CDOTAUserMessage_RequestItemSuggestions_default_instance_;
constexpr CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0u)
  , captain_player_id_(0u){}
struct CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal {
  constexpr CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal() {}
  union {
    CDOTAUserMessage_TeamCaptainChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal _CDOTAUserMessage_TeamCaptainChanged_default_instance_;
constexpr CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_id_(0u)
  , cooldown_remaining_(0){}
struct CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal {
  constexpr CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatWheelCooldown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal _CDOTAUserMsg_ChatWheelCooldown_default_instance_;
constexpr CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_relic_type_(0u)
  , value_(0u)
  , ehandle_(0u)
  , event_id_(0u){}
struct CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HeroRelicProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HeroRelicProgressDefaultTypeInternal _CDOTAUserMsg_HeroRelicProgress_default_instance_;
constexpr CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , requested_ability_id_(0u)
  , ctrl_is_down_(false){}
struct CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal {
  constexpr CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AbilityDraftRequestAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AbilityDraftRequestAbilityDefaultTypeInternal _CDOTAUserMsg_AbilityDraftRequestAbility_default_instance_;
constexpr CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , target_hero_id_(0u)
  , source_hero_id_(0u)
  , damage_amount_(0)
  , broadcast_(false){}
struct CDOTAUserMsg_DamageReportDefaultTypeInternal {
  constexpr CDOTAUserMsg_DamageReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DamageReportDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DamageReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_DamageReportDefaultTypeInternal _CDOTAUserMsg_DamageReport_default_instance_;
constexpr CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_player_id_(0)
  , target_player_id_(0)
  , tip_amount_(0u)
  , event_id_(0u){}
struct CDOTAUserMsg_SalutePlayerDefaultTypeInternal {
  constexpr CDOTAUserMsg_SalutePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_SalutePlayerDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_SalutePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_SalutePlayerDefaultTypeInternal _CDOTAUserMsg_SalutePlayer_default_instance_;
constexpr CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tip_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u){}
struct CDOTAUserMsg_TipAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_TipAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_TipAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_TipAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_TipAlertDefaultTypeInternal _CDOTAUserMsg_TipAlert_default_instance_;
constexpr CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , source_entindex_(0u)
  , target_entindex_(0u){}
struct CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal {
  constexpr CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ReplaceQueryUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ReplaceQueryUnitDefaultTypeInternal _CDOTAUserMsg_ReplaceQueryUnit_default_instance_;
constexpr CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , combo_count_(0u)
  , arcana_level_(0u){}
struct CDOTAUserMsg_ESArcanaComboDefaultTypeInternal {
  constexpr CDOTAUserMsg_ESArcanaComboDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ESArcanaComboDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ESArcanaCombo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ESArcanaComboDefaultTypeInternal _CDOTAUserMsg_ESArcanaCombo_default_instance_;
constexpr CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , combo_count_(0u)
  , damage_amount_(0u){}
struct CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal {
  constexpr CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ESArcanaComboSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ESArcanaComboSummaryDefaultTypeInternal _CDOTAUserMsg_ESArcanaComboSummary_default_instance_;
constexpr CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , multicast_amount_(0u)
  , arcana_level_(0u)
  , multicast_chance_(0u){}
struct CDOTAUserMsg_OMArcanaComboDefaultTypeInternal {
  constexpr CDOTAUserMsg_OMArcanaComboDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OMArcanaComboDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OMArcanaCombo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_OMArcanaComboDefaultTypeInternal _CDOTAUserMsg_OMArcanaCombo_default_instance_;
constexpr CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_1_(0u)
  , player_id_2_(0u)
  , special_high_five_(false){}
struct CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal {
  constexpr CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HighFiveCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HighFiveCompletedDefaultTypeInternal _CDOTAUserMsg_HighFiveCompleted_default_instance_;
constexpr CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal {
  constexpr CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HighFiveLeftHanging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HighFiveLeftHangingDefaultTypeInternal _CDOTAUserMsg_HighFiveLeftHanging_default_instance_;
constexpr CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locstring_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(0u)
  , all_chat_(false)
  , quantity_(0u){}
struct CDOTAUserMsg_ShovelUnearthDefaultTypeInternal {
  constexpr CDOTAUserMsg_ShovelUnearthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ShovelUnearthDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ShovelUnearth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ShovelUnearthDefaultTypeInternal _CDOTAUserMsg_ShovelUnearth_default_instance_;
constexpr CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , score_sans_kda_(0u){}
struct CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal {
  constexpr CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AllStarEvent_PlayerScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AllStarEvent_PlayerScoreDefaultTypeInternal _CDOTAUserMsg_AllStarEvent_PlayerScore_default_instance_;
constexpr CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_scores_()
  , source_player_id_(0)
  , target_player_id_(0)
  , point_amount_(0u)
  , event_id_(0u){}
struct CDOTAUserMsg_AllStarEventDefaultTypeInternal {
  constexpr CDOTAUserMsg_AllStarEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AllStarEventDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AllStarEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AllStarEventDefaultTypeInternal _CDOTAUserMsg_AllStarEvent_default_instance_;
constexpr CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_order_sequence_(){}
struct CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal {
  constexpr CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QueuedOrderRemoved _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_QueuedOrderRemovedDefaultTypeInternal _CDOTAUserMsg_QueuedOrderRemoved_default_instance_;
constexpr CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_type_(0u)
  , challenge_query_id_(0u)
  , event_id_(0u)
  , instance_id_(0u)
  , challenge_var_0_(0u)
  , challenge_var_1_(0u)
  , challenge_max_rank_(0u){}
struct CDOTAUserMsg_DebugChallengeDefaultTypeInternal {
  constexpr CDOTAUserMsg_DebugChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_DebugChallengeDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_DebugChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_DebugChallengeDefaultTypeInternal _CDOTAUserMsg_DebugChallenge_default_instance_;
constexpr CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , item_ability_id_(0u)
  , item_tier_(0u)
  , tier_item_count_(0u){}
struct CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal {
  constexpr CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_FoundNeutralItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_FoundNeutralItemDefaultTypeInternal _CDOTAUserMsg_FoundNeutralItem_default_instance_;
constexpr CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outpost_entindex_(0u)
  , team_id_(0u){}
struct CDOTAUserMsg_OutpostCapturedDefaultTypeInternal {
  constexpr CDOTAUserMsg_OutpostCapturedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OutpostCapturedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OutpostCaptured _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_OutpostCapturedDefaultTypeInternal _CDOTAUserMsg_OutpostCaptured_default_instance_;
constexpr CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u)
  , xp_amount_(0u){}
struct CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal {
  constexpr CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_OutpostGrantedXP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_OutpostGrantedXPDefaultTypeInternal _CDOTAUserMsg_OutpostGrantedXP_default_instance_;
constexpr CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_ehandle_(0){}
struct CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal {
  constexpr CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MoveCameraToUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MoveCameraToUnitDefaultTypeInternal _CDOTAUserMsg_MoveCameraToUnit_default_instance_;
constexpr CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0u)
  , data_(0)
  , data_extra_(PROTOBUF_LONGLONG(0)){}
struct CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal {
  constexpr CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PauseMinigameData_DataBit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PauseMinigameData_DataBitDefaultTypeInternal _CDOTAUserMsg_PauseMinigameData_DataBit_default_instance_;
constexpr CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_bits_(){}
struct CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal {
  constexpr CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_PauseMinigameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_PauseMinigameDataDefaultTypeInternal _CDOTAUserMsg_PauseMinigameData_default_instance_;
constexpr CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : play_activity_(nullptr)
  , chat_wheel_(nullptr)
  , playback_rate_(nullptr)
  , player_id_(0u)
  , behavior_(1)
{}
struct CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal {
  constexpr CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_VersusScene_PlayerBehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_VersusScene_PlayerBehaviorDefaultTypeInternal _CDOTAUserMsg_VersusScene_PlayerBehavior_default_instance_;
constexpr CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , arcana_level_(0u)
  , players_hit_(0u)
  , players_killed_(0u){}
struct CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal {
  constexpr CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_QoP_ArcanaSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_QoP_ArcanaSummaryDefaultTypeInternal _CDOTAUserMsg_QoP_ArcanaSummary_default_instance_;
constexpr CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_1_(0u)
  , player_id_2_(0u){}
struct CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal {
  constexpr CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HotPotato_Created _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HotPotato_CreatedDefaultTypeInternal _CDOTAUserMsg_HotPotato_Created_default_instance_;
constexpr CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u){}
struct CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal {
  constexpr CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_HotPotato_Exploded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_HotPotato_ExplodedDefaultTypeInternal _CDOTAUserMsg_HotPotato_Exploded_default_instance_;
constexpr CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , arcana_level_(0u)
  , hero_id_(0u){}
struct CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WK_Arcana_Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_WK_Arcana_ProgressDefaultTypeInternal _CDOTAUserMsg_WK_Arcana_Progress_default_instance_;
constexpr CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , progress_(0u){}
struct CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GuildChallenge_Progress_PlayerProgressDefaultTypeInternal _CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress_default_instance_;
constexpr CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_progress_()
  , guild_id_(0u)
  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , challenge_type_(0)

  , challenge_progress_at_start_(0u)
  , complete_(false){}
struct CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_GuildChallenge_Progress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_GuildChallenge_ProgressDefaultTypeInternal _CDOTAUserMsg_GuildChallenge_Progress_default_instance_;
constexpr CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , target_ehandle_(0u)
  , arrows_landed_(0u)
  , damage_dealt_(0u)
  , target_hp_(0u)
  , target_max_hp_(0u)
  , arcana_level_(0u){}
struct CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal {
  constexpr CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WRArcanaProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_WRArcanaProgressDefaultTypeInternal _CDOTAUserMsg_WRArcanaProgress_default_instance_;
constexpr CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0u)
  , target_ehandle_(0u)
  , arrows_landed_(0u)
  , damage_dealt_(0u)
  , target_hp_(0u)
  , target_max_hp_(0u)
  , arcana_level_(0u)
  , success_(false){}
struct CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal {
  constexpr CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_WRArcanaSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_WRArcanaSummaryDefaultTypeInternal _CDOTAUserMsg_WRArcanaSummary_default_instance_;
constexpr CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_player_id_(0)
  , target_player_id_(0)
  , slot_index_(0)
  , cooldown_seconds_(0){}
struct CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_EmptyItemSlotAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_EmptyItemSlotAlertDefaultTypeInternal _CDOTAUserMsg_EmptyItemSlotAlert_default_instance_;
constexpr CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_player_id_(0u)
  , target_player_id_(0u)
  , target_entindex_(0u)
  , alert_type_(0u)
  , has_scepter_(false)
  , has_shard_(false){}
struct CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal {
  constexpr CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_AghsStatusAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_AghsStatusAlertDefaultTypeInternal _CDOTAUserMsg_AghsStatusAlert_default_instance_;
constexpr CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_muted_player_ids_()
  , voice_muted_player_ids_(){}
struct CDOTAUserMsg_MutedPlayersDefaultTypeInternal {
  constexpr CDOTAUserMsg_MutedPlayersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_MutedPlayersDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_MutedPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_MutedPlayersDefaultTypeInternal _CDOTAUserMsg_MutedPlayers_default_instance_;
constexpr CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referenced_abilities_()
  , referenced_units_()
  , panorama_classes_()
  , string_param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string_param2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tip_text_override_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tip_annotation_override_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , panorama_snippet_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tip_id_(0)
  , force_annotation_(false)
  , variant_(0)
  , int_param_(0)
  , int_param2_(0)
  , float_param_(0)
  , float_param2_(0){}
struct CDOTAUserMsg_ContextualTipDefaultTypeInternal {
  constexpr CDOTAUserMsg_ContextualTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ContextualTipDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ContextualTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ContextualTipDefaultTypeInternal _CDOTAUserMsg_ContextualTip_default_instance_;
constexpr CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_player_id_(0)
  , channel_type_(0u){}
struct CDOTAUserMsg_ChatMessageDefaultTypeInternal {
  constexpr CDOTAUserMsg_ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_ChatMessageDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_ChatMessageDefaultTypeInternal _CDOTAUserMsg_ChatMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fusermessages_2eproto[170];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fusermessages_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fusermessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fusermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AIDebugLine, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, ping_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_Ping, loss_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SwapVerify, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_3_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_4_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_5_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, playerid_6_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, value2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatEvent, value3_),
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, target_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BotChat, team_only_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, world_pos_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatHeroPositions, health_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, combat_entries_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CombatLogBulkData, player_id_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, damage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, total_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_name_),
  1,
  2,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniKillCamInfo, attackers_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, color_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightColor, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, direction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlobalLightDirection, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_LocationPing, location_ping_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, player_id_of_original_pinger_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, entity_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, icon_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PingConfirmation, location_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemAlert, item_alert_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, rune_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, entity_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, item_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, primary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EnemyItemAlert, secondary_charges_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, class_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, stack_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, is_debuff_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ModifierAlert, seconds_remaining_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HPManaAlert, show_raw_values_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GlyphAlert, negative_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RadarAlert, negative_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, gold_remaining_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WillPurchaseAlert, suggestion_player_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyTeleportAlert, cooldown_seconds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, source_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MarsArenaOfBloodAttack, warrior_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, entity_msg_),
  PROTOBUF_FIELD_OFFSET(::CDOTAEntityMsg_InvokerSpellCast, cast_activity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BuyBackStateAlert, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, gold_cost_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, item_cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuickBuyAlert, show_buyback_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert_LostItem, quantity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, gold_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, lost_items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CourierKilledAlert, owning_player_id_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, event_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapEvent, target_entity_handle_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MapLine, mapline_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, location_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, color_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, size_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MinimapDebugPoint, index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, velocity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, particle_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, acceleration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, max_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, fow_radius_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, sticky_fow_reveal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, distance_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CreateLinearProjectile, colorgemcolor_),
  0,
  1,
  4,
  3,
  5,
  2,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DestroyLinearProjectile, handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DodgeTrackingProjectiles, attacks_only_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerClick, target_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, order_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, target_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, queue_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpectatorPlayerUnitOrders, flags_),
  1,
  2,
  ~0u,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, lines_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_NevermoreRequiem, reverse_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_InvalidCommand, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HudError, order_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, cooldown_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SharedCooldown, name_index_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SetNextAutobuyItem, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, item_defs_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HalloweenDrops, prize_list_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, item_def_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, num_correct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, num_fails_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, result_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult_Prediction, granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, correct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PredictionResult, predictions_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, key_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, valtype_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, val_numeric_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, val_string_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, val_stringtable_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized_Fact, val_int_numeric_),
  1,
  5,
  2,
  0,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAResponseQuerySerialized, facts_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, speech_concept_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, recipient_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, responsequery_),
  PROTOBUF_FIELD_OFFSET(::CDOTASpeechMatchOnClient, randomseed_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Interval, range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, speech_concept_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, response_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, recipient_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, muteable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, predelay_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_Speech, flags_),
  2,
  0,
  3,
  4,
  5,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_SpeechMute, delay_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, fade_in_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, fade_out_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, playback_rate_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_AddGesture, sequence_variant_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_RemoveGesture, activity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, scale_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, x_normal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_BloodImpact, y_normal_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent_FadeGesture, activity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, entity_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, speech_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, speech_mute_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, add_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, remove_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, blood_impact_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, fade_gesture_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UnitEvent, speech_match_on_client_),
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemPurchased, item_ability_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemSold, item_ability_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, player_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, quality_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, rarity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, method_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ItemFound, itemdef_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, message_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, target_player_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OverheadEvent, source_player_entindex_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialTipInfo, progress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, heading_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, emblem_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, body_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFinish, success_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialMinimapPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, text_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendGenericToolTip, close_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WorldLine, worldline_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, chat_message_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, param_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheel, emoticon_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, item_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReceivedXmasGift, inventory_slot_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, survey_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, response_style_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, teammate_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, teammate_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowSurvey, teammate_account_id_),
  3,
  2,
  0,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateSharedContent, slot_type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialRequestExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialFade, tgt_alpha_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, pos_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, pos_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, pos_z_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TutorialPingMinimap, entity_index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GamerulesStateChanged, state_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, npc_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AddQuestLogEntry, npc_dialog_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendStatPopup, statpopup_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DismissAllStatPopups, dismissallmsg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, phase_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, phase_start_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanSpectatorPhase, phase_length_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, reclaimed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendRoshanPopup, gametime_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, reliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SendFinalGold, unreliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomMsg, value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, hud_ping_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ClientLoadGridNav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, hsource_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, htarget_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, movespeed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, sourceattachment_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, particlesystemhandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, isattack_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, expiretime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, maximpacttime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, colorgemcolor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, launch_tick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_Projectile, vtargetloc_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, vsourceloc_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, htarget_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, movespeed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, particlesystemhandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, isattack_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, expiretime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, vtargetloc_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, colorgemcolor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, launch_tick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, handle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, hsource_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_ProjectileLoc, sourceattachment_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DestroyProjectile, handle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, scale_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, xnormal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_DotaBloodImpact, ynormal_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, cooldown_seconds_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, passive_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, mana_needed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, entity_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, primary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, secondary_charges_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, caster_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, ctrl_held_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityPing, reclaim_time_),
  0,
  1,
  12,
  2,
  3,
  7,
  4,
  5,
  6,
  9,
  10,
  8,
  11,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, sequencevariant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, playbackrate_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, castpoint_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimation, lag_compensation_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, entity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TE_UnitAnimationEnd, snap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, header_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, body_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, param1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, tint_screen_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShowGenericPopup, show_no_other_dialogs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, choice_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteStart, choices_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteUpdate, choice_counts_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VoteEnd, selected_choice_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, bonus_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, event_bonus_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, bonus_item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterStatePlayer, event_bonus_item_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BoosterState, boosted_players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerMMR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PlayerMMR, mmr_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilitySteal, ability_level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, hero_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroLookup, persona_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_category_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, average_position_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroPositionInfo, position_details_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, hero_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, position_info_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, total_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, harvested_creep_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, claimed_farm_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, runes_collected_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, tps_used_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, mana_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsHeroMinuteDetails, damage_done_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, location_category_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, stat_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, player_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, barrack_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, available_lane_creep_gold_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, balance_kill_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, balance_tower_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, balance_barracks_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, balance_gold_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, balance_xp_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsTeamMinuteDetails, lane_performance_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, kill_share_percent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, player_loc_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, player_loc_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, health_percent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsPlayerKillShare, mana_percent_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, victim_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, kill_shares_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, damage_to_kill_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, effective_health_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, death_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsKillDetails, killer_id_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, participants_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, gold_delta_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, xp_delta_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, start_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, end_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, radiant_fight_details_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, dire_fight_details_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, hero_lookup_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, radiant_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, dire_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, radiant_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, dire_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_StatsMatchDetails, fight_details_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MiniTaunt, taunting_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SpeechBubble, destroy_all_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHeaderMessage, value_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, stat_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, int_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgHeroAbilityStat, float_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerPlayerStat, hero_ability_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCombatAnalyzerStats, player_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, format_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, message_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_BeastChat, target_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, element_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, layout_filename_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Create, data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, element_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, modify_visible_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Modify, data_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CustomHudElement_Destroy, element_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumStatePlayer, level_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CompendiumState, compendium_players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, caster_ent_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, caster_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, channel_end_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, origin_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, track_caster_only_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, end_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionAbility, victim_ent_index_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ProjectionEvent, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_XPAlert, target_entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TalentTreeAlert, learned_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_UpdateQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, goal_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, query_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, fail_gametime_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QuestStatus, item_ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroPick, ban_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SuggestHeroRole, hero_role_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, item_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, hero_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_KillcamDamageTaken, damage_color_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SelectPenaltyGold, cost_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, roll_min_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, roll_max_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_RollDiceResult, result_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FlipCoinResult, result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_RequestItemSuggestions, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMessage_TeamCaptainChanged, captain_player_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, message_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatWheelCooldown, cooldown_remaining_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, hero_relic_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HeroRelicProgress, event_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AbilityDraftRequestAbility, ctrl_is_down_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, source_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, damage_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DamageReport, broadcast_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_SalutePlayer, event_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_TipAlert, tip_text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, source_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ReplaceQueryUnit, target_entindex_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, combo_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaCombo, arcana_level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, combo_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ESArcanaComboSummary, damage_amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, multicast_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OMArcanaCombo, multicast_chance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, player_id_2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveCompleted, special_high_five_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HighFiveLeftHanging, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, all_chat_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, locstring_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ShovelUnearth, quantity_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent_PlayerScore, score_sans_kda_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, point_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AllStarEvent, player_scores_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QueuedOrderRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QueuedOrderRemoved, unit_order_sequence_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, challenge_query_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, challenge_var_0_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, challenge_var_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_DebugChallenge, challenge_max_rank_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, item_tier_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_FoundNeutralItem, tier_item_count_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, outpost_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostCaptured, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, team_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_OutpostGrantedXP, xp_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MoveCameraToUnit, unit_ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData_DataBit, data_extra_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_PauseMinigameData, data_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, behavior_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, play_activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, chat_wheel_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_VersusScene_PlayerBehavior, playback_rate_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, players_hit_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_QoP_ArcanaSummary, players_killed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, player_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Created, player_id_2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_HotPotato_Exploded, player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WK_Arcana_Progress, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, progress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, player_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_GuildChallenge_Progress, complete_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, arrows_landed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, target_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, target_max_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaProgress, arcana_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, target_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, arrows_landed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, target_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, target_max_hp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, arcana_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_WRArcanaSummary, success_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, slot_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_EmptyItemSlotAlert, cooldown_seconds_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, target_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, target_entindex_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, alert_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, has_scepter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_AghsStatusAlert, has_shard_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, text_muted_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_MutedPlayers, voice_muted_player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, tip_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, referenced_abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, referenced_units_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, panorama_classes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, force_annotation_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, variant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, int_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, int_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, float_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, float_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, string_param_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, string_param2_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, tip_text_override_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, tip_annotation_override_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ContextualTip, panorama_snippet_),
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, source_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_ChatMessage, message_text_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CDOTAUserMsg_AIDebugLine)},
  { 7, 14, sizeof(::CDOTAUserMsg_Ping)},
  { 16, 22, sizeof(::CDOTAUserMsg_SwapVerify)},
  { 23, 38, sizeof(::CDOTAUserMsg_ChatEvent)},
  { 48, 57, sizeof(::CDOTAUserMsg_BotChat)},
  { 61, 70, sizeof(::CDOTAUserMsg_CombatHeroPositions)},
  { 74, 83, sizeof(::CDOTAUserMsg_CombatLogBulkData)},
  { 87, 94, sizeof(::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability)},
  { 96, 105, sizeof(::CDOTAUserMsg_MiniKillCamInfo_Attacker)},
  { 109, -1, sizeof(::CDOTAUserMsg_MiniKillCamInfo)},
  { 115, 122, sizeof(::CDOTAUserMsg_GlobalLightColor)},
  { 124, 131, sizeof(::CDOTAUserMsg_GlobalLightDirection)},
  { 133, 140, sizeof(::CDOTAUserMsg_LocationPing)},
  { 142, 151, sizeof(::CDOTAUserMsg_PingConfirmation)},
  { 155, 162, sizeof(::CDOTAUserMsg_ItemAlert)},
  { 164, 177, sizeof(::CDOTAUserMsg_EnemyItemAlert)},
  { 185, 196, sizeof(::CDOTAUserMsg_ModifierAlert)},
  { 202, 210, sizeof(::CDOTAUserMsg_HPManaAlert)},
  { 213, 220, sizeof(::CDOTAUserMsg_GlyphAlert)},
  { 222, 229, sizeof(::CDOTAUserMsg_RadarAlert)},
  { 231, 240, sizeof(::CDOTAUserMsg_WillPurchaseAlert)},
  { 244, 252, sizeof(::CDOTAUserMsg_EmptyTeleportAlert)},
  { 255, 263, sizeof(::CDOTAUserMsg_MarsArenaOfBloodAttack)},
  { 266, 273, sizeof(::CDOTAEntityMsg_InvokerSpellCast)},
  { 275, 281, sizeof(::CDOTAUserMsg_BuyBackStateAlert)},
  { 282, 292, sizeof(::CDOTAUserMsg_QuickBuyAlert)},
  { 297, 304, sizeof(::CDOTAUserMsg_CourierKilledAlert_LostItem)},
  { 306, 318, sizeof(::CDOTAUserMsg_CourierKilledAlert)},
  { 325, 336, sizeof(::CDOTAUserMsg_MinimapEvent)},
  { 342, 349, sizeof(::CDOTAUserMsg_MapLine)},
  { 351, 361, sizeof(::CDOTAUserMsg_MinimapDebugPoint)},
  { 366, 382, sizeof(::CDOTAUserMsg_CreateLinearProjectile)},
  { 393, 399, sizeof(::CDOTAUserMsg_DestroyLinearProjectile)},
  { 400, 407, sizeof(::CDOTAUserMsg_DodgeTrackingProjectiles)},
  { 409, 417, sizeof(::CDOTAUserMsg_SpectatorPlayerClick)},
  { 420, 434, sizeof(::CDOTAUserMsg_SpectatorPlayerUnitOrders)},
  { 443, 452, sizeof(::CDOTAUserMsg_NevermoreRequiem)},
  { 456, 462, sizeof(::CDOTAUserMsg_InvalidCommand)},
  { 463, 469, sizeof(::CDOTAUserMsg_HudError)},
  { 470, 479, sizeof(::CDOTAUserMsg_SharedCooldown)},
  { 483, 489, sizeof(::CDOTAUserMsg_SetNextAutobuyItem)},
  { 490, 498, sizeof(::CDOTAUserMsg_HalloweenDrops)},
  { 501, 511, sizeof(::CDOTAUserMsg_PredictionResult_Prediction)},
  { 516, 525, sizeof(::CDOTAUserMsg_PredictionResult)},
  { 529, 540, sizeof(::CDOTAResponseQuerySerialized_Fact)},
  { 546, -1, sizeof(::CDOTAResponseQuerySerialized)},
  { 552, 561, sizeof(::CDOTASpeechMatchOnClient)},
  { 565, 572, sizeof(::CDOTAUserMsg_UnitEvent_Interval)},
  { 574, 586, sizeof(::CDOTAUserMsg_UnitEvent_Speech)},
  { 593, 599, sizeof(::CDOTAUserMsg_UnitEvent_SpeechMute)},
  { 600, 611, sizeof(::CDOTAUserMsg_UnitEvent_AddGesture)},
  { 617, 623, sizeof(::CDOTAUserMsg_UnitEvent_RemoveGesture)},
  { 624, 632, sizeof(::CDOTAUserMsg_UnitEvent_BloodImpact)},
  { 635, 641, sizeof(::CDOTAUserMsg_UnitEvent_FadeGesture)},
  { 642, 656, sizeof(::CDOTAUserMsg_UnitEvent)},
  { 665, 671, sizeof(::CDOTAUserMsg_ItemPurchased)},
  { 672, 678, sizeof(::CDOTAUserMsg_ItemSold)},
  { 679, 689, sizeof(::CDOTAUserMsg_ItemFound)},
  { 694, 704, sizeof(::CDOTAUserMsg_OverheadEvent)},
  { 709, 716, sizeof(::CDOTAUserMsg_TutorialTipInfo)},
  { 718, 727, sizeof(::CDOTAUserMsg_TutorialFinish)},
  { 731, -1, sizeof(::CDOTAUserMsg_TutorialMinimapPosition)},
  { 736, 745, sizeof(::CDOTAUserMsg_SendGenericToolTip)},
  { 749, 756, sizeof(::CDOTAUserMsg_WorldLine)},
  { 758, 768, sizeof(::CDOTAUserMsg_ChatWheel)},
  { 773, 781, sizeof(::CDOTAUserMsg_ReceivedXmasGift)},
  { 784, 795, sizeof(::CDOTAUserMsg_ShowSurvey)},
  { 801, 807, sizeof(::CDOTAUserMsg_UpdateSharedContent)},
  { 808, -1, sizeof(::CDOTAUserMsg_TutorialRequestExp)},
  { 813, 819, sizeof(::CDOTAUserMsg_TutorialFade)},
  { 820, 830, sizeof(::CDOTAUserMsg_TutorialPingMinimap)},
  { 835, 841, sizeof(::CDOTAUserMsg_GamerulesStateChanged)},
  { 842, 849, sizeof(::CDOTAUserMsg_AddQuestLogEntry)},
  { 851, 858, sizeof(::CDOTAUserMsg_SendStatPopup)},
  { 860, 866, sizeof(::CDOTAUserMsg_DismissAllStatPopups)},
  { 867, 875, sizeof(::CDOTAUserMsg_SendRoshanSpectatorPhase)},
  { 878, 885, sizeof(::CDOTAUserMsg_SendRoshanPopup)},
  { 887, -1, sizeof(::CDOTAUserMsg_SendFinalGold)},
  { 894, 902, sizeof(::CDOTAUserMsg_CustomMsg)},
  { 905, 912, sizeof(::CDOTAUserMsg_CoachHUDPing)},
  { 914, -1, sizeof(::CDOTAUserMsg_ClientLoadGridNav)},
  { 919, 937, sizeof(::CDOTAUserMsg_TE_Projectile)},
  { 950, 968, sizeof(::CDOTAUserMsg_TE_ProjectileLoc)},
  { 981, 987, sizeof(::CDOTAUserMsg_TE_DestroyProjectile)},
  { 988, 997, sizeof(::CDOTAUserMsg_TE_DotaBloodImpact)},
  { 1001, 1019, sizeof(::CDOTAUserMsg_AbilityPing)},
  { 1032, 1044, sizeof(::CDOTAUserMsg_TE_UnitAnimation)},
  { 1051, 1058, sizeof(::CDOTAUserMsg_TE_UnitAnimationEnd)},
  { 1060, 1071, sizeof(::CDOTAUserMsg_ShowGenericPopup)},
  { 1077, 1086, sizeof(::CDOTAUserMsg_VoteStart)},
  { 1090, -1, sizeof(::CDOTAUserMsg_VoteUpdate)},
  { 1096, 1102, sizeof(::CDOTAUserMsg_VoteEnd)},
  { 1103, 1113, sizeof(::CDOTAUserMsg_BoosterStatePlayer)},
  { 1118, -1, sizeof(::CDOTAUserMsg_BoosterState)},
  { 1124, -1, sizeof(::CDOTAUserMsg_PlayerMMR)},
  { 1130, 1138, sizeof(::CDOTAUserMsg_AbilitySteal)},
  { 1141, 1150, sizeof(::CDOTAUserMsg_StatsHeroLookup)},
  { 1154, 1161, sizeof(::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair)},
  { 1163, 1170, sizeof(::CDOTAUserMsg_StatsHeroPositionInfo)},
  { 1172, 1192, sizeof(::CDOTAUserMsg_StatsHeroMinuteDetails)},
  { 1207, 1215, sizeof(::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance)},
  { 1218, 1233, sizeof(::CDOTAUserMsg_StatsTeamMinuteDetails)},
  { 1243, 1254, sizeof(::CDOTAUserMsg_StatsPlayerKillShare)},
  { 1260, 1271, sizeof(::CDOTAUserMsg_StatsKillDetails)},
  { 1277, 1286, sizeof(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails)},
  { 1290, 1299, sizeof(::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails)},
  { 1303, -1, sizeof(::CDOTAUserMsg_StatsMatchDetails)},
  { 1314, 1320, sizeof(::CDOTAUserMsg_MiniTaunt)},
  { 1321, 1327, sizeof(::CDOTAUserMsg_SpeechBubble)},
  { 1328, 1337, sizeof(::CDOTAUserMsg_CustomHeaderMessage)},
  { 1341, 1349, sizeof(::CMsgHeroAbilityStat)},
  { 1352, 1359, sizeof(::CMsgCombatAnalyzerPlayerStat)},
  { 1361, 1368, sizeof(::CMsgCombatAnalyzerStats)},
  { 1370, 1379, sizeof(::CDOTAUserMsg_BeastChat)},
  { 1383, 1391, sizeof(::CDOTAUserMsg_CustomHudElement_Create)},
  { 1394, 1402, sizeof(::CDOTAUserMsg_CustomHudElement_Modify)},
  { 1405, 1411, sizeof(::CDOTAUserMsg_CustomHudElement_Destroy)},
  { 1412, 1419, sizeof(::CDOTAUserMsg_CompendiumStatePlayer)},
  { 1421, -1, sizeof(::CDOTAUserMsg_CompendiumState)},
  { 1427, 1440, sizeof(::CDOTAUserMsg_ProjectionAbility)},
  { 1448, 1455, sizeof(::CDOTAUserMsg_ProjectionEvent)},
  { 1457, 1464, sizeof(::CDOTAUserMsg_XPAlert)},
  { 1466, 1476, sizeof(::CDOTAUserMsg_TalentTreeAlert)},
  { 1481, -1, sizeof(::CDOTAUserMsg_UpdateQuestProgress)},
  { 1486, 1499, sizeof(::CDOTAUserMsg_QuestStatus)},
  { 1507, 1515, sizeof(::CDOTAUserMsg_SuggestHeroPick)},
  { 1518, 1525, sizeof(::CDOTAUserMsg_SuggestHeroRole)},
  { 1527, 1538, sizeof(::CDOTAUserMsg_KillcamDamageTaken)},
  { 1544, 1551, sizeof(::CDOTAUserMsg_SelectPenaltyGold)},
  { 1553, 1563, sizeof(::CDOTAUserMsg_RollDiceResult)},
  { 1568, 1576, sizeof(::CDOTAUserMsg_FlipCoinResult)},
  { 1579, 1585, sizeof(::CDOTAUserMessage_RequestItemSuggestions)},
  { 1586, 1593, sizeof(::CDOTAUserMessage_TeamCaptainChanged)},
  { 1595, 1602, sizeof(::CDOTAUserMsg_ChatWheelCooldown)},
  { 1604, 1613, sizeof(::CDOTAUserMsg_HeroRelicProgress)},
  { 1617, 1625, sizeof(::CDOTAUserMsg_AbilityDraftRequestAbility)},
  { 1628, 1638, sizeof(::CDOTAUserMsg_DamageReport)},
  { 1643, 1652, sizeof(::CDOTAUserMsg_SalutePlayer)},
  { 1656, 1663, sizeof(::CDOTAUserMsg_TipAlert)},
  { 1665, 1673, sizeof(::CDOTAUserMsg_ReplaceQueryUnit)},
  { 1676, 1684, sizeof(::CDOTAUserMsg_ESArcanaCombo)},
  { 1687, 1695, sizeof(::CDOTAUserMsg_ESArcanaComboSummary)},
  { 1698, 1707, sizeof(::CDOTAUserMsg_OMArcanaCombo)},
  { 1711, 1719, sizeof(::CDOTAUserMsg_HighFiveCompleted)},
  { 1722, 1728, sizeof(::CDOTAUserMsg_HighFiveLeftHanging)},
  { 1729, 1738, sizeof(::CDOTAUserMsg_ShovelUnearth)},
  { 1742, 1749, sizeof(::CDOTAUserMsg_AllStarEvent_PlayerScore)},
  { 1751, 1761, sizeof(::CDOTAUserMsg_AllStarEvent)},
  { 1766, -1, sizeof(::CDOTAUserMsg_QueuedOrderRemoved)},
  { 1772, 1784, sizeof(::CDOTAUserMsg_DebugChallenge)},
  { 1791, 1800, sizeof(::CDOTAUserMsg_FoundNeutralItem)},
  { 1804, 1811, sizeof(::CDOTAUserMsg_OutpostCaptured)},
  { 1813, 1820, sizeof(::CDOTAUserMsg_OutpostGrantedXP)},
  { 1822, 1828, sizeof(::CDOTAUserMsg_MoveCameraToUnit)},
  { 1829, 1837, sizeof(::CDOTAUserMsg_PauseMinigameData_DataBit)},
  { 1840, -1, sizeof(::CDOTAUserMsg_PauseMinigameData)},
  { 1846, 1856, sizeof(::CDOTAUserMsg_VersusScene_PlayerBehavior)},
  { 1861, 1870, sizeof(::CDOTAUserMsg_QoP_ArcanaSummary)},
  { 1874, 1881, sizeof(::CDOTAUserMsg_HotPotato_Created)},
  { 1883, 1889, sizeof(::CDOTAUserMsg_HotPotato_Exploded)},
  { 1890, 1898, sizeof(::CDOTAUserMsg_WK_Arcana_Progress)},
  { 1901, 1908, sizeof(::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress)},
  { 1910, 1922, sizeof(::CDOTAUserMsg_GuildChallenge_Progress)},
  { 1929, 1941, sizeof(::CDOTAUserMsg_WRArcanaProgress)},
  { 1948, 1961, sizeof(::CDOTAUserMsg_WRArcanaSummary)},
  { 1969, 1978, sizeof(::CDOTAUserMsg_EmptyItemSlotAlert)},
  { 1982, 1993, sizeof(::CDOTAUserMsg_AghsStatusAlert)},
  { 1999, -1, sizeof(::CDOTAUserMsg_MutedPlayers)},
  { 2006, 2026, sizeof(::CDOTAUserMsg_ContextualTip)},
  { 2041, 2049, sizeof(::CDOTAUserMsg_ChatMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AIDebugLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SwapVerify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ChatEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_BotChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CombatHeroPositions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CombatLogBulkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MiniKillCamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GlobalLightColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GlobalLightDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_LocationPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PingConfirmation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_EnemyItemAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ModifierAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HPManaAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GlyphAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_RadarAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_WillPurchaseAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_EmptyTeleportAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MarsArenaOfBloodAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAEntityMsg_InvokerSpellCast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_BuyBackStateAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_QuickBuyAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CourierKilledAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MinimapEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MapLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MinimapDebugPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CreateLinearProjectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_DestroyLinearProjectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SpectatorPlayerClick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_NevermoreRequiem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_InvalidCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HudError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SharedCooldown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SetNextAutobuyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HalloweenDrops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PredictionResult_Prediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PredictionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAResponseQuerySerialized_Fact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAResponseQuerySerialized_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTASpeechMatchOnClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_Interval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_Speech_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_AddGesture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UnitEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ItemPurchased_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ItemSold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ItemFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_OverheadEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialTipInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialMinimapPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SendGenericToolTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ChatWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ReceivedXmasGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ShowSurvey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UpdateSharedContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialRequestExp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialFade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TutorialPingMinimap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GamerulesStateChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AddQuestLogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SendRoshanPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SendFinalGold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CustomMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ClientLoadGridNav_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_Projectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_ProjectileLoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_DestroyProjectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_DotaBloodImpact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AbilityPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_UnitAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ShowGenericPopup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_VoteStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_VoteUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_VoteEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_BoosterStatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_BoosterState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PlayerMMR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AbilitySteal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsHeroLookup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsHeroPositionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsPlayerKillShare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsKillDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_StatsMatchDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MiniTaunt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SpeechBubble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CustomHeaderMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHeroAbilityStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCombatAnalyzerPlayerStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCombatAnalyzerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_BeastChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CustomHudElement_Create_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CustomHudElement_Modify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CustomHudElement_Destroy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CompendiumStatePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CompendiumState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ProjectionAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ProjectionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_XPAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TalentTreeAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_UpdateQuestProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_QuestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SuggestHeroPick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SuggestHeroRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_KillcamDamageTaken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SelectPenaltyGold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_RollDiceResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_FlipCoinResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMessage_RequestItemSuggestions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMessage_TeamCaptainChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ChatWheelCooldown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HeroRelicProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AbilityDraftRequestAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_DamageReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_SalutePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_TipAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ReplaceQueryUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ESArcanaCombo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ESArcanaComboSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_OMArcanaCombo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HighFiveCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HighFiveLeftHanging_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ShovelUnearth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AllStarEvent_PlayerScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AllStarEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_QueuedOrderRemoved_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_DebugChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_FoundNeutralItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_OutpostCaptured_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_OutpostGrantedXP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MoveCameraToUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PauseMinigameData_DataBit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_PauseMinigameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_VersusScene_PlayerBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_QoP_ArcanaSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HotPotato_Created_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_HotPotato_Exploded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_WK_Arcana_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_GuildChallenge_Progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_WRArcanaProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_WRArcanaSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_EmptyItemSlotAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_AghsStatusAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_MutedPlayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ContextualTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_ChatMessage_default_instance_),
};

const char descriptor_table_protodef_dota_5fusermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027dota_usermessages.proto\032\026networkbasety"
  "pes.proto\032\027dota_shared_enums.proto\032\031dota"
  "_commonmessages.proto\"+\n\030CDOTAUserMsg_AI"
  "DebugLine\022\017\n\007message\030\001 \001(\t\"/\n\021CDOTAUserM"
  "sg_Ping\022\014\n\004ping\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\",\n\027C"
  "DOTAUserMsg_SwapVerify\022\021\n\tplayer_id\030\001 \001("
  "\r\"\217\002\n\026CDOTAUserMsg_ChatEvent\0226\n\004type\030\001 \002"
  "(\0162\022.DOTA_CHAT_MESSAGE:\024CHAT_MESSAGE_INV"
  "ALID\022\r\n\005value\030\002 \001(\r\022\026\n\nplayerid_1\030\003 \001(\021:"
  "\002-1\022\026\n\nplayerid_2\030\004 \001(\021:\002-1\022\026\n\nplayerid_"
  "3\030\005 \001(\021:\002-1\022\026\n\nplayerid_4\030\006 \001(\021:\002-1\022\026\n\np"
  "layerid_5\030\007 \001(\021:\002-1\022\026\n\nplayerid_6\030\010 \001(\021:"
  "\002-1\022\016\n\006value2\030\t \001(\r\022\016\n\006value3\030\n \001(\r\"]\n\024C"
  "DOTAUserMsg_BotChat\022\021\n\tplayer_id\030\001 \001(\r\022\017"
  "\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\022\021\n\tteam_"
  "only\030\005 \001(\010\"q\n CDOTAUserMsg_CombatHeroPos"
  "itions\022\r\n\005index\030\001 \001(\r\022\014\n\004time\030\002 \001(\005\022 \n\tw"
  "orld_pos\030\003 \001(\0132\r.CMsgVector2D\022\016\n\006health\030"
  "\004 \001(\005\"\211\001\n\036CDOTAUserMsg_CombatLogBulkData"
  "\022/\n\016combat_entries\030\001 \003(\0132\027.CMsgDOTAComba"
  "tLogEntry\022\021\n\ttimestamp\030\002 \001(\002\022\020\n\010duration"
  "\030\003 \001(\002\022\021\n\tplayer_id\030\004 \001(\r\"\227\002\n\034CDOTAUserM"
  "sg_MiniKillCamInfo\0229\n\tattackers\030\001 \003(\0132&."
  "CDOTAUserMsg_MiniKillCamInfo.Attacker\032\273\001"
  "\n\010Attacker\022\020\n\010attacker\030\001 \001(\r\022\024\n\014total_da"
  "mage\030\002 \001(\005\022A\n\tabilities\030\003 \003(\0132..CDOTAUse"
  "rMsg_MiniKillCamInfo.Attacker.Ability\022\025\n"
  "\rattacker_name\030\004 \001(\t\032-\n\007Ability\022\022\n\nabili"
  "ty_id\030\001 \001(\r\022\016\n\006damage\030\002 \001(\005\"@\n\035CDOTAUser"
  "Msg_GlobalLightColor\022\r\n\005color\030\001 \001(\r\022\020\n\010d"
  "uration\030\002 \001(\002\"U\n!CDOTAUserMsg_GlobalLigh"
  "tDirection\022\036\n\tdirection\030\001 \001(\0132\013.CMsgVect"
  "or\022\020\n\010duration\030\002 \001(\002\"]\n\031CDOTAUserMsg_Loc"
  "ationPing\022\021\n\tplayer_id\030\001 \001(\r\022-\n\rlocation"
  "_ping\030\002 \001(\0132\026.CDOTAMsg_LocationPing\"\215\001\n\035"
  "CDOTAUserMsg_PingConfirmation\022$\n\034player_"
  "id_of_original_pinger\030\001 \001(\r\022\024\n\014entity_in"
  "dex\030\002 \001(\r\022\021\n\ticon_type\030\003 \001(\r\022\035\n\010location"
  "\030\004 \001(\0132\013.CMsgVector\"T\n\026CDOTAUserMsg_Item"
  "Alert\022\021\n\tplayer_id\030\001 \001(\r\022\'\n\nitem_alert\030\002"
  " \001(\0132\023.CDOTAMsg_ItemAlert\"\341\001\n\033CDOTAUserM"
  "sg_EnemyItemAlert\022\021\n\tplayer_id\030\001 \001(\r\022\030\n\020"
  "target_player_id\030\002 \001(\r\022\027\n\017item_ability_i"
  "d\030\003 \001(\005\022\025\n\trune_type\030\004 \001(\005:\002-1\022\021\n\tentity"
  "_id\030\005 \001(\005\022\026\n\nitem_level\030\006 \001(\005:\002-1\022\033\n\017pri"
  "mary_charges\030\007 \001(\005:\002-1\022\035\n\021secondary_char"
  "ges\030\010 \001(\005:\002-1\"\237\001\n\032CDOTAUserMsg_ModifierA"
  "lert\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nclass_name\030\002 "
  "\001(\t\022\023\n\013stack_count\030\003 \001(\r\022\021\n\tis_debuff\030\004 "
  "\001(\010\022\027\n\017target_entindex\030\005 \001(\r\022\031\n\021seconds_"
  "remaining\030\006 \001(\002\"_\n\030CDOTAUserMsg_HPManaAl"
  "ert\022\021\n\tplayer_id\030\001 \001(\r\022\027\n\017target_entinde"
  "x\030\002 \001(\r\022\027\n\017show_raw_values\030\003 \001(\010\">\n\027CDOT"
  "AUserMsg_GlyphAlert\022\021\n\tplayer_id\030\001 \001(\r\022\020"
  "\n\010negative\030\002 \001(\010\">\n\027CDOTAUserMsg_RadarAl"
  "ert\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010negative\030\002 \001(\010"
  "\"\202\001\n\036CDOTAUserMsg_WillPurchaseAlert\022\027\n\017i"
  "tem_ability_id\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\005\022"
  "\026\n\016gold_remaining\030\003 \001(\r\022\034\n\024suggestion_pl"
  "ayer_id\030\004 \001(\005\"o\n\037CDOTAUserMsg_EmptyTelep"
  "ortAlert\022\030\n\020source_player_id\030\001 \001(\005\022\030\n\020ta"
  "rget_player_id\030\002 \001(\005\022\030\n\020cooldown_seconds"
  "\030\003 \001(\005\"l\n#CDOTAUserMsg_MarsArenaOfBloodA"
  "ttack\022\026\n\016source_ehandle\030\001 \001(\005\022\026\n\016target_"
  "ehandle\030\002 \001(\005\022\025\n\rwarrior_index\030\003 \001(\005\"Y\n\037"
  "CDOTAEntityMsg_InvokerSpellCast\022\037\n\nentit"
  "y_msg\030\001 \001(\0132\013.CEntityMsg\022\025\n\rcast_activit"
  "y\030\002 \001(\005\"3\n\036CDOTAUserMsg_BuyBackStateAler"
  "t\022\021\n\tplayer_id\030\001 \001(\005\"\220\001\n\032CDOTAUserMsg_Qu"
  "ickBuyAlert\022\021\n\tplayer_id\030\001 \001(\005\022\027\n\017item_a"
  "bility_id\030\002 \001(\005\022\021\n\tgold_cost\030\003 \001(\005\022\035\n\025it"
  "em_cooldown_seconds\030\004 \001(\005\022\024\n\014show_buybac"
  "k\030\005 \001(\010\"\227\002\n\037CDOTAUserMsg_CourierKilledAl"
  "ert\022\014\n\004team\030\001 \001(\r\022\022\n\ngold_value\030\002 \001(\r\022\025\n"
  "\rentity_handle\030\003 \001(\005\022\021\n\ttimestamp\030\004 \001(\005\022"
  "=\n\nlost_items\030\005 \003(\0132).CDOTAUserMsg_Couri"
  "erKilledAlert.LostItem\022\030\n\020killer_player_"
  "id\030\006 \001(\005\022\030\n\020owning_player_id\030\007 \001(\005\0325\n\010Lo"
  "stItem\022\027\n\017item_ability_id\030\001 \001(\005\022\020\n\010quant"
  "ity\030\002 \001(\r\"\214\001\n\031CDOTAUserMsg_MinimapEvent\022"
  "\022\n\nevent_type\030\001 \001(\005\022\025\n\rentity_handle\030\002 \001"
  "(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\020\n\010duration\030\005 \001"
  "(\005\022\034\n\024target_entity_handle\030\006 \001(\005\"M\n\024CDOT"
  "AUserMsg_MapLine\022\021\n\tplayer_id\030\001 \001(\005\022\"\n\007m"
  "apline\030\002 \001(\0132\021.CDOTAMsg_MapLine\"}\n\036CDOTA"
  "UserMsg_MinimapDebugPoint\022\035\n\010location\030\001 "
  "\001(\0132\013.CMsgVector\022\r\n\005color\030\002 \001(\r\022\014\n\004size\030"
  "\003 \001(\005\022\020\n\010duration\030\004 \001(\002\022\r\n\005index\030\005 \001(\005\"\255"
  "\002\n#CDOTAUserMsg_CreateLinearProjectile\022\033"
  "\n\006origin\030\001 \001(\0132\013.CMsgVector\022\037\n\010velocity\030"
  "\002 \001(\0132\r.CMsgVector2D\022\020\n\010entindex\030\004 \001(\005\022\026"
  "\n\016particle_index\030\005 \001(\004\022\016\n\006handle\030\006 \001(\005\022#"
  "\n\014acceleration\030\007 \001(\0132\r.CMsgVector2D\022\021\n\tm"
  "ax_speed\030\010 \001(\002\022\022\n\nfow_radius\030\t \001(\002\022\031\n\021st"
  "icky_fow_reveal\030\n \001(\010\022\020\n\010distance\030\013 \001(\002\022"
  "\025\n\rcolorgemcolor\030\014 \001(\007\"6\n$CDOTAUserMsg_D"
  "estroyLinearProjectile\022\016\n\006handle\030\001 \001(\005\"O"
  "\n%CDOTAUserMsg_DodgeTrackingProjectiles\022"
  "\020\n\010entindex\030\001 \002(\005\022\024\n\014attacks_only\030\002 \001(\010\""
  "_\n!CDOTAUserMsg_SpectatorPlayerClick\022\020\n\010"
  "entindex\030\001 \002(\005\022\022\n\norder_type\030\002 \001(\005\022\024\n\014ta"
  "rget_index\030\003 \001(\005\"\335\001\n&CDOTAUserMsg_Specta"
  "torPlayerUnitOrders\022\020\n\010entindex\030\001 \001(\005\022\022\n"
  "\norder_type\030\002 \001(\005\022\r\n\005units\030\003 \003(\005\022\024\n\014targ"
  "et_index\030\004 \001(\005\022\022\n\nability_id\030\005 \001(\005\022\035\n\010po"
  "sition\030\006 \001(\0132\013.CMsgVector\022\r\n\005queue\030\007 \001(\010"
  "\022\027\n\017sequence_number\030\010 \001(\005\022\r\n\005flags\030\t \001(\r"
  "\"s\n\035CDOTAUserMsg_NevermoreRequiem\022\025\n\rent"
  "ity_handle\030\001 \001(\005\022\r\n\005lines\030\002 \001(\005\022\033\n\006origi"
  "n\030\003 \001(\0132\013.CMsgVector\022\017\n\007reverse\030\004 \001(\010\".\n"
  "\033CDOTAUserMsg_InvalidCommand\022\017\n\007message\030"
  "\001 \001(\t\")\n\025CDOTAUserMsg_HudError\022\020\n\010order_"
  "id\030\001 \001(\005\"c\n\033CDOTAUserMsg_SharedCooldown\022"
  "\020\n\010entindex\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\020\n\010coold"
  "own\030\003 \001(\002\022\022\n\nname_index\030\004 \001(\005\"/\n\037CDOTAUs"
  "erMsg_SetNextAutobuyItem\022\014\n\004name\030\001 \001(\t\"X"
  "\n\033CDOTAUserMsg_HalloweenDrops\022\021\n\titem_de"
  "fs\030\001 \003(\r\022\022\n\nplayer_ids\030\002 \003(\r\022\022\n\nprize_li"
  "st\030\003 \001(\r\"\223\003\n\035CDOTAUserMsg_PredictionResu"
  "lt\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004"
  "\022\017\n\007correct\030\003 \001(\010\022>\n\013predictions\030\004 \003(\0132)"
  ".CDOTAUserMsg_PredictionResult.Predictio"
  "n\032\372\001\n\nPrediction\022\020\n\010item_def\030\001 \001(\r\022\023\n\013nu"
  "m_correct\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r\022X\n\006re"
  "sult\030\004 \001(\01621.CDOTAUserMsg_PredictionResu"
  "lt.Prediction.EResult:\025k_eResult_ItemGra"
  "nted\022\031\n\021granted_item_defs\030\006 \003(\r\"=\n\007EResu"
  "lt\022\031\n\025k_eResult_ItemGranted\020\001\022\027\n\023k_eResu"
  "lt_Destroyed\020\002\"\336\002\n\034CDOTAResponseQuerySer"
  "ialized\0221\n\005facts\030\001 \003(\0132\".CDOTAResponseQu"
  "erySerialized.Fact\032\212\002\n\004Fact\022\013\n\003key\030\001 \002(\005"
  "\022F\n\007valtype\030\002 \002(\0162,.CDOTAResponseQuerySe"
  "rialized.Fact.ValueType:\007NUMERIC\022\023\n\013val_"
  "numeric\030\003 \001(\002\022\022\n\nval_string\030\004 \001(\t\022\035\n\025val"
  "_stringtable_index\030\005 \001(\005\022\027\n\017val_int_nume"
  "ric\030\006 \001(\021\"L\n\tValueType\022\013\n\007NUMERIC\020\001\022\n\n\006S"
  "TRING\020\002\022\025\n\021STRINGTABLE_INDEX\020\003\022\017\n\013INT_NU"
  "MERIC\020\004\"\227\001\n\030CDOTASpeechMatchOnClient\022\026\n\016"
  "speech_concept\030\001 \001(\005\022\026\n\016recipient_type\030\002"
  " \001(\005\0224\n\rresponsequery\030\003 \001(\0132\035.CDOTARespo"
  "nseQuerySerialized\022\025\n\nrandomseed\030\004 \001(\017:\001"
  "0\"\222\010\n\026CDOTAUserMsg_UnitEvent\0228\n\010msg_type"
  "\030\001 \002(\0162\024.EDotaEntityMessages:\020DOTA_UNIT_"
  "SPEECH\022\024\n\014entity_index\030\002 \002(\005\022.\n\006speech\030\003"
  " \001(\0132\036.CDOTAUserMsg_UnitEvent.Speech\0227\n\013"
  "speech_mute\030\004 \001(\0132\".CDOTAUserMsg_UnitEve"
  "nt.SpeechMute\0227\n\013add_gesture\030\005 \001(\0132\".CDO"
  "TAUserMsg_UnitEvent.AddGesture\022=\n\016remove"
  "_gesture\030\006 \001(\0132%.CDOTAUserMsg_UnitEvent."
  "RemoveGesture\0229\n\014blood_impact\030\007 \001(\0132#.CD"
  "OTAUserMsg_UnitEvent.BloodImpact\0229\n\014fade"
  "_gesture\030\010 \001(\0132#.CDOTAUserMsg_UnitEvent."
  "FadeGesture\0229\n\026speech_match_on_client\030\t "
  "\001(\0132\031.CDOTASpeechMatchOnClient\032(\n\010Interv"
  "al\022\r\n\005start\030\001 \001(\002\022\r\n\005range\030\002 \001(\002\032\265\001\n\006Spe"
  "ech\022\026\n\016speech_concept\030\001 \001(\005\022\020\n\010response\030"
  "\002 \001(\t\022\026\n\016recipient_type\030\003 \001(\005\022\r\n\005level\030\004"
  " \001(\005\022\027\n\010muteable\030\005 \001(\010:\005false\0222\n\010predela"
  "y\030\006 \001(\0132 .CDOTAUserMsg_UnitEvent.Interva"
  "l\022\r\n\005flags\030\007 \001(\r\032 \n\nSpeechMute\022\022\n\005delay\030"
  "\001 \001(\002:\0030.5\032\213\001\n\nAddGesture\022\020\n\010activity\030\001 "
  "\001(\005\022\014\n\004slot\030\002 \001(\005\022\022\n\007fade_in\030\003 \001(\002:\0010\022\025\n"
  "\010fade_out\030\004 \001(\002:\0030.1\022\030\n\rplayback_rate\030\005 "
  "\001(\002:\0011\022\030\n\020sequence_variant\030\006 \001(\005\032!\n\rRemo"
  "veGesture\022\020\n\010activity\030\001 \001(\005\032@\n\013BloodImpa"
  "ct\022\r\n\005scale\030\001 \001(\005\022\020\n\010x_normal\030\002 \001(\005\022\020\n\010y"
  "_normal\030\003 \001(\005\032\037\n\013FadeGesture\022\020\n\010activity"
  "\030\001 \001(\005\"5\n\032CDOTAUserMsg_ItemPurchased\022\027\n\017"
  "item_ability_id\030\001 \001(\005\"0\n\025CDOTAUserMsg_It"
  "emSold\022\027\n\017item_ability_id\030\001 \001(\005\"j\n\026CDOTA"
  "UserMsg_ItemFound\022\016\n\006player\030\001 \001(\005\022\017\n\007qua"
  "lity\030\002 \001(\005\022\016\n\006rarity\030\003 \001(\005\022\016\n\006method\030\004 \001"
  "(\005\022\017\n\007itemdef\030\005 \001(\005\"\305\001\n\032CDOTAUserMsg_Ove"
  "rheadEvent\022\?\n\014message_type\030\001 \002(\0162\024.DOTA_"
  "OVERHEAD_ALERT:\023OVERHEAD_ALERT_GOLD\022\r\n\005v"
  "alue\030\002 \001(\005\022\036\n\026target_player_entindex\030\003 \001"
  "(\005\022\027\n\017target_entindex\030\004 \001(\005\022\036\n\026source_pl"
  "ayer_entindex\030\005 \001(\005\">\n\034CDOTAUserMsg_Tuto"
  "rialTipInfo\022\014\n\004name\030\001 \001(\t\022\020\n\010progress\030\002 "
  "\001(\005\"]\n\033CDOTAUserMsg_TutorialFinish\022\017\n\007he"
  "ading\030\001 \001(\t\022\016\n\006emblem\030\002 \001(\t\022\014\n\004body\030\003 \001("
  "\t\022\017\n\007success\030\004 \001(\010\"&\n$CDOTAUserMsg_Tutor"
  "ialMinimapPosition\"_\n\037CDOTAUserMsg_SendG"
  "enericToolTip\022\r\n\005title\030\001 \001(\t\022\014\n\004text\030\002 \001"
  "(\t\022\020\n\010entindex\030\003 \001(\005\022\r\n\005close\030\004 \001(\010\"S\n\026C"
  "DOTAUserMsg_WorldLine\022\021\n\tplayer_id\030\001 \001(\005"
  "\022&\n\tworldline\030\002 \001(\0132\023.CDOTAMsg_WorldLine"
  "\"\204\001\n\026CDOTAUserMsg_ChatWheel\022\027\n\017chat_mess"
  "age_id\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\r\022\022\n\naccou"
  "nt_id\030\003 \001(\r\022\025\n\rparam_hero_id\030\004 \001(\r\022\023\n\013em"
  "oticon_id\030\005 \001(\r\"]\n\035CDOTAUserMsg_Received"
  "XmasGift\022\021\n\tplayer_id\030\001 \001(\005\022\021\n\titem_name"
  "\030\002 \001(\t\022\026\n\016inventory_slot\030\003 \001(\005\"\244\001\n\027CDOTA"
  "UserMsg_ShowSurvey\022\021\n\tsurvey_id\030\001 \001(\005\022\020\n"
  "\010match_id\030\002 \001(\004\022\026\n\016response_style\030\003 \001(\t\022"
  "\030\n\020teammate_hero_id\030\004 \001(\r\022\025\n\rteammate_na"
  "me\030\005 \001(\t\022\033\n\023teammate_account_id\030\006 \001(\r\"5\n"
  " CDOTAUserMsg_UpdateSharedContent\022\021\n\tslo"
  "t_type\030\001 \001(\005\"!\n\037CDOTAUserMsg_TutorialReq"
  "uestExp\".\n\031CDOTAUserMsg_TutorialFade\022\021\n\t"
  "tgt_alpha\030\001 \001(\005\"x\n CDOTAUserMsg_Tutorial"
  "PingMinimap\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005pos_x\030"
  "\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022\024\n\014e"
  "ntity_index\030\005 \001(\005\"3\n\"CDOTAUserMsg_Gameru"
  "lesStateChanged\022\r\n\005state\030\001 \001(\r\"E\n\035CDOTAU"
  "serMsg_AddQuestLogEntry\022\020\n\010npc_name\030\001 \001("
  "\t\022\022\n\nnpc_dialog\030\002 \001(\t\"[\n\032CDOTAUserMsg_Se"
  "ndStatPopup\022\021\n\tplayer_id\030\001 \001(\005\022*\n\tstatpo"
  "pup\030\002 \001(\0132\027.CDOTAMsg_SendStatPopup\"Z\n!CD"
  "OTAUserMsg_DismissAllStatPopups\0225\n\rdismi"
  "ssallmsg\030\001 \001(\0132\036.CDOTAMsg_DismissAllStat"
  "Popups\"\217\001\n%CDOTAUserMsg_SendRoshanSpecta"
  "torPhase\0226\n\005phase\030\001 \001(\0162\022.DOTA_ROSHAN_PH"
  "ASE:\023k_SRSP_ROSHAN_ALIVE\022\030\n\020phase_start_"
  "time\030\002 \001(\005\022\024\n\014phase_length\030\003 \001(\005\"C\n\034CDOT"
  "AUserMsg_SendRoshanPopup\022\021\n\treclaimed\030\001 "
  "\001(\010\022\020\n\010gametime\030\002 \001(\005\"L\n\032CDOTAUserMsg_Se"
  "ndFinalGold\022\025\n\rreliable_gold\030\001 \003(\r\022\027\n\017un"
  "reliable_gold\030\002 \003(\r\"K\n\026CDOTAUserMsg_Cust"
  "omMsg\022\017\n\007message\030\001 \001(\t\022\021\n\tplayer_id\030\002 \001("
  "\005\022\r\n\005value\030\003 \001(\005\"X\n\031CDOTAUserMsg_CoachHU"
  "DPing\022\021\n\tplayer_id\030\001 \001(\r\022(\n\010hud_ping\030\002 \001"
  "(\0132\026.CDOTAMsg_CoachHUDPing\" \n\036CDOTAUserM"
  "sg_ClientLoadGridNav\"\266\002\n\032CDOTAUserMsg_TE"
  "_Projectile\022\017\n\007hSource\030\001 \001(\005\022\017\n\007hTarget\030"
  "\002 \001(\005\022\021\n\tmoveSpeed\030\003 \001(\005\022\030\n\020sourceAttach"
  "ment\030\004 \001(\005\022\034\n\024particleSystemHandle\030\005 \001(\003"
  "\022\021\n\tdodgeable\030\006 \001(\010\022\020\n\010isAttack\030\007 \001(\010\022\022\n"
  "\nexpireTime\030\t \001(\002\022\025\n\rmaximpacttime\030\n \001(\002"
  "\022\025\n\rcolorgemcolor\030\013 \001(\007\022\023\n\013launch_tick\030\014"
  " \001(\005\022\016\n\006handle\030\r \001(\005\022\037\n\nvTargetLoc\030\016 \001(\013"
  "2\013.CMsgVector\"\303\002\n\035CDOTAUserMsg_TE_Projec"
  "tileLoc\022\037\n\nvSourceLoc\030\001 \001(\0132\013.CMsgVector"
  "\022\017\n\007hTarget\030\002 \001(\005\022\021\n\tmoveSpeed\030\003 \001(\005\022\034\n\024"
  "particleSystemHandle\030\004 \001(\003\022\021\n\tdodgeable\030"
  "\005 \001(\010\022\020\n\010isAttack\030\006 \001(\010\022\022\n\nexpireTime\030\t "
  "\001(\002\022\037\n\nvTargetLoc\030\n \001(\0132\013.CMsgVector\022\025\n\r"
  "colorgemcolor\030\013 \001(\007\022\023\n\013launch_tick\030\014 \001(\005"
  "\022\016\n\006handle\030\r \001(\005\022\017\n\007hSource\030\016 \001(\005\022\030\n\020sou"
  "rceAttachment\030\017 \001(\005\"3\n!CDOTAUserMsg_TE_D"
  "estroyProjectile\022\016\n\006handle\030\001 \001(\005\"b\n\037CDOT"
  "AUserMsg_TE_DotaBloodImpact\022\016\n\006entity\030\001 "
  "\001(\005\022\r\n\005scale\030\002 \001(\002\022\017\n\007xnormal\030\003 \001(\002\022\017\n\007y"
  "normal\030\004 \001(\002\"\316\002\n\030CDOTAUserMsg_AbilityPin"
  "g\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nability_id\030\002 \001(\r"
  "\0229\n\004type\030\003 \001(\0162\027.DOTA_ABILITY_PING_TYPE:"
  "\022ABILITY_PING_READY\022\030\n\020cooldown_seconds\030"
  "\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\017\n\007passive\030\006 \001(\010\022\023\n"
  "\013mana_needed\030\007 \001(\r\022\021\n\tentity_id\030\010 \001(\r\022\027\n"
  "\017primary_charges\030\t \001(\005\022\031\n\021secondary_char"
  "ges\030\n \001(\005\022\021\n\tcaster_id\030\013 \001(\r\022\021\n\tctrl_hel"
  "d\030\014 \001(\010\022\024\n\014reclaim_time\030\r \001(\002\"\260\001\n\035CDOTAU"
  "serMsg_TE_UnitAnimation\022\016\n\006entity\030\001 \001(\005\022"
  "\027\n\017sequenceVariant\030\002 \001(\005\022\024\n\014playbackrate"
  "\030\003 \001(\002\022\021\n\tcastpoint\030\004 \001(\002\022\014\n\004type\030\005 \001(\005\022"
  "\020\n\010activity\030\006 \001(\005\022\035\n\025lag_compensation_ti"
  "me\030\007 \001(\002\"@\n CDOTAUserMsg_TE_UnitAnimatio"
  "nEnd\022\016\n\006entity\030\001 \001(\005\022\014\n\004snap\030\002 \001(\010\"\221\001\n\035C"
  "DOTAUserMsg_ShowGenericPopup\022\016\n\006header\030\001"
  " \002(\t\022\014\n\004body\030\002 \002(\t\022\016\n\006param1\030\003 \001(\t\022\016\n\006pa"
  "ram2\030\004 \001(\t\022\023\n\013tint_screen\030\005 \001(\010\022\035\n\025show_"
  "no_other_dialogs\030\006 \001(\010\"`\n\026CDOTAUserMsg_V"
  "oteStart\022\r\n\005title\030\001 \001(\t\022\020\n\010duration\030\002 \001("
  "\002\022\024\n\014choice_count\030\003 \001(\005\022\017\n\007choices\030\004 \003(\t"
  "\"0\n\027CDOTAUserMsg_VoteUpdate\022\025\n\rchoice_co"
  "unts\030\001 \003(\005\"/\n\024CDOTAUserMsg_VoteEnd\022\027\n\017se"
  "lected_choice\030\001 \001(\005\"\214\001\n\037CDOTAUserMsg_Boo"
  "sterStatePlayer\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005bo"
  "nus\030\002 \001(\002\022\023\n\013event_bonus\030\003 \001(\002\022\025\n\rbonus_"
  "item_id\030\004 \001(\r\022\033\n\023event_bonus_item_id\030\005 \001"
  "(\r\"V\n\031CDOTAUserMsg_BoosterState\0229\n\017boost"
  "ed_players\030\001 \003(\0132 .CDOTAUserMsg_BoosterS"
  "tatePlayer\")\n\026CDOTAUserMsg_PlayerMMR\022\017\n\003"
  "mmr\030\001 \003(\021B\002\020\001\"Y\n\031CDOTAUserMsg_AbilitySte"
  "al\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nability_id\030\002 \001("
  "\r\022\025\n\rability_level\030\003 \001(\r\"f\n\034CDOTAUserMsg"
  "_StatsHeroLookup\022\021\n\tplayer_id\030\001 \001(\005\022\017\n\007h"
  "ero_id\030\002 \001(\005\022\021\n\thero_name\030\003 \001(\t\022\017\n\007perso"
  "na\030\004 \001(\t\"\372\001\n\"CDOTAUserMsg_StatsHeroPosit"
  "ionInfo\022\030\n\020average_position\030\001 \001(\002\022J\n\020pos"
  "ition_details\030\002 \003(\01320.CDOTAUserMsg_Stats"
  "HeroPositionInfo.PositionPair\032n\n\014Positio"
  "nPair\022F\n\021position_category\030\001 \001(\0162\027.DOTA_"
  "POSITION_CATEGORY:\022DOTA_POSITION_NONE\022\026\n"
  "\016position_count\030\002 \001(\r\"\217\003\n#CDOTAUserMsg_S"
  "tatsHeroMinuteDetails\022\021\n\tlast_hits\030\001 \001(\r"
  "\022\022\n\nhero_kills\030\002 \001(\r\022\023\n\013hero_damage\030\003 \001("
  "\r\022\024\n\014tower_damage\030\004 \001(\r\022:\n\rposition_info"
  "\030\005 \001(\0132#.CDOTAUserMsg_StatsHeroPositionI"
  "nfo\022\020\n\010total_xp\030\006 \001(\r\022\021\n\tnet_worth\030\007 \001(\r"
  "\022\034\n\024harvested_creep_gold\030\010 \001(\r\022\024\n\014claime"
  "d_farm\030\t \001(\r\022\024\n\014wards_placed\030\n \001(\r\022\027\n\017ru"
  "nes_collected\030\013 \001(\r\022\020\n\010tps_used\030\014 \001(\r\022\022\n"
  "\nmana_spent\030\r \003(\r\022\027\n\017damage_absorbed\030\016 \003"
  "(\r\022\023\n\013damage_done\030\017 \003(\r\"\347\003\n#CDOTAUserMsg"
  "_StatsTeamMinuteDetails\022:\n\014player_stats\030"
  "\001 \003(\0132$.CDOTAUserMsg_StatsHeroMinuteDeta"
  "ils\022\023\n\013tower_kills\030\002 \001(\r\022\025\n\rbarrack_kill"
  "s\030\003 \001(\r\022!\n\031available_lane_creep_gold\030\004 \001"
  "(\r\022\032\n\022balance_kill_value\030\005 \001(\r\022\033\n\023balanc"
  "e_tower_value\030\006 \001(\r\022\036\n\026balance_barracks_"
  "value\030\007 \001(\r\022\032\n\022balance_gold_value\030\010 \001(\r\022"
  "\030\n\020balance_xp_value\030\t \001(\r\022R\n\020lane_perfor"
  "mance\030\n \003(\01328.CDOTAUserMsg_StatsTeamMinu"
  "teDetails.LocationPerformance\032R\n\023Locatio"
  "nPerformance\022\031\n\021location_category\030\001 \001(\r\022"
  "\021\n\tstat_type\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\"\254\001\n!CD"
  "OTAUserMsg_StatsPlayerKillShare\022\021\n\tplaye"
  "r_id\030\001 \001(\005\022\032\n\022kill_share_percent\030\002 \001(\002\022\024"
  "\n\014player_loc_x\030\003 \001(\002\022\024\n\014player_loc_y\030\004 \001"
  "(\002\022\026\n\016health_percent\030\005 \001(\002\022\024\n\014mana_perce"
  "nt\030\006 \001(\002\"\304\001\n\035CDOTAUserMsg_StatsKillDetai"
  "ls\022\021\n\tvictim_id\030\001 \001(\r\0227\n\013kill_shares\030\002 \003"
  "(\0132\".CDOTAUserMsg_StatsPlayerKillShare\022\026"
  "\n\016damage_to_kill\030\003 \001(\r\022\030\n\020effective_heal"
  "th\030\004 \001(\r\022\022\n\ndeath_time\030\005 \001(\002\022\021\n\tkiller_i"
  "d\030\006 \001(\r\"\213\006\n\036CDOTAUserMsg_StatsMatchDetai"
  "ls\0222\n\013hero_lookup\030\001 \003(\0132\035.CDOTAUserMsg_S"
  "tatsHeroLookup\022;\n\rradiant_stats\030\002 \003(\0132$."
  "CDOTAUserMsg_StatsTeamMinuteDetails\0228\n\nd"
  "ire_stats\030\003 \003(\0132$.CDOTAUserMsg_StatsTeam"
  "MinuteDetails\0225\n\rradiant_kills\030\004 \003(\0132\036.C"
  "DOTAUserMsg_StatsKillDetails\0222\n\ndire_kil"
  "ls\030\005 \003(\0132\036.CDOTAUserMsg_StatsKillDetails"
  "\022U\n\rfight_details\030\006 \003(\0132>.CDOTAUserMsg_S"
  "tatsMatchDetails.CDOTAUserMsg_StatsFight"
  "Details\032p\n\"CDOTAUserMsg_StatsFightTeamDe"
  "tails\022\024\n\014participants\030\001 \003(\r\022\016\n\006deaths\030\002 "
  "\003(\r\022\022\n\ngold_delta\030\003 \001(\r\022\020\n\010xp_delta\030\004 \001("
  "\r\032\211\002\n\036CDOTAUserMsg_StatsFightDetails\022\022\n\n"
  "start_time\030\001 \001(\002\022\020\n\010end_time\030\002 \001(\002\022a\n\025ra"
  "diant_fight_details\030\003 \001(\0132B.CDOTAUserMsg"
  "_StatsMatchDetails.CDOTAUserMsg_StatsFig"
  "htTeamDetails\022^\n\022dire_fight_details\030\004 \001("
  "\0132B.CDOTAUserMsg_StatsMatchDetails.CDOTA"
  "UserMsg_StatsFightTeamDetails\"4\n\026CDOTAUs"
  "erMsg_MiniTaunt\022\032\n\022taunting_player_id\030\001 "
  "\001(\r\"0\n\031CDOTAUserMsg_SpeechBubble\022\023\n\013dest"
  "roy_all\030\001 \001(\010\"g\n CDOTAUserMsg_CustomHead"
  "erMessage\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010duration"
  "\030\002 \001(\002\022\017\n\007message\030\003 \001(\t\022\r\n\005value\030\004 \001(\005\"v"
  "\n\023CMsgHeroAbilityStat\0227\n\tstat_type\030\001 \001(\016"
  "2\016.EHeroStatType:\024k_EHeroStatType_None\022\021"
  "\n\tint_value\030\002 \001(\005\022\023\n\013float_value\030\003 \001(\002\"d"
  "\n\034CMsgCombatAnalyzerPlayerStat\022\022\n\naccoun"
  "t_id\030\001 \001(\r\0220\n\022hero_ability_stats\030\002 \003(\0132\024"
  ".CMsgHeroAbilityStat\"`\n\027CMsgCombatAnalyz"
  "erStats\022\020\n\010match_id\030\001 \001(\004\0223\n\014player_stat"
  "s\030\002 \003(\0132\035.CMsgCombatAnalyzerPlayerStat\"W"
  "\n\026CDOTAUserMsg_BeastChat\022\014\n\004team\030\001 \001(\r\022\016"
  "\n\006format\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\016\n\006targe"
  "t\030\004 \001(\t\"a\n$CDOTAUserMsg_CustomHudElement"
  "_Create\022\022\n\nelement_id\030\001 \001(\t\022\027\n\017layout_fi"
  "lename\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\"`\n$CDOTAUserM"
  "sg_CustomHudElement_Modify\022\022\n\nelement_id"
  "\030\001 \001(\t\022\026\n\016modify_visible\030\002 \001(\010\022\014\n\004data\030\003"
  " \001(\014\";\n%CDOTAUserMsg_CustomHudElement_De"
  "stroy\022\022\n\nelement_id\030\001 \001(\t\"F\n\"CDOTAUserMs"
  "g_CompendiumStatePlayer\022\021\n\tplayer_id\030\001 \001"
  "(\r\022\r\n\005level\030\002 \001(\r\"_\n\034CDOTAUserMsg_Compen"
  "diumState\022\?\n\022compendium_players\030\001 \003(\0132#."
  "CDOTAUserMsg_CompendiumStatePlayer\"\334\001\n\036C"
  "DOTAUserMsg_ProjectionAbility\022\022\n\nability"
  "_id\030\001 \001(\r\022\030\n\020caster_ent_index\030\002 \001(\005\022\023\n\013c"
  "aster_team\030\003 \001(\005\022\023\n\013channel_end\030\004 \001(\010\022\033\n"
  "\006origin\030\005 \001(\0132\013.CMsgVector\022\031\n\021track_cast"
  "er_only\030\006 \001(\010\022\020\n\010end_time\030\007 \001(\002\022\030\n\020victi"
  "m_ent_index\030\010 \001(\005\"a\n\034CDOTAUserMsg_Projec"
  "tionEvent\0223\n\010event_id\030\001 \001(\0162\021.EProjectio"
  "nEvent:\016ePE_FirstBlood\022\014\n\004team\030\002 \001(\r\"B\n\024"
  "CDOTAUserMsg_XPAlert\022\021\n\tplayer_id\030\001 \001(\r\022"
  "\027\n\017target_entindex\030\002 \001(\r\"}\n\034CDOTAUserMsg"
  "_TalentTreeAlert\022\021\n\tplayer_id\030\001 \001(\r\022\027\n\017t"
  "arget_entindex\030\002 \001(\r\022\022\n\nability_id\030\003 \001(\005"
  "\022\014\n\004slot\030\004 \001(\005\022\017\n\007learned\030\005 \001(\010\"\"\n CDOTA"
  "UserMsg_UpdateQuestProgress\"\264\001\n\030CDOTAUse"
  "rMsg_QuestStatus\022\021\n\tplayer_id\030\001 \002(\r\022\020\n\010q"
  "uest_id\030\002 \001(\r\022\024\n\014challenge_id\030\003 \001(\r\022\020\n\010p"
  "rogress\030\004 \001(\r\022\014\n\004goal\030\005 \001(\r\022\r\n\005query\030\006 \001"
  "(\r\022\025\n\rfail_gametime\030\007 \001(\002\022\027\n\017item_abilit"
  "y_id\030\010 \001(\r\"O\n\034CDOTAUserMsg_SuggestHeroPi"
  "ck\022\021\n\tplayer_id\030\001 \002(\r\022\017\n\007hero_id\030\002 \001(\r\022\013"
  "\n\003ban\030\003 \001(\010\"D\n\034CDOTAUserMsg_SuggestHeroR"
  "ole\022\021\n\tplayer_id\030\001 \002(\r\022\021\n\thero_role\030\002 \001("
  "\t\"\237\001\n\037CDOTAUserMsg_KillcamDamageTaken\022\021\n"
  "\tplayer_id\030\001 \002(\r\022\024\n\014damage_taken\030\002 \001(\r\022\021"
  "\n\titem_type\030\003 \001(\r\022\027\n\017item_ability_id\030\004 \001"
  "(\r\022\021\n\thero_name\030\005 \001(\t\022\024\n\014damage_color\030\006 "
  "\001(\t\"A\n\036CDOTAUserMsg_SelectPenaltyGold\022\021\n"
  "\tplayer_id\030\001 \002(\r\022\014\n\004cost\030\002 \001(\021\"z\n\033CDOTAU"
  "serMsg_RollDiceResult\022\021\n\tplayer_id\030\001 \001(\r"
  "\022\024\n\014channel_type\030\002 \001(\r\022\020\n\010roll_min\030\003 \001(\r"
  "\022\020\n\010roll_max\030\004 \001(\r\022\016\n\006result\030\005 \001(\r\"V\n\033CD"
  "OTAUserMsg_FlipCoinResult\022\021\n\tplayer_id\030\001"
  " \001(\r\022\024\n\014channel_type\030\002 \001(\r\022\016\n\006result\030\003 \001"
  "(\010\"<\n\'CDOTAUserMessage_RequestItemSugges"
  "tions\022\021\n\tplayer_id\030\001 \001(\r\"N\n#CDOTAUserMes"
  "sage_TeamCaptainChanged\022\014\n\004team\030\001 \001(\r\022\031\n"
  "\021captain_player_id\030\002 \001(\r\"P\n\036CDOTAUserMsg"
  "_ChatWheelCooldown\022\022\n\nmessage_id\030\001 \001(\r\022\032"
  "\n\022cooldown_remaining\030\002 \001(\002\"k\n\036CDOTAUserM"
  "sg_HeroRelicProgress\022\027\n\017hero_relic_type\030"
  "\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\017\n\007ehandle\030\003 \001(\r\022\020\n"
  "\010event_id\030\004 \001(\r\"p\n\'CDOTAUserMsg_AbilityD"
  "raftRequestAbility\022\021\n\tplayer_id\030\001 \001(\r\022\034\n"
  "\024requested_ability_id\030\002 \001(\r\022\024\n\014ctrl_is_d"
  "own\030\003 \001(\010\"\210\001\n\031CDOTAUserMsg_DamageReport\022"
  "\021\n\tplayer_id\030\001 \001(\r\022\026\n\016target_hero_id\030\002 \001"
  "(\r\022\026\n\016source_hero_id\030\003 \001(\r\022\025\n\rdamage_amo"
  "unt\030\004 \001(\005\022\021\n\tbroadcast\030\005 \001(\010\"u\n\031CDOTAUse"
  "rMsg_SalutePlayer\022\030\n\020source_player_id\030\001 "
  "\001(\005\022\030\n\020target_player_id\030\002 \001(\005\022\022\n\ntip_amo"
  "unt\030\003 \001(\r\022\020\n\010event_id\030\004 \001(\r\"<\n\025CDOTAUser"
  "Msg_TipAlert\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010tip_t"
  "ext\030\002 \001(\t\"d\n\035CDOTAUserMsg_ReplaceQueryUn"
  "it\022\021\n\tplayer_id\030\001 \002(\r\022\027\n\017source_entindex"
  "\030\002 \001(\r\022\027\n\017target_entindex\030\003 \001(\r\"X\n\032CDOTA"
  "UserMsg_ESArcanaCombo\022\017\n\007ehandle\030\001 \001(\r\022\023"
  "\n\013combo_count\030\002 \001(\r\022\024\n\014arcana_level\030\003 \001("
  "\r\"`\n!CDOTAUserMsg_ESArcanaComboSummary\022\017"
  "\n\007ehandle\030\001 \001(\r\022\023\n\013combo_count\030\002 \001(\r\022\025\n\r"
  "damage_amount\030\003 \001(\r\"w\n\032CDOTAUserMsg_OMAr"
  "canaCombo\022\017\n\007ehandle\030\001 \001(\r\022\030\n\020multicast_"
  "amount\030\002 \001(\r\022\024\n\014arcana_level\030\003 \001(\r\022\030\n\020mu"
  "lticast_chance\030\004 \001(\r\"e\n\036CDOTAUserMsg_Hig"
  "hFiveCompleted\022\023\n\013player_id_1\030\001 \001(\r\022\023\n\013p"
  "layer_id_2\030\002 \001(\r\022\031\n\021special_high_five\030\003 "
  "\001(\010\"5\n CDOTAUserMsg_HighFiveLeftHanging\022"
  "\021\n\tplayer_id\030\001 \001(\r\"f\n\032CDOTAUserMsg_Shove"
  "lUnearth\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010all_chat\030"
  "\002 \001(\010\022\021\n\tlocstring\030\003 \001(\t\022\020\n\010quantity\030\004 \001"
  "(\r\"\360\001\n\031CDOTAUserMsg_AllStarEvent\022\030\n\020sour"
  "ce_player_id\030\001 \001(\005\022\030\n\020target_player_id\030\002"
  " \001(\005\022\024\n\014point_amount\030\003 \001(\r\022\020\n\010event_id\030\004"
  " \001(\r\022=\n\rplayer_scores\030\005 \003(\0132&.CDOTAUserM"
  "sg_AllStarEvent.PlayerScore\0328\n\013PlayerSco"
  "re\022\021\n\tplayer_id\030\001 \001(\005\022\026\n\016score_sans_kda\030"
  "\002 \001(\r\">\n\037CDOTAUserMsg_QueuedOrderRemoved"
  "\022\033\n\023unit_order_sequence\030\001 \003(\r\"\306\001\n\033CDOTAU"
  "serMsg_DebugChallenge\022\026\n\016challenge_type\030"
  "\001 \002(\r\022\032\n\022challenge_query_id\030\002 \002(\r\022\020\n\010eve"
  "nt_id\030\003 \002(\r\022\023\n\013instance_id\030\004 \001(\r\022\027\n\017chal"
  "lenge_var_0\030\005 \001(\r\022\027\n\017challenge_var_1\030\006 \001"
  "(\r\022\032\n\022challenge_max_rank\030\007 \001(\r\"w\n\035CDOTAU"
  "serMsg_FoundNeutralItem\022\021\n\tplayer_id\030\001 \001"
  "(\r\022\027\n\017item_ability_id\030\002 \001(\r\022\021\n\titem_tier"
  "\030\003 \001(\r\022\027\n\017tier_item_count\030\004 \001(\r\"I\n\034CDOTA"
  "UserMsg_OutpostCaptured\022\030\n\020outpost_entin"
  "dex\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\"C\n\035CDOTAUserM"
  "sg_OutpostGrantedXP\022\017\n\007team_id\030\001 \001(\r\022\021\n\t"
  "xp_amount\030\002 \001(\r\"5\n\035CDOTAUserMsg_MoveCame"
  "raToUnit\022\024\n\014unit_ehandle\030\001 \001(\005\"\230\001\n\036CDOTA"
  "UserMsg_PauseMinigameData\022:\n\tdata_bits\030\001"
  " \003(\0132\'.CDOTAUserMsg_PauseMinigameData.Da"
  "taBit\032:\n\007DataBit\022\r\n\005index\030\001 \001(\r\022\014\n\004data\030"
  "\002 \001(\005\022\022\n\ndata_extra\030\003 \001(\003\"\241\002\n\'CDOTAUserM"
  "sg_VersusScene_PlayerBehavior\022\021\n\tplayer_"
  "id\030\001 \001(\r\022S\n\010behavior\030\002 \001(\0162\037.EDOTAVersus"
  "ScenePlayerBehavior: VS_PLAYER_BEHAVIOR_"
  "PLAY_ACTIVITY\0220\n\rplay_activity\030\003 \001(\0132\031.V"
  "ersusScene_PlayActivity\022*\n\nchat_wheel\030\004 "
  "\001(\0132\026.VersusScene_ChatWheel\0220\n\rplayback_"
  "rate\030\005 \001(\0132\031.VersusScene_PlaybackRate\"t\n"
  "\036CDOTAUserMsg_QoP_ArcanaSummary\022\017\n\007ehand"
  "le\030\001 \001(\r\022\024\n\014arcana_level\030\002 \001(\r\022\023\n\013player"
  "s_hit\030\003 \001(\r\022\026\n\016players_killed\030\004 \001(\r\"J\n\036C"
  "DOTAUserMsg_HotPotato_Created\022\023\n\013player_"
  "id_1\030\001 \001(\r\022\023\n\013player_id_2\030\002 \001(\r\"4\n\037CDOTA"
  "UserMsg_HotPotato_Exploded\022\021\n\tplayer_id\030"
  "\001 \001(\r\"Y\n\037CDOTAUserMsg_WK_Arcana_Progress"
  "\022\017\n\007ehandle\030\001 \001(\r\022\024\n\014arcana_level\030\002 \001(\r\022"
  "\017\n\007hero_id\030\003 \001(\r\"\212\004\n$CDOTAUserMsg_GuildC"
  "hallenge_Progress\022M\n\017player_progress\030\001 \003"
  "(\01324.CDOTAUserMsg_GuildChallenge_Progres"
  "s.PlayerProgress\022\020\n\010guild_id\030\002 \001(\r\022\035\n\025ch"
  "allenge_instance_id\030\003 \001(\r\022\033\n\023challenge_p"
  "arameter\030\004 \001(\r\022f\n\016challenge_type\030\005 \001(\01624"
  ".CDOTAUserMsg_GuildChallenge_Progress.EC"
  "hallengeType:\030k_EChallengeType_Invalid\022#"
  "\n\033challenge_progress_at_start\030\007 \001(\r\022\020\n\010c"
  "omplete\030\010 \001(\010\0325\n\016PlayerProgress\022\021\n\tplaye"
  "r_id\030\001 \001(\r\022\020\n\010progress\030\006 \001(\r\"o\n\016EChallen"
  "geType\022\034\n\030k_EChallengeType_Invalid\020\000\022 \n\034"
  "k_EChallengeType_Cooperative\020\001\022\035\n\031k_ECha"
  "llengeType_Contract\020\002\"\265\001\n\035CDOTAUserMsg_W"
  "RArcanaProgress\022\017\n\007ehandle\030\001 \001(\r\022\026\n\016targ"
  "et_ehandle\030\002 \001(\r\022\025\n\rarrows_landed\030\003 \001(\r\022"
  "\024\n\014damage_dealt\030\004 \001(\r\022\021\n\ttarget_hp\030\005 \001(\r"
  "\022\025\n\rtarget_max_hp\030\006 \001(\r\022\024\n\014arcana_level\030"
  "\007 \001(\r\"\305\001\n\034CDOTAUserMsg_WRArcanaSummary\022\017"
  "\n\007ehandle\030\001 \001(\r\022\026\n\016target_ehandle\030\002 \001(\r\022"
  "\025\n\rarrows_landed\030\003 \001(\r\022\024\n\014damage_dealt\030\004"
  " \001(\r\022\021\n\ttarget_hp\030\005 \001(\r\022\025\n\rtarget_max_hp"
  "\030\006 \001(\r\022\024\n\014arcana_level\030\007 \001(\r\022\017\n\007success\030"
  "\010 \001(\010\"\203\001\n\037CDOTAUserMsg_EmptyItemSlotAler"
  "t\022\030\n\020source_player_id\030\001 \001(\005\022\030\n\020target_pl"
  "ayer_id\030\002 \001(\005\022\022\n\nslot_index\030\003 \001(\005\022\030\n\020coo"
  "ldown_seconds\030\004 \001(\005\"\247\001\n\034CDOTAUserMsg_Agh"
  "sStatusAlert\022\030\n\020source_player_id\030\001 \001(\r\022\030"
  "\n\020target_player_id\030\002 \001(\r\022\027\n\017target_entin"
  "dex\030\003 \001(\r\022\022\n\nalert_type\030\004 \001(\r\022\023\n\013has_sce"
  "pter\030\005 \001(\010\022\021\n\thas_shard\030\006 \001(\010\"Z\n\031CDOTAUs"
  "erMsg_MutedPlayers\022\035\n\025text_muted_player_"
  "ids\030\001 \003(\005\022\036\n\026voice_muted_player_ids\030\002 \003("
  "\005\"\376\002\n\032CDOTAUserMsg_ContextualTip\022\016\n\006tip_"
  "id\030\001 \001(\005\022\034\n\024referenced_abilities\030\002 \003(\t\022\030"
  "\n\020referenced_units\030\003 \003(\t\022\030\n\020panorama_cla"
  "sses\030\004 \003(\t\022\030\n\020force_annotation\030\005 \001(\010\022\017\n\007"
  "variant\030\006 \001(\005\022\021\n\tint_param\030\007 \001(\005\022\022\n\nint_"
  "param2\030\010 \001(\005\022\023\n\013float_param\030\t \001(\002\022\024\n\014flo"
  "at_param2\030\n \001(\002\022\024\n\014string_param\030\013 \001(\t\022\025\n"
  "\rstring_param2\030\014 \001(\t\022\031\n\021tip_text_overrid"
  "e\030\r \001(\t\022\037\n\027tip_annotation_override\030\016 \001(\t"
  "\022\030\n\020panorama_snippet\030\017 \001(\t\"`\n\030CDOTAUserM"
  "sg_ChatMessage\022\030\n\020source_player_id\030\001 \001(\005"
  "\022\024\n\014channel_type\030\002 \001(\r\022\024\n\014message_text\030\003"
  " \001(\t*\345\"\n\021EDotaUserMessages\022\037\n\032DOTA_UM_Ad"
  "dUnitToSelection\020\320\003\022\030\n\023DOTA_UM_AIDebugLi"
  "ne\020\321\003\022\026\n\021DOTA_UM_ChatEvent\020\322\003\022 \n\033DOTA_UM"
  "_CombatHeroPositions\020\323\003\022\032\n\025DOTA_UM_Comba"
  "tLogData\020\324\003\022\036\n\031DOTA_UM_CombatLogBulkData"
  "\020\326\003\022#\n\036DOTA_UM_CreateLinearProjectile\020\327\003"
  "\022$\n\037DOTA_UM_DestroyLinearProjectile\020\330\003\022%"
  "\n DOTA_UM_DodgeTrackingProjectiles\020\331\003\022\035\n"
  "\030DOTA_UM_GlobalLightColor\020\332\003\022!\n\034DOTA_UM_"
  "GlobalLightDirection\020\333\003\022\033\n\026DOTA_UM_Inval"
  "idCommand\020\334\003\022\031\n\024DOTA_UM_LocationPing\020\335\003\022"
  "\024\n\017DOTA_UM_MapLine\020\336\003\022\034\n\027DOTA_UM_MiniKil"
  "lCamInfo\020\337\003\022\036\n\031DOTA_UM_MinimapDebugPoint"
  "\020\340\003\022\031\n\024DOTA_UM_MinimapEvent\020\341\003\022\035\n\030DOTA_U"
  "M_NevermoreRequiem\020\342\003\022\032\n\025DOTA_UM_Overhea"
  "dEvent\020\343\003\022\037\n\032DOTA_UM_SetNextAutobuyItem\020"
  "\344\003\022\033\n\026DOTA_UM_SharedCooldown\020\345\003\022!\n\034DOTA_"
  "UM_SpectatorPlayerClick\020\346\003\022\034\n\027DOTA_UM_Tu"
  "torialTipInfo\020\347\003\022\026\n\021DOTA_UM_UnitEvent\020\350\003"
  "\022\034\n\027DOTA_UM_ParticleManager\020\351\003\022\024\n\017DOTA_U"
  "M_BotChat\020\352\003\022\025\n\020DOTA_UM_HudError\020\353\003\022\032\n\025D"
  "OTA_UM_ItemPurchased\020\354\003\022\021\n\014DOTA_UM_Ping\020"
  "\355\003\022\026\n\021DOTA_UM_ItemFound\020\356\003\022\"\n\035DOTA_UM_Ch"
  "aracterSpeakConcept\020\357\003\022\027\n\022DOTA_UM_SwapVe"
  "rify\020\360\003\022\026\n\021DOTA_UM_WorldLine\020\361\003\022\033\n\026DOTA_"
  "UM_TournamentDrop\020\362\003\022\026\n\021DOTA_UM_ItemAler"
  "t\020\363\003\022\033\n\026DOTA_UM_HalloweenDrops\020\364\003\022\026\n\021DOT"
  "A_UM_ChatWheel\020\365\003\022\035\n\030DOTA_UM_ReceivedXma"
  "sGift\020\366\003\022 \n\033DOTA_UM_UpdateSharedContent\020"
  "\367\003\022\037\n\032DOTA_UM_TutorialRequestExp\020\370\003\022 \n\033D"
  "OTA_UM_TutorialPingMinimap\020\371\003\022\"\n\035DOTA_UM"
  "_GamerulesStateChanged\020\372\003\022\027\n\022DOTA_UM_Sho"
  "wSurvey\020\373\003\022\031\n\024DOTA_UM_TutorialFade\020\374\003\022\035\n"
  "\030DOTA_UM_AddQuestLogEntry\020\375\003\022\032\n\025DOTA_UM_"
  "SendStatPopup\020\376\003\022\033\n\026DOTA_UM_TutorialFini"
  "sh\020\377\003\022\034\n\027DOTA_UM_SendRoshanPopup\020\200\004\022\037\n\032D"
  "OTA_UM_SendGenericToolTip\020\201\004\022\032\n\025DOTA_UM_"
  "SendFinalGold\020\202\004\022\026\n\021DOTA_UM_CustomMsg\020\203\004"
  "\022\031\n\024DOTA_UM_CoachHUDPing\020\204\004\022\036\n\031DOTA_UM_C"
  "lientLoadGridNav\020\205\004\022\032\n\025DOTA_UM_TE_Projec"
  "tile\020\206\004\022\035\n\030DOTA_UM_TE_ProjectileLoc\020\207\004\022\037"
  "\n\032DOTA_UM_TE_DotaBloodImpact\020\210\004\022\035\n\030DOTA_"
  "UM_TE_UnitAnimation\020\211\004\022 \n\033DOTA_UM_TE_Uni"
  "tAnimationEnd\020\212\004\022\030\n\023DOTA_UM_AbilityPing\020"
  "\213\004\022\035\n\030DOTA_UM_ShowGenericPopup\020\214\004\022\026\n\021DOT"
  "A_UM_VoteStart\020\215\004\022\027\n\022DOTA_UM_VoteUpdate\020"
  "\216\004\022\024\n\017DOTA_UM_VoteEnd\020\217\004\022\031\n\024DOTA_UM_Boos"
  "terState\020\220\004\022\036\n\031DOTA_UM_WillPurchaseAlert"
  "\020\221\004\022$\n\037DOTA_UM_TutorialMinimapPosition\020\222"
  "\004\022\026\n\021DOTA_UM_PlayerMMR\020\223\004\022\031\n\024DOTA_UM_Abi"
  "litySteal\020\224\004\022\037\n\032DOTA_UM_CourierKilledAle"
  "rt\020\225\004\022\033\n\026DOTA_UM_EnemyItemAlert\020\226\004\022\036\n\031DO"
  "TA_UM_StatsMatchDetails\020\227\004\022\026\n\021DOTA_UM_Mi"
  "niTaunt\020\230\004\022\036\n\031DOTA_UM_BuyBackStateAlert\020"
  "\231\004\022\031\n\024DOTA_UM_SpeechBubble\020\232\004\022 \n\033DOTA_UM"
  "_CustomHeaderMessage\020\233\004\022\032\n\025DOTA_UM_Quick"
  "BuyAlert\020\234\004\022\035\n\030DOTA_UM_StatsHeroDetails\020"
  "\235\004\022\035\n\030DOTA_UM_PredictionResult\020\236\004\022\032\n\025DOT"
  "A_UM_ModifierAlert\020\237\004\022\030\n\023DOTA_UM_HPManaA"
  "lert\020\240\004\022\027\n\022DOTA_UM_GlyphAlert\020\241\004\022\026\n\021DOTA"
  "_UM_BeastChat\020\242\004\022&\n!DOTA_UM_SpectatorPla"
  "yerUnitOrders\020\243\004\022$\n\037DOTA_UM_CustomHudEle"
  "ment_Create\020\244\004\022$\n\037DOTA_UM_CustomHudEleme"
  "nt_Modify\020\245\004\022%\n DOTA_UM_CustomHudElement"
  "_Destroy\020\246\004\022\034\n\027DOTA_UM_CompendiumState\020\247"
  "\004\022\036\n\031DOTA_UM_ProjectionAbility\020\250\004\022\034\n\027DOT"
  "A_UM_ProjectionEvent\020\251\004\022\036\n\031DOTA_UM_Comba"
  "tLogDataHLTV\020\252\004\022\024\n\017DOTA_UM_XPAlert\020\253\004\022 \n"
  "\033DOTA_UM_UpdateQuestProgress\020\254\004\022\032\n\025DOTA_"
  "UM_MatchMetadata\020\255\004\022\031\n\024DOTA_UM_MatchDeta"
  "ils\020\256\004\022\030\n\023DOTA_UM_QuestStatus\020\257\004\022\034\n\027DOTA"
  "_UM_SuggestHeroPick\020\260\004\022\034\n\027DOTA_UM_Sugges"
  "tHeroRole\020\261\004\022\037\n\032DOTA_UM_KillcamDamageTak"
  "en\020\262\004\022\036\n\031DOTA_UM_SelectPenaltyGold\020\263\004\022\033\n"
  "\026DOTA_UM_RollDiceResult\020\264\004\022\033\n\026DOTA_UM_Fl"
  "ipCoinResult\020\265\004\022#\n\036DOTA_UM_RequestItemSu"
  "ggestions\020\266\004\022\037\n\032DOTA_UM_TeamCaptainChang"
  "ed\020\267\004\022%\n DOTA_UM_SendRoshanSpectatorPhas"
  "e\020\270\004\022\036\n\031DOTA_UM_ChatWheelCooldown\020\271\004\022!\n\034"
  "DOTA_UM_DismissAllStatPopups\020\272\004\022!\n\034DOTA_"
  "UM_TE_DestroyProjectile\020\273\004\022\036\n\031DOTA_UM_He"
  "roRelicProgress\020\274\004\022\'\n\"DOTA_UM_AbilityDra"
  "ftRequestAbility\020\275\004\022\025\n\020DOTA_UM_ItemSold\020"
  "\276\004\022\031\n\024DOTA_UM_DamageReport\020\277\004\022\031\n\024DOTA_UM"
  "_SalutePlayer\020\300\004\022\025\n\020DOTA_UM_TipAlert\020\301\004\022"
  "\035\n\030DOTA_UM_ReplaceQueryUnit\020\302\004\022\037\n\032DOTA_U"
  "M_EmptyTeleportAlert\020\303\004\022#\n\036DOTA_UM_MarsA"
  "renaOfBloodAttack\020\304\004\022\032\n\025DOTA_UM_ESArcana"
  "Combo\020\305\004\022!\n\034DOTA_UM_ESArcanaComboSummary"
  "\020\306\004\022 \n\033DOTA_UM_HighFiveLeftHanging\020\307\004\022\036\n"
  "\031DOTA_UM_HighFiveCompleted\020\310\004\022\032\n\025DOTA_UM"
  "_ShovelUnearth\020\311\004\022\035\n\030DOTA_EM_InvokerSpel"
  "lCast\020\312\004\022\027\n\022DOTA_UM_RadarAlert\020\313\004\022\031\n\024DOT"
  "A_UM_AllStarEvent\020\314\004\022\034\n\027DOTA_UM_TalentTr"
  "eeAlert\020\315\004\022\037\n\032DOTA_UM_QueuedOrderRemoved"
  "\020\316\004\022\033\n\026DOTA_UM_DebugChallenge\020\317\004\022\032\n\025DOTA"
  "_UM_OMArcanaCombo\020\320\004\022\035\n\030DOTA_UM_FoundNeu"
  "tralItem\020\321\004\022\034\n\027DOTA_UM_OutpostCaptured\020\322"
  "\004\022\035\n\030DOTA_UM_OutpostGrantedXP\020\323\004\022\035\n\030DOTA"
  "_UM_MoveCameraToUnit\020\324\004\022\036\n\031DOTA_UM_Pause"
  "MinigameData\020\325\004\022\'\n\"DOTA_UM_VersusScene_P"
  "layerBehavior\020\326\004\022\036\n\031DOTA_UM_QoP_ArcanaSu"
  "mmary\020\330\004\022\036\n\031DOTA_UM_HotPotato_Created\020\331\004"
  "\022\037\n\032DOTA_UM_HotPotato_Exploded\020\332\004\022\037\n\032DOT"
  "A_UM_WK_Arcana_Progress\020\333\004\022$\n\037DOTA_UM_Gu"
  "ildChallenge_Progress\020\334\004\022\035\n\030DOTA_UM_WRAr"
  "canaProgress\020\335\004\022\034\n\027DOTA_UM_WRArcanaSumma"
  "ry\020\336\004\022\037\n\032DOTA_UM_EmptyItemSlotAlert\020\337\004\022\034"
  "\n\027DOTA_UM_AghsStatusAlert\020\340\004\022\035\n\030DOTA_UM_"
  "PingConfirmation\020\341\004\022\031\n\024DOTA_UM_MutedPlay"
  "ers\020\342\004\022\032\n\025DOTA_UM_ContextualTip\020\343\004\022\030\n\023DO"
  "TA_UM_ChatMessage\020\344\004*\351\035\n\021DOTA_CHAT_MESSA"
  "GE\022!\n\024CHAT_MESSAGE_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\032\n"
  "\026CHAT_MESSAGE_HERO_KILL\020\000\022\032\n\026CHAT_MESSAG"
  "E_HERO_DENY\020\001\022\036\n\032CHAT_MESSAGE_BARRACKS_K"
  "ILL\020\002\022\033\n\027CHAT_MESSAGE_TOWER_KILL\020\003\022\033\n\027CH"
  "AT_MESSAGE_TOWER_DENY\020\004\022\033\n\027CHAT_MESSAGE_"
  "FIRSTBLOOD\020\005\022\034\n\030CHAT_MESSAGE_STREAK_KILL"
  "\020\006\022\030\n\024CHAT_MESSAGE_BUYBACK\020\007\022\026\n\022CHAT_MES"
  "SAGE_AEGIS\020\010\022\034\n\030CHAT_MESSAGE_ROSHAN_KILL"
  "\020\t\022\035\n\031CHAT_MESSAGE_COURIER_LOST\020\n\022\"\n\036CHA"
  "T_MESSAGE_COURIER_RESPAWNED\020\013\022\033\n\027CHAT_ME"
  "SSAGE_GLYPH_USED\020\014\022\036\n\032CHAT_MESSAGE_ITEM_"
  "PURCHASE\020\r\022\030\n\024CHAT_MESSAGE_CONNECT\020\016\022\033\n\027"
  "CHAT_MESSAGE_DISCONNECT\020\017\022.\n*CHAT_MESSAG"
  "E_DISCONNECT_WAIT_FOR_RECONNECT\020\020\022*\n&CHA"
  "T_MESSAGE_DISCONNECT_TIME_REMAINING\020\021\0221\n"
  "-CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_"
  "PLURAL\020\022\022\032\n\026CHAT_MESSAGE_RECONNECT\020\023\022\034\n\030"
  "CHAT_MESSAGE_PLAYER_LEFT\020\024\022\036\n\032CHAT_MESSA"
  "GE_SAFE_TO_LEAVE\020\025\022\034\n\030CHAT_MESSAGE_RUNE_"
  "PICKUP\020\026\022\034\n\030CHAT_MESSAGE_RUNE_BOTTLE\020\027\022\032"
  "\n\026CHAT_MESSAGE_RUNE_DENY\020r\022\031\n\025CHAT_MESSA"
  "GE_INTHEBAG\020\030\022\033\n\027CHAT_MESSAGE_SECRETSHOP"
  "\020\031\022#\n\037CHAT_MESSAGE_ITEM_AUTOPURCHASED\020\032\022"
  "\037\n\033CHAT_MESSAGE_ITEMS_COMBINED\020\033\022\035\n\031CHAT"
  "_MESSAGE_SUPER_CREEPS\020\034\022%\n!CHAT_MESSAGE_"
  "CANT_USE_ACTION_ITEM\020\035\022\032\n\026CHAT_MESSAGE_C"
  "ANTPAUSE\020\037\022\035\n\031CHAT_MESSAGE_NOPAUSESLEFT\020"
  " \022\035\n\031CHAT_MESSAGE_CANTPAUSEYET\020!\022\027\n\023CHAT"
  "_MESSAGE_PAUSED\020\"\022\"\n\036CHAT_MESSAGE_UNPAUS"
  "E_COUNTDOWN\020#\022\031\n\025CHAT_MESSAGE_UNPAUSED\020$"
  "\022\036\n\032CHAT_MESSAGE_AUTO_UNPAUSED\020%\022\032\n\026CHAT"
  "_MESSAGE_YOUPAUSED\020&\022 \n\034CHAT_MESSAGE_CAN"
  "TUNPAUSETEAM\020\'\022\"\n\036CHAT_MESSAGE_VOICE_TEX"
  "T_BANNED\020)\022.\n*CHAT_MESSAGE_SPECTATORS_WA"
  "TCHING_THIS_GAME\020*\022 \n\034CHAT_MESSAGE_REPOR"
  "T_REMINDER\020+\022\032\n\026CHAT_MESSAGE_ECON_ITEM\020,"
  "\022\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n\023CHAT_MESSAGE"
  "_RANDOM\020.\022\030\n\024CHAT_MESSAGE_RD_TURN\020/\022 \n\034C"
  "HAT_MESSAGE_DROP_RATE_BONUS\0201\022!\n\035CHAT_ME"
  "SSAGE_NO_BATTLE_POINTS\0202\022\035\n\031CHAT_MESSAGE"
  "_DENIED_AEGIS\0203\022\036\n\032CHAT_MESSAGE_INFORMAT"
  "IONAL\0204\022\035\n\031CHAT_MESSAGE_AEGIS_STOLEN\0205\022\035"
  "\n\031CHAT_MESSAGE_ROSHAN_CANDY\0206\022\034\n\030CHAT_ME"
  "SSAGE_ITEM_GIFTED\0207\022\'\n#CHAT_MESSAGE_HERO"
  "_KILL_WITH_GREEVIL\0208\022(\n$CHAT_MESSAGE_HOL"
  "DOUT_TOWER_DESTROYED\0209\022\'\n#CHAT_MESSAGE_H"
  "OLDOUT_WALL_DESTROYED\020:\022&\n\"CHAT_MESSAGE_"
  "HOLDOUT_WALL_FINISHED\020;\022)\n%CHAT_MESSAGE_"
  "PLAYER_LEFT_LIMITED_HERO\020>\0221\n-CHAT_MESSA"
  "GE_ABANDON_LIMITED_HERO_EXPLANATION\020\?\022(\n"
  "$CHAT_MESSAGE_DISCONNECT_LIMITED_HERO\020@\022"
  "3\n/CHAT_MESSAGE_LOW_PRIORITY_COMPLETED_E"
  "XPLANATION\020A\022,\n(CHAT_MESSAGE_RECRUITMENT"
  "_DROP_RATE_BONUS\020B\0221\n-CHAT_MESSAGE_FROST"
  "IVUS_SHINING_BOOSTER_ACTIVE\020C\022 \n\034CHAT_ME"
  "SSAGE_PLAYER_LEFT_AFK\020I\0222\n.CHAT_MESSAGE_"
  "PLAYER_LEFT_DISCONNECTED_TOO_LONG\020J\022!\n\035C"
  "HAT_MESSAGE_PLAYER_ABANDONED\020K\022%\n!CHAT_M"
  "ESSAGE_PLAYER_ABANDONED_AFK\020L\0227\n3CHAT_ME"
  "SSAGE_PLAYER_ABANDONED_DISCONNECTED_TOO_"
  "LONG\020M\022#\n\037CHAT_MESSAGE_WILL_NOT_BE_SCORE"
  "D\020N\022*\n&CHAT_MESSAGE_WILL_NOT_BE_SCORED_R"
  "ANKED\020O\022+\n\'CHAT_MESSAGE_WILL_NOT_BE_SCOR"
  "ED_NETWORK\020P\0222\n.CHAT_MESSAGE_WILL_NOT_BE"
  "_SCORED_NETWORK_RANKED\020Q\022)\n%CHAT_MESSAGE"
  "_CAN_QUIT_WITHOUT_ABANDON\020R\022:\n6CHAT_MESS"
  "AGE_RANKED_GAME_STILL_SCORED_LEAVERS_GET"
  "_LOSS\020S\0228\n4CHAT_MESSAGE_ABANDON_RANKED_B"
  "EFORE_FIRST_BLOOD_PARTY\020T\022!\n\035CHAT_MESSAG"
  "E_COMPENDIUM_LEVEL\020U\022*\n&CHAT_MESSAGE_VIC"
  "TORY_PREDICTION_STREAK\020V\022\"\n\036CHAT_MESSAGE"
  "_ASSASSIN_ANNOUNCE\020W\022!\n\035CHAT_MESSAGE_ASS"
  "ASSIN_SUCCESS\020X\022 \n\034CHAT_MESSAGE_ASSASSIN"
  "_DENIED\020Y\0227\n3CHAT_MESSAGE_VICTORY_PREDIC"
  "TION_SINGLE_USER_CONFIRM\020Z\022\034\n\030CHAT_MESSA"
  "GE_EFFIGY_KILL\020[\022+\n\'CHAT_MESSAGE_VOICE_T"
  "EXT_BANNED_OVERFLOW\020\\\022\"\n\036CHAT_MESSAGE_YE"
  "AR_BEAST_KILLED\020]\022 \n\034CHAT_MESSAGE_PAUSE_"
  "COUNTDOWN\020^\022\036\n\032CHAT_MESSAGE_COINS_WAGERE"
  "D\020_\022#\n\037CHAT_MESSAGE_HERO_NOMINATED_BAN\020`"
  "\022\034\n\030CHAT_MESSAGE_HERO_BANNED\020a\022\037\n\033CHAT_M"
  "ESSAGE_HERO_BAN_COUNT\020b\022\036\n\032CHAT_MESSAGE_"
  "RIVER_PAINTED\020c\022\032\n\026CHAT_MESSAGE_SCAN_USE"
  "D\020d\022\036\n\032CHAT_MESSAGE_SHRINE_KILLED\020e\022\"\n\036C"
  "HAT_MESSAGE_WAGER_TOKEN_SPENT\020f\022\033\n\027CHAT_"
  "MESSAGE_RANK_WAGER\020g\022$\n CHAT_MESSAGE_NEW"
  "_PLAYER_REMINDER\020h\022%\n!CHAT_MESSAGE_OBSER"
  "VER_WARD_KILLED\020i\022#\n\037CHAT_MESSAGE_SENTRY"
  "_WARD_KILLED\020j\022-\n)CHAT_MESSAGE_ITEM_PLAC"
  "ED_IN_NEUTRAL_STASH\020k\022$\n CHAT_MESSAGE_HE"
  "RO_CHOICE_INVALID\020l\022\027\n\023CHAT_MESSAGE_BOUN"
  "TY\020m\022$\n CHAT_MESSAGE_ABILITY_DRAFT_START"
  "\020n\022!\n\035CHAT_MESSAGE_HERO_FOUND_CANDY\020o\022\'\n"
  "#CHAT_MESSAGE_ABILITY_DRAFT_RANDOMED\020p\022("
  "\n$CHAT_MESSAGE_PRIVATE_COACH_CONNECTED\020q"
  "*\262\001\n\035DOTA_NO_BATTLE_POINTS_REASONS\022%\n!NO"
  "_BATTLE_POINTS_WRONG_LOBBY_TYPE\020\001\022\"\n\036NO_"
  "BATTLE_POINTS_PRACTICE_BOTS\020\002\022#\n\037NO_BATT"
  "LE_POINTS_CHEATS_ENABLED\020\003\022!\n\035NO_BATTLE_"
  "POINTS_LOW_PRIORITY\020\004*\317\001\n\027DOTA_CHAT_INFO"
  "RMATIONAL\022!\n\035INFO_COOP_BATTLE_POINTS_RUL"
  "ES\020\001\022#\n\037INFO_FROSTIVUS_ABANDON_REMINDER\020"
  "\002\022\030\n\024INFO_RANKED_REMINDER\020\003\022+\n\'INFO_COOP"
  "_LOW_PRIORITY_PASSIVE_REMINDER\020\004\022%\n!INFO"
  "_CUSTOM_GAME_PENALTY_REMINDER\020\005*\274\003\n\026DOTA"
  "_ABILITY_PING_TYPE\022\026\n\022ABILITY_PING_READY"
  "\020\001\022\025\n\021ABILITY_PING_MANA\020\002\022\031\n\025ABILITY_PIN"
  "G_COOLDOWN\020\003\022\026\n\022ABILITY_PING_ENEMY\020\004\022\032\n\026"
  "ABILITY_PING_UNLEARNED\020\005\022\033\n\027ABILITY_PING"
  "_INBACKPACK\020\006\022\030\n\024ABILITY_PING_INSTASH\020\007\022"
  "\032\n\026ABILITY_PING_ONCOURIER\020\010\022\025\n\021ABILITY_P"
  "ING_ALLY\020\t\022\034\n\030ABILITY_PING_LEARN_READY\020\n"
  "\022\033\n\027ABILITY_PING_WILL_LEARN\020\013\022\035\n\031ABILITY"
  "_PING_FUTURE_LEARN\020\014\022\036\n\032ABILITY_PING_NEU"
  "TRAL_OFFER\020\r\022 \n\034ABILITY_PING_NEUTRAL_REQ"
  "UEST\020\016\022\036\n\032ABILITY_PING_NEUTRAL_EQUIP\020\017*\214"
  "\002\n\027DOTA_REPLAY_STATE_EVENT\022&\n\"DOTA_REPLA"
  "Y_STATE_EVENT_GAME_START\020\001\022)\n%DOTA_REPLA"
  "Y_STATE_EVENT_STARTING_HORN\020\002\022\'\n#DOTA_RE"
  "PLAY_STATE_EVENT_FIRST_BLOOD\020\003\022$\n DOTA_R"
  "EPLAY_STATE_EVENT_SHOWCASE\020\004\022%\n!DOTA_REP"
  "LAY_STATE_EVENT_POST_GAME\020\005\022(\n$DOTA_REPL"
  "AY_STATE_EVENT_WAIT_FOR_MAP\020\006*\345\001\n\023EDotaE"
  "ntityMessages\022\024\n\020DOTA_UNIT_SPEECH\020\000\022\031\n\025D"
  "OTA_UNIT_SPEECH_MUTE\020\001\022\031\n\025DOTA_UNIT_ADD_"
  "GESTURE\020\002\022\034\n\030DOTA_UNIT_REMOVE_GESTURE\020\003\022"
  "!\n\035DOTA_UNIT_REMOVE_ALL_GESTURES\020\004\022\032\n\026DO"
  "TA_UNIT_FADE_GESTURE\020\006\022%\n!DOTA_UNIT_SPEE"
  "CH_CLIENTSIDE_RULES\020\007*\215\006\n\023DOTA_OVERHEAD_"
  "ALERT\022\027\n\023OVERHEAD_ALERT_GOLD\020\000\022\027\n\023OVERHE"
  "AD_ALERT_DENY\020\001\022\033\n\027OVERHEAD_ALERT_CRITIC"
  "AL\020\002\022\025\n\021OVERHEAD_ALERT_XP\020\003\022%\n!OVERHEAD_"
  "ALERT_BONUS_SPELL_DAMAGE\020\004\022\027\n\023OVERHEAD_A"
  "LERT_MISS\020\005\022\031\n\025OVERHEAD_ALERT_DAMAGE\020\006\022\030"
  "\n\024OVERHEAD_ALERT_EVADE\020\007\022\030\n\024OVERHEAD_ALE"
  "RT_BLOCK\020\010\022&\n\"OVERHEAD_ALERT_BONUS_POISO"
  "N_DAMAGE\020\t\022\027\n\023OVERHEAD_ALERT_HEAL\020\n\022\033\n\027O"
  "VERHEAD_ALERT_MANA_ADD\020\013\022\034\n\030OVERHEAD_ALE"
  "RT_MANA_LOSS\020\014\022!\n\035OVERHEAD_ALERT_LAST_HI"
  "T_EARLY\020\r\022!\n\035OVERHEAD_ALERT_LAST_HIT_CLO"
  "SE\020\016\022 \n\034OVERHEAD_ALERT_LAST_HIT_MISS\020\017\022 "
  "\n\034OVERHEAD_ALERT_MAGICAL_BLOCK\020\020\022\"\n\036OVER"
  "HEAD_ALERT_INCOMING_DAMAGE\020\021\022\"\n\036OVERHEAD"
  "_ALERT_OUTGOING_DAMAGE\020\022\022!\n\035OVERHEAD_ALE"
  "RT_DISABLE_RESIST\020\023\022\030\n\024OVERHEAD_ALERT_DE"
  "ATH\020\024\022\032\n\026OVERHEAD_ALERT_BLOCKED\020\025\022 \n\034OVE"
  "RHEAD_ALERT_ITEM_RECEIVED\020\026\022\030\n\024OVERHEAD_"
  "ALERT_SHARD\020\027\022\036\n\032OVERHEAD_ALERT_DEADLY_B"
  "LOW\020\030*k\n\021DOTA_ROSHAN_PHASE\022\027\n\023k_SRSP_ROS"
  "HAN_ALIVE\020\000\022\034\n\030k_SRSP_ROSHAN_BASE_TIMER\020"
  "\001\022\037\n\033k_SRSP_ROSHAN_VISIBLE_TIMER\020\002*\201\004\n\026D"
  "OTA_POSITION_CATEGORY\022\026\n\022DOTA_POSITION_N"
  "ONE\020\000\022\035\n\031DOTA_POSITION_BOTTOM_LANE\020\001\022\032\n\026"
  "DOTA_POSITION_MID_LANE\020\002\022\032\n\026DOTA_POSITIO"
  "N_TOP_LANE\020\003\022 \n\034DOTA_POSITION_RADIANT_JU"
  "NGLE\020\004\022\035\n\031DOTA_POSITION_DIRE_JUNGLE\020\005\022\"\n"
  "\036DOTA_POSITION_RADIANT_ANCIENTS\020\006\022\037\n\033DOT"
  "A_POSITION_DIRE_ANCIENTS\020\007\022%\n!DOTA_POSIT"
  "ION_RADIANT_SECRET_SHOP\020\010\022\"\n\036DOTA_POSITI"
  "ON_DIRE_SECRET_SHOP\020\t\022\027\n\023DOTA_POSITION_R"
  "IVER\020\n\022\034\n\030DOTA_POSITION_ROSHAN_PIT\020\013\022\036\n\032"
  "DOTA_POSITION_RADIANT_BASE\020\014\022\033\n\027DOTA_POS"
  "ITION_DIRE_BASE\020\r\022\032\n\026DOTA_POSITION_FOUNT"
  "AIN\020\016\022\027\n\023DOTA_POSITION_OTHER\020\017*\346\001\n\030DOTA_"
  "ABILITY_TARGET_TYPE\022\034\n\030DOTA_ABILITY_TARG"
  "ET_NONE\020\000\022\034\n\030DOTA_ABILITY_TARGET_SELF\020\001\022"
  "!\n\035DOTA_ABILITY_TARGET_ALLY_HERO\020\002\022\"\n\036DO"
  "TA_ABILITY_TARGET_ALLY_CREEP\020\003\022\"\n\036DOTA_A"
  "BILITY_TARGET_ENEMY_HERO\020\004\022#\n\037DOTA_ABILI"
  "TY_TARGET_ENEMY_CREEP\020\005*\230\010\n\rEHeroStatTyp"
  "e\022\030\n\024k_EHeroStatType_None\020\000\022#\n\036k_EHeroSt"
  "atType_AxeTotalDamage\020\320\017\022\'\n\"k_EHeroStatT"
  "ype_BattleHungerDamage\020\321\017\022\'\n\"k_EHeroStat"
  "Type_CounterHelixDamage\020\322\017\022\'\n\"k_EHeroSta"
  "tType_CullingBladeDamage\020\323\017\022,\n\'k_EHeroSt"
  "atType_BerserkersCallCastCount\020\324\017\0223\n.k_E"
  "HeroStatType_BerserkersCallHeroesHitAver"
  "age\020\325\017\0220\n+k_EHeroStatType_BerserkersCall"
  "OtherUnitsHit\020\326\017\0223\n.k_EHeroStatType_Bers"
  "erkersCallHeroAttacksTaken\020\327\017\0224\n/k_EHero"
  "StatType_BerserkersCallOtherAttacksTaken"
  "\020\330\017\022*\n%k_EHeroStatType_BattleHungerCastC"
  "ount\020\331\017\0222\n-k_EHeroStatType_BattleHungerP"
  "otentialDuration\020\332\017\0220\n+k_EHeroStatType_B"
  "attleHungerAverageDuration\020\333\017\022*\n%k_EHero"
  "StatType_CounterHelixProcCount\020\334\017\022.\n)k_E"
  "HeroStatType_CounterHelixHeroProcCount\020\335"
  "\017\0221\n,k_EHeroStatType_CounterHelixHeroesH"
  "itAverage\020\336\017\0223\n.k_EHeroStatType_CounterH"
  "elixOtherUnitsHitCount\020\337\017\022*\n%k_EHeroStat"
  "Type_CullingBladeCastCount\020\340\017\022*\n%k_EHero"
  "StatType_CullingBladeKillCount\020\341\017\0224\n/k_E"
  "HeroStatType_CullingBladeAverageHealthCu"
  "lled\020\342\017\0227\n2k_EHeroStatType_CullingBladeA"
  "verageDamageAvailable\020\343\017\0220\n+k_EHeroStatT"
  "ype_CullingBladeHeroBuffAverage\020\344\017*\344\004\n\027E"
  "PlayerVoiceListenState\022\016\n\nkPVLS_None\020\000\022\032"
  "\n\026kPVLS_DeniedChatBanned\020\001\022\027\n\023kPVLS_Deni"
  "edPartner\020\002\022&\n\"kPVLS_DeniedHLTVTalkerNot"
  "Spectator\020\003\022$\n kPVLS_DeniedHLTVNoTalkerP"
  "layerID\020\004\022(\n$kPVLS_DeniedHLTVTalkerNotBr"
  "oadcaster\020\005\022\035\n\031kPVLS_DeniedTeamSpectator"
  "\020\006\022\027\n\023kPVLS_DeniedStudent\020\010\022\034\n\030kPVLS_Den"
  "iedPrivateCoach\020\t\022\020\n\014kPVLS_Denied\020@\022&\n\"k"
  "PVLS_AllowHLTVTalkerIsBroadcaster\020A\022\034\n\030k"
  "PVLS_AllowCoBroadcaster\020B\022\026\n\022kPVLS_Allow"
  "AllChat\020C\022\035\n\031kPVLS_AllowStudentToCoach\020D"
  "\022\034\n\030kPVLS_AllowFellowStudent\020E\022\034\n\030kPVLS_"
  "AllowTalkerIsCoach\020F\022\034\n\030kPVLS_AllowCoach"
  "HearTeam\020G\022\027\n\023kPVLS_AllowSameTeam\020H\022\027\n\023k"
  "PVLS_AllowShowcase\020I\022\033\n\027kPVLS_AllowPriva"
  "teCoach\020J*B\n\020EProjectionEvent\022\022\n\016ePE_Fir"
  "stBlood\020\000\022\032\n\026ePE_Killstreak_godlike\020\001B\005H"
  "\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fusermessages_2eproto_deps[3] = {
  &::descriptor_table_dota_5fcommonmessages_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fusermessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fusermessages_2eproto = {
  false, false, 33644, descriptor_table_protodef_dota_5fusermessages_2eproto, "dota_usermessages.proto", 
  &descriptor_table_dota_5fusermessages_2eproto_once, descriptor_table_dota_5fusermessages_2eproto_deps, 3, 170,
  schemas, file_default_instances, TableStruct_dota_5fusermessages_2eproto::offsets,
  file_level_metadata_dota_5fusermessages_2eproto, file_level_enum_descriptors_dota_5fusermessages_2eproto, file_level_service_descriptors_dota_5fusermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fusermessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return descriptor_table_dota_5fusermessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fusermessages_2eproto(&descriptor_table_dota_5fusermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[0];
}
bool CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_ItemGranted;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_Destroyed;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MIN;
constexpr CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MAX;
constexpr int CDOTAUserMsg_PredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[1];
}
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::NUMERIC;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRING;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRINGTABLE_INDEX;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::INT_NUMERIC;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MIN;
constexpr CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MAX;
constexpr int CDOTAResponseQuerySerialized_Fact::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[2];
}
bool CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Invalid;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Cooperative;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::k_EChallengeType_Contract;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_MIN;
constexpr CDOTAUserMsg_GuildChallenge_Progress_EChallengeType CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_MAX;
constexpr int CDOTAUserMsg_GuildChallenge_Progress::EChallengeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaUserMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[3];
}
bool EDotaUserMessages_IsValid(int value) {
  switch (value) {
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[4];
}
bool DOTA_CHAT_MESSAGE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[5];
}
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[6];
}
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[7];
}
bool DOTA_ABILITY_PING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_REPLAY_STATE_EVENT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[8];
}
bool DOTA_REPLAY_STATE_EVENT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaEntityMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[9];
}
bool EDotaEntityMessages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[10];
}
bool DOTA_OVERHEAD_ALERT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ROSHAN_PHASE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[11];
}
bool DOTA_ROSHAN_PHASE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_POSITION_CATEGORY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[12];
}
bool DOTA_POSITION_CATEGORY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_ABILITY_TARGET_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[13];
}
bool DOTA_ABILITY_TARGET_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHeroStatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[14];
}
bool EHeroStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerVoiceListenState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[15];
}
bool EPlayerVoiceListenState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProjectionEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fusermessages_2eproto);
  return file_level_enum_descriptors_dota_5fusermessages_2eproto[16];
}
bool EProjectionEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAUserMsg_AIDebugLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AIDebugLine>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AIDebugLine)
}
CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AIDebugLine)
}

void CDOTAUserMsg_AIDebugLine::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_AIDebugLine::~CDOTAUserMsg_AIDebugLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AIDebugLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AIDebugLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_AIDebugLine::ArenaDtor(void* object) {
  CDOTAUserMsg_AIDebugLine* _this = reinterpret_cast< CDOTAUserMsg_AIDebugLine* >(object);
  (void)_this;
}
void CDOTAUserMsg_AIDebugLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AIDebugLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AIDebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AIDebugLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AIDebugLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_AIDebugLine.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AIDebugLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AIDebugLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AIDebugLine.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AIDebugLine)
  return target;
}

size_t CDOTAUserMsg_AIDebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AIDebugLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AIDebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AIDebugLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AIDebugLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AIDebugLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AIDebugLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const CDOTAUserMsg_AIDebugLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AIDebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AIDebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const CDOTAUserMsg_AIDebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AIDebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AIDebugLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AIDebugLine::InternalSwap(CDOTAUserMsg_AIDebugLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AIDebugLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_Ping>()._has_bits_);
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_Ping)
}
CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ping_, &from.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(loss_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_Ping)
}

void CDOTAUserMsg_Ping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(loss_));
}

CDOTAUserMsg_Ping::~CDOTAUserMsg_Ping() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_Ping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_Ping::ArenaDtor(void* object) {
  CDOTAUserMsg_Ping* _this = reinterpret_cast< CDOTAUserMsg_Ping* >(object);
  (void)_this;
}
void CDOTAUserMsg_Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loss_) -
        reinterpret_cast<char*>(&ping_)) + sizeof(loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 loss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_loss(&has_bits);
          loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional uint32 loss = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_loss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_Ping)
  return target;
}

size_t CDOTAUserMsg_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping());
    }

    // optional uint32 loss = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loss());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_Ping)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_Ping::MergeFrom(const CDOTAUserMsg_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      loss_ = from.loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_Ping::CopyFrom(const CDOTAUserMsg_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_Ping::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_Ping::InternalSwap(CDOTAUserMsg_Ping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_Ping, loss_)
      + sizeof(CDOTAUserMsg_Ping::loss_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_Ping, ping_)>(
          reinterpret_cast<char*>(&ping_),
          reinterpret_cast<char*>(&other->ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SwapVerify::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SwapVerify>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SwapVerify)
}
CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(const CDOTAUserMsg_SwapVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SwapVerify)
}

void CDOTAUserMsg_SwapVerify::SharedCtor() {
player_id_ = 0u;
}

CDOTAUserMsg_SwapVerify::~CDOTAUserMsg_SwapVerify() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SwapVerify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SwapVerify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SwapVerify::ArenaDtor(void* object) {
  CDOTAUserMsg_SwapVerify* _this = reinterpret_cast< CDOTAUserMsg_SwapVerify* >(object);
  (void)_this;
}
void CDOTAUserMsg_SwapVerify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SwapVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SwapVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SwapVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SwapVerify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SwapVerify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SwapVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SwapVerify)
  return target;
}

size_t CDOTAUserMsg_SwapVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SwapVerify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SwapVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SwapVerify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SwapVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SwapVerify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SwapVerify)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const CDOTAUserMsg_SwapVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SwapVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SwapVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const CDOTAUserMsg_SwapVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SwapVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SwapVerify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SwapVerify::InternalSwap(CDOTAUserMsg_SwapVerify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SwapVerify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ChatEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatEvent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerid_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playerid_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_playerid_3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_playerid_4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_playerid_5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_playerid_6(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatEvent)
}
CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_5_) -
    reinterpret_cast<char*>(&value_)) + sizeof(playerid_5_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatEvent)
}

void CDOTAUserMsg_ChatEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value3_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value3_));
playerid_6_ = -1;
type_ = -1;
playerid_1_ = -1;
playerid_2_ = -1;
playerid_3_ = -1;
playerid_4_ = -1;
playerid_5_ = -1;
}

CDOTAUserMsg_ChatEvent::~CDOTAUserMsg_ChatEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ChatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ChatEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_ChatEvent* _this = reinterpret_cast< CDOTAUserMsg_ChatEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_ChatEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ChatEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ChatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value3_) -
        reinterpret_cast<char*>(&value_)) + sizeof(value3_));
    playerid_6_ = -1;
    type_ = -1;
    playerid_1_ = -1;
    playerid_2_ = -1;
    playerid_3_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    playerid_4_ = -1;
    playerid_5_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CHAT_MESSAGE_IsValid(val))) {
            _internal_set_type(static_cast<::DOTA_CHAT_MESSAGE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_1 = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_playerid_1(&has_bits);
          playerid_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_2 = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_playerid_2(&has_bits);
          playerid_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_3 = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_playerid_3(&has_bits);
          playerid_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_4 = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_playerid_4(&has_bits);
          playerid_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_5 = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_playerid_5(&has_bits);
          playerid_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 playerid_6 = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_playerid_6(&has_bits);
          playerid_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_value2(&has_bits);
          value2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_value3(&has_bits);
          value3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ChatEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_playerid_1(), target);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_playerid_2(), target);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_playerid_3(), target);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_playerid_4(), target);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_playerid_5(), target);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_playerid_6(), target);
  }

  // optional uint32 value2 = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_value2(), target);
  }

  // optional uint32 value3 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_value3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatEvent)
  return target;
}

size_t CDOTAUserMsg_ChatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatEvent)
  size_t total_size = 0;

  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

    // optional uint32 value2 = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value2());
    }

    // optional uint32 value3 = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value3());
    }

    // optional sint32 playerid_6 = 8 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_6());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional sint32 playerid_1 = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_1());
    }

    // optional sint32 playerid_2 = 4 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_2());
    }

    // optional sint32 playerid_3 = 5 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_3());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional sint32 playerid_4 = 6 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_4());
    }

    // optional sint32 playerid_5 = 7 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_playerid_5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ChatEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ChatEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ChatEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const CDOTAUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      value2_ = from.value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      value3_ = from.value3_;
    }
    if (cached_has_bits & 0x00000008u) {
      playerid_6_ = from.playerid_6_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      playerid_1_ = from.playerid_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      playerid_2_ = from.playerid_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      playerid_3_ = from.playerid_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      playerid_4_ = from.playerid_4_;
    }
    if (cached_has_bits & 0x00000200u) {
      playerid_5_ = from.playerid_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const CDOTAUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ChatEvent::InternalSwap(CDOTAUserMsg_ChatEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value3_)
      + sizeof(CDOTAUserMsg_ChatEvent::value3_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
  swap(playerid_6_, other->playerid_6_);
  swap(type_, other->type_);
  swap(playerid_1_, other->playerid_1_);
  swap(playerid_2_, other->playerid_2_);
  swap(playerid_3_, other->playerid_3_);
  swap(playerid_4_, other->playerid_4_);
  swap(playerid_5_, other->playerid_5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_BotChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BotChat>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BotChat)
}
CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_only_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(team_only_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BotChat)
}

void CDOTAUserMsg_BotChat::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_only_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(team_only_));
}

CDOTAUserMsg_BotChat::~CDOTAUserMsg_BotChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BotChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_BotChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_BotChat::ArenaDtor(void* object) {
  CDOTAUserMsg_BotChat* _this = reinterpret_cast< CDOTAUserMsg_BotChat* >(object);
  (void)_this;
}
void CDOTAUserMsg_BotChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_BotChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_BotChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BotChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      target_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_only_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(team_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BotChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_BotChat.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_BotChat.target");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool team_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_only(&has_bits);
          team_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_BotChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BotChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BotChat.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BotChat.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  // optional bool team_only = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_team_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BotChat)
  return target;
}

size_t CDOTAUserMsg_BotChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BotChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string target = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional bool team_only = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_BotChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_BotChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BotChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_BotChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_BotChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_BotChat)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BotChat::MergeFrom(const CDOTAUserMsg_BotChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BotChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_only_ = from.team_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BotChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_BotChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BotChat::CopyFrom(const CDOTAUserMsg_BotChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BotChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BotChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BotChat::InternalSwap(CDOTAUserMsg_BotChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BotChat, team_only_)
      + sizeof(CDOTAUserMsg_BotChat::team_only_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BotChat, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BotChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CombatHeroPositions::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CombatHeroPositions>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector2D& world_pos(const CDOTAUserMsg_CombatHeroPositions* msg);
  static void set_has_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector2D&
CDOTAUserMsg_CombatHeroPositions::_Internal::world_pos(const CDOTAUserMsg_CombatHeroPositions* msg) {
  return *msg->world_pos_;
}
void CDOTAUserMsg_CombatHeroPositions::clear_world_pos() {
  if (world_pos_ != nullptr) world_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CombatHeroPositions)
}
CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_pos()) {
    world_pos_ = new ::CMsgVector2D(*from.world_pos_);
  } else {
    world_pos_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&index_)) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatHeroPositions)
}

void CDOTAUserMsg_CombatHeroPositions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&world_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&world_pos_)) + sizeof(health_));
}

CDOTAUserMsg_CombatHeroPositions::~CDOTAUserMsg_CombatHeroPositions() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatHeroPositions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CombatHeroPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete world_pos_;
}

void CDOTAUserMsg_CombatHeroPositions::ArenaDtor(void* object) {
  CDOTAUserMsg_CombatHeroPositions* _this = reinterpret_cast< CDOTAUserMsg_CombatHeroPositions* >(object);
  (void)_this;
}
void CDOTAUserMsg_CombatHeroPositions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CombatHeroPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CombatHeroPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CombatHeroPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(world_pos_ != nullptr);
    world_pos_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&health_) -
        reinterpret_cast<char*>(&index_)) + sizeof(health_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CombatHeroPositions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector2D world_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_health(&has_bits);
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CombatHeroPositions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatHeroPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // optional .CMsgVector2D world_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::world_pos(this), target, stream);
  }

  // optional int32 health = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatHeroPositions)
  return target;
}

size_t CDOTAUserMsg_CombatHeroPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CombatHeroPositions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector2D world_pos = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_pos_);
    }

    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional int32 time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time());
    }

    // optional int32 health = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_health());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CombatHeroPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CombatHeroPositions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CombatHeroPositions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CombatHeroPositions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CombatHeroPositions)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CombatHeroPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_world_pos()->::CMsgVector2D::MergeFrom(from._internal_world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      health_ = from.health_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CombatHeroPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CombatHeroPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatHeroPositions::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatHeroPositions::InternalSwap(CDOTAUserMsg_CombatHeroPositions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, health_)
      + sizeof(CDOTAUserMsg_CombatHeroPositions::health_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, world_pos_)>(
          reinterpret_cast<char*>(&world_pos_),
          reinterpret_cast<char*>(&other->world_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CombatHeroPositions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CombatLogBulkData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CombatLogBulkData>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void CDOTAUserMsg_CombatLogBulkData::clear_combat_entries() {
  combat_entries_.Clear();
}
CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  combat_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CombatLogBulkData)
}
CDOTAUserMsg_CombatLogBulkData::CDOTAUserMsg_CombatLogBulkData(const CDOTAUserMsg_CombatLogBulkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      combat_entries_(from.combat_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CombatLogBulkData)
}

void CDOTAUserMsg_CombatLogBulkData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
}

CDOTAUserMsg_CombatLogBulkData::~CDOTAUserMsg_CombatLogBulkData() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CombatLogBulkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CombatLogBulkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_CombatLogBulkData::ArenaDtor(void* object) {
  CDOTAUserMsg_CombatLogBulkData* _this = reinterpret_cast< CDOTAUserMsg_CombatLogBulkData* >(object);
  (void)_this;
}
void CDOTAUserMsg_CombatLogBulkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CombatLogBulkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CombatLogBulkData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CombatLogBulkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  combat_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CombatLogBulkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_combat_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CombatLogBulkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CombatLogBulkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_combat_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_combat_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_timestamp(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 player_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CombatLogBulkData)
  return target;
}

size_t CDOTAUserMsg_CombatLogBulkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CombatLogBulkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry combat_entries = 1;
  total_size += 1UL * this->_internal_combat_entries_size();
  for (const auto& msg : this->combat_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float timestamp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 player_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CombatLogBulkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CombatLogBulkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CombatLogBulkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CombatLogBulkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CombatLogBulkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CombatLogBulkData)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatLogBulkData::MergeFrom(const CDOTAUserMsg_CombatLogBulkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CombatLogBulkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  combat_entries_.MergeFrom(from.combat_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CombatLogBulkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CombatLogBulkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogBulkData::CopyFrom(const CDOTAUserMsg_CombatLogBulkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CombatLogBulkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogBulkData::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatLogBulkData::InternalSwap(CDOTAUserMsg_CombatLogBulkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  combat_entries_.InternalSwap(&other->combat_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatLogBulkData, player_id_)
      + sizeof(CDOTAUserMsg_CombatLogBulkData::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CombatLogBulkData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CombatLogBulkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability>()._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(damage_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ArenaDtor(void* object) {
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* _this = reinterpret_cast< CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* >(object);
  (void)_this;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional int32 damage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_damage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_ = from.damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, damage_)
      + sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::damage_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, ability_id_)>(
          reinterpret_cast<char*>(&ability_id_),
          reinterpret_cast<char*>(&other->ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo_Attacker::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniKillCamInfo_Attacker>()._has_bits_);
  static void set_has_attacker(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attacker_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attacker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attacker_name()) {
    attacker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attacker_name(), 
      GetArena());
  }
  ::memcpy(&attacker_, &from.attacker_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_damage_) -
    reinterpret_cast<char*>(&attacker_)) + sizeof(total_damage_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedCtor() {
attacker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attacker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_damage_) -
    reinterpret_cast<char*>(&attacker_)) + sizeof(total_damage_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::~CDOTAUserMsg_MiniKillCamInfo_Attacker() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attacker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::ArenaDtor(void* object) {
  CDOTAUserMsg_MiniKillCamInfo_Attacker* _this = reinterpret_cast< CDOTAUserMsg_MiniKillCamInfo_Attacker* >(object);
  (void)_this;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    attacker_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&attacker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_damage_) -
        reinterpret_cast<char*>(&attacker_)) + sizeof(total_damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo_Attacker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 attacker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attacker(&has_bits);
          attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_damage(&has_bits);
          total_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string attacker_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_attacker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 attacker = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attacker(), target);
  }

  // optional int32 total_damage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_damage(), target);
  }

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_abilities(i), target, stream);
  }

  // optional string attacker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attacker_name().data(), static_cast<int>(this->_internal_attacker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attacker_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string attacker_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attacker_name());
    }

    // optional uint32 attacker = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attacker());
    }

    // optional int32 total_damage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total_damage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MiniKillCamInfo_Attacker>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MiniKillCamInfo.Attacker)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MiniKillCamInfo.Attacker)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attacker_name(from._internal_attacker_name());
    }
    if (cached_has_bits & 0x00000002u) {
      attacker_ = from.attacker_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_damage_ = from.total_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abilities_.InternalSwap(&other->abilities_);
  attacker_name_.Swap(&other->attacker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, total_damage_)
      + sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker::total_damage_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_)>(
          reinterpret_cast<char*>(&attacker_),
          reinterpret_cast<char*>(&other->attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MiniKillCamInfo::_Internal {
 public:
};

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attackers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniKillCamInfo)
}
CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attackers_(from.attackers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniKillCamInfo)
}

void CDOTAUserMsg_MiniKillCamInfo::SharedCtor() {
}

CDOTAUserMsg_MiniKillCamInfo::~CDOTAUserMsg_MiniKillCamInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniKillCamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MiniKillCamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MiniKillCamInfo::ArenaDtor(void* object) {
  CDOTAUserMsg_MiniKillCamInfo* _this = reinterpret_cast< CDOTAUserMsg_MiniKillCamInfo* >(object);
  (void)_this;
}
void CDOTAUserMsg_MiniKillCamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MiniKillCamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MiniKillCamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniKillCamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attackers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniKillCamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attackers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MiniKillCamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniKillCamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attackers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attackers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniKillCamInfo)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniKillCamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  total_size += 1UL * this->_internal_attackers_size();
  for (const auto& msg : this->attackers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MiniKillCamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MiniKillCamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MiniKillCamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MiniKillCamInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniKillCamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attackers_.MergeFrom(from.attackers_);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MiniKillCamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniKillCamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo::InternalSwap(CDOTAUserMsg_MiniKillCamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attackers_.InternalSwap(&other->attackers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniKillCamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GlobalLightColor::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlobalLightColor>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlobalLightColor)
}
CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&color_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightColor)
}

void CDOTAUserMsg_GlobalLightColor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&color_)) + sizeof(duration_));
}

CDOTAUserMsg_GlobalLightColor::~CDOTAUserMsg_GlobalLightColor() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GlobalLightColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_GlobalLightColor::ArenaDtor(void* object) {
  CDOTAUserMsg_GlobalLightColor* _this = reinterpret_cast< CDOTAUserMsg_GlobalLightColor* >(object);
  (void)_this;
}
void CDOTAUserMsg_GlobalLightColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GlobalLightColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GlobalLightColor::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlobalLightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&color_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlobalLightColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GlobalLightColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightColor)
  return target;
}

size_t CDOTAUserMsg_GlobalLightColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlobalLightColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GlobalLightColor)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GlobalLightColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GlobalLightColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GlobalLightColor)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const CDOTAUserMsg_GlobalLightColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlobalLightColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GlobalLightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const CDOTAUserMsg_GlobalLightColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlobalLightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightColor::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightColor::InternalSwap(CDOTAUserMsg_GlobalLightColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, duration_)
      + sizeof(CDOTAUserMsg_GlobalLightColor::duration_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlobalLightColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GlobalLightDirection::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlobalLightDirection>()._has_bits_);
  static const ::CMsgVector& direction(const CDOTAUserMsg_GlobalLightDirection* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_GlobalLightDirection::_Internal::direction(const CDOTAUserMsg_GlobalLightDirection* msg) {
  return *msg->direction_;
}
void CDOTAUserMsg_GlobalLightDirection::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlobalLightDirection)
}
CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::CMsgVector(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlobalLightDirection)
}

void CDOTAUserMsg_GlobalLightDirection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(duration_));
}

CDOTAUserMsg_GlobalLightDirection::~CDOTAUserMsg_GlobalLightDirection() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlobalLightDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GlobalLightDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void CDOTAUserMsg_GlobalLightDirection::ArenaDtor(void* object) {
  CDOTAUserMsg_GlobalLightDirection* _this = reinterpret_cast< CDOTAUserMsg_GlobalLightDirection* >(object);
  (void)_this;
}
void CDOTAUserMsg_GlobalLightDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GlobalLightDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GlobalLightDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlobalLightDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(direction_ != nullptr);
    direction_->Clear();
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlobalLightDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GlobalLightDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlobalLightDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direction(this), target, stream);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlobalLightDirection)
  return target;
}

size_t CDOTAUserMsg_GlobalLightDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlobalLightDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector direction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *direction_);
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GlobalLightDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GlobalLightDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GlobalLightDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GlobalLightDirection)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlobalLightDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_direction()->::CMsgVector::MergeFrom(from._internal_direction());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GlobalLightDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlobalLightDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightDirection::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightDirection::InternalSwap(CDOTAUserMsg_GlobalLightDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, duration_)
      + sizeof(CDOTAUserMsg_GlobalLightDirection::duration_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlobalLightDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_LocationPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_LocationPing>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_LocationPing& location_ping(const CDOTAUserMsg_LocationPing* msg);
  static void set_has_location_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_LocationPing&
CDOTAUserMsg_LocationPing::_Internal::location_ping(const CDOTAUserMsg_LocationPing* msg) {
  return *msg->location_ping_;
}
void CDOTAUserMsg_LocationPing::clear_location_ping() {
  if (location_ping_ != nullptr) location_ping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_LocationPing)
}
CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location_ping()) {
    location_ping_ = new ::CDOTAMsg_LocationPing(*from.location_ping_);
  } else {
    location_ping_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_LocationPing)
}

void CDOTAUserMsg_LocationPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&location_ping_)) + sizeof(player_id_));
}

CDOTAUserMsg_LocationPing::~CDOTAUserMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_LocationPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_LocationPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_ping_;
}

void CDOTAUserMsg_LocationPing::ArenaDtor(void* object) {
  CDOTAUserMsg_LocationPing* _this = reinterpret_cast< CDOTAUserMsg_LocationPing* >(object);
  (void)_this;
}
void CDOTAUserMsg_LocationPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_LocationPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_LocationPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ping_ != nullptr);
    location_ping_->Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_LocationPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_LocationPing location_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_LocationPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_LocationPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location_ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_LocationPing)
  return target;
}

size_t CDOTAUserMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_LocationPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_LocationPing location_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_ping_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_LocationPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_LocationPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_LocationPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_LocationPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_LocationPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_LocationPing::MergeFrom(const CDOTAUserMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from._internal_location_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_LocationPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_LocationPing::CopyFrom(const CDOTAUserMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_LocationPing::InternalSwap(CDOTAUserMsg_LocationPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_LocationPing, player_id_)
      + sizeof(CDOTAUserMsg_LocationPing::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_LocationPing, location_ping_)>(
          reinterpret_cast<char*>(&location_ping_),
          reinterpret_cast<char*>(&other->location_ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_LocationPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PingConfirmation::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PingConfirmation>()._has_bits_);
  static void set_has_player_id_of_original_pinger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_icon_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& location(const CDOTAUserMsg_PingConfirmation* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_PingConfirmation::_Internal::location(const CDOTAUserMsg_PingConfirmation* msg) {
  return *msg->location_;
}
void CDOTAUserMsg_PingConfirmation::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PingConfirmation)
}
CDOTAUserMsg_PingConfirmation::CDOTAUserMsg_PingConfirmation(const CDOTAUserMsg_PingConfirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgVector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&player_id_of_original_pinger_, &from.player_id_of_original_pinger_,
    static_cast<size_t>(reinterpret_cast<char*>(&icon_type_) -
    reinterpret_cast<char*>(&player_id_of_original_pinger_)) + sizeof(icon_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PingConfirmation)
}

void CDOTAUserMsg_PingConfirmation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&icon_type_) -
    reinterpret_cast<char*>(&location_)) + sizeof(icon_type_));
}

CDOTAUserMsg_PingConfirmation::~CDOTAUserMsg_PingConfirmation() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PingConfirmation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PingConfirmation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CDOTAUserMsg_PingConfirmation::ArenaDtor(void* object) {
  CDOTAUserMsg_PingConfirmation* _this = reinterpret_cast< CDOTAUserMsg_PingConfirmation* >(object);
  (void)_this;
}
void CDOTAUserMsg_PingConfirmation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PingConfirmation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PingConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PingConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&player_id_of_original_pinger_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&icon_type_) -
        reinterpret_cast<char*>(&player_id_of_original_pinger_)) + sizeof(icon_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PingConfirmation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id_of_original_pinger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id_of_original_pinger(&has_bits);
          player_id_of_original_pinger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entity_index(&has_bits);
          entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 icon_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_icon_type(&has_bits);
          icon_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PingConfirmation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PingConfirmation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id_of_original_pinger = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id_of_original_pinger(), target);
  }

  // optional uint32 entity_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_index(), target);
  }

  // optional uint32 icon_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_icon_type(), target);
  }

  // optional .CMsgVector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PingConfirmation)
  return target;
}

size_t CDOTAUserMsg_PingConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PingConfirmation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 player_id_of_original_pinger = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id_of_original_pinger());
    }

    // optional uint32 entity_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entity_index());
    }

    // optional uint32 icon_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_icon_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PingConfirmation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PingConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PingConfirmation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PingConfirmation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PingConfirmation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PingConfirmation)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PingConfirmation::MergeFrom(const CDOTAUserMsg_PingConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PingConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgVector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_of_original_pinger_ = from.player_id_of_original_pinger_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_index_ = from.entity_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      icon_type_ = from.icon_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PingConfirmation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PingConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PingConfirmation::CopyFrom(const CDOTAUserMsg_PingConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PingConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PingConfirmation::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PingConfirmation::InternalSwap(CDOTAUserMsg_PingConfirmation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PingConfirmation, icon_type_)
      + sizeof(CDOTAUserMsg_PingConfirmation::icon_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PingConfirmation, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PingConfirmation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_ItemAlert& item_alert(const CDOTAUserMsg_ItemAlert* msg);
  static void set_has_item_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_ItemAlert&
CDOTAUserMsg_ItemAlert::_Internal::item_alert(const CDOTAUserMsg_ItemAlert* msg) {
  return *msg->item_alert_;
}
void CDOTAUserMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != nullptr) item_alert_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemAlert)
}
CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(const CDOTAUserMsg_ItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_alert()) {
    item_alert_ = new ::CDOTAMsg_ItemAlert(*from.item_alert_);
  } else {
    item_alert_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemAlert)
}

void CDOTAUserMsg_ItemAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_alert_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&item_alert_)) + sizeof(player_id_));
}

CDOTAUserMsg_ItemAlert::~CDOTAUserMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_alert_;
}

void CDOTAUserMsg_ItemAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_ItemAlert* _this = reinterpret_cast< CDOTAUserMsg_ItemAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_ItemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_alert_ != nullptr);
    item_alert_->Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_ItemAlert item_alert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_alert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ItemAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_ItemAlert item_alert = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_alert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemAlert)
  return target;
}

size_t CDOTAUserMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_ItemAlert item_alert = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_alert_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ItemAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const CDOTAUserMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item_alert()->::CDOTAMsg_ItemAlert::MergeFrom(from._internal_item_alert());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const CDOTAUserMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemAlert::InternalSwap(CDOTAUserMsg_ItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, player_id_)
      + sizeof(CDOTAUserMsg_ItemAlert::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, item_alert_)>(
          reinterpret_cast<char*>(&item_alert_),
          reinterpret_cast<char*>(&other->item_alert_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_EnemyItemAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EnemyItemAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rune_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_primary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EnemyItemAlert)
}
CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(const CDOTAUserMsg_EnemyItemAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_charges_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(secondary_charges_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EnemyItemAlert)
}

void CDOTAUserMsg_EnemyItemAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
rune_type_ = -1;
item_level_ = -1;
primary_charges_ = -1;
secondary_charges_ = -1;
}

CDOTAUserMsg_EnemyItemAlert::~CDOTAUserMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EnemyItemAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_EnemyItemAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_EnemyItemAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_EnemyItemAlert* _this = reinterpret_cast< CDOTAUserMsg_EnemyItemAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_EnemyItemAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_EnemyItemAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EnemyItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
    rune_type_ = -1;
    item_level_ = -1;
    primary_charges_ = -1;
    secondary_charges_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EnemyItemAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rune_type = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rune_type(&has_bits);
          rune_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_entity_id(&has_bits);
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_level = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_item_level(&has_bits);
          item_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 primary_charges = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_primary_charges(&has_bits);
          primary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_secondary_charges(&has_bits);
          secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_EnemyItemAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EnemyItemAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 item_ability_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_ability_id(), target);
  }

  // optional int32 rune_type = 4 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rune_type(), target);
  }

  // optional int32 entity_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_entity_id(), target);
  }

  // optional int32 item_level = 6 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_item_level(), target);
  }

  // optional int32 primary_charges = 7 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_primary_charges(), target);
  }

  // optional int32 secondary_charges = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_secondary_charges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAUserMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EnemyItemAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_player_id());
    }

    // optional int32 item_ability_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional int32 entity_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_id());
    }

    // optional int32 rune_type = 4 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rune_type());
    }

    // optional int32 item_level = 6 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_level());
    }

    // optional int32 primary_charges = 7 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primary_charges());
    }

    // optional int32 secondary_charges = 8 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_secondary_charges());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_EnemyItemAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_EnemyItemAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_EnemyItemAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_EnemyItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      entity_id_ = from.entity_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rune_type_ = from.rune_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      primary_charges_ = from.primary_charges_;
    }
    if (cached_has_bits & 0x00000080u) {
      secondary_charges_ = from.secondary_charges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EnemyItemAlert::InternalSwap(CDOTAUserMsg_EnemyItemAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, entity_id_)
      + sizeof(CDOTAUserMsg_EnemyItemAlert::entity_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
  swap(rune_type_, other->rune_type_);
  swap(item_level_, other->item_level_);
  swap(primary_charges_, other->primary_charges_);
  swap(secondary_charges_, other->secondary_charges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EnemyItemAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ModifierAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ModifierAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_debuff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ModifierAlert)
}
CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(const CDOTAUserMsg_ModifierAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_class_name()) {
    class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_name(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_remaining_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ModifierAlert)
}

void CDOTAUserMsg_ModifierAlert::SharedCtor() {
class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_remaining_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(seconds_remaining_));
}

CDOTAUserMsg_ModifierAlert::~CDOTAUserMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ModifierAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ModifierAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ModifierAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_ModifierAlert* _this = reinterpret_cast< CDOTAUserMsg_ModifierAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_ModifierAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ModifierAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ModifierAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    class_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_remaining_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ModifierAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string class_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ModifierAlert.class_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stack_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stack_count(&has_bits);
          stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_debuff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_debuff(&has_bits);
          is_debuff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float seconds_remaining = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ModifierAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ModifierAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ModifierAlert.class_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_name(), target);
  }

  // optional uint32 stack_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stack_count(), target);
  }

  // optional bool is_debuff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_debuff(), target);
  }

  // optional uint32 target_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_entindex(), target);
  }

  // optional float seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_seconds_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ModifierAlert)
  return target;
}

size_t CDOTAUserMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ModifierAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string class_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_name());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 stack_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stack_count());
    }

    // optional bool is_debuff = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 target_entindex = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional float seconds_remaining = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ModifierAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ModifierAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ModifierAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ModifierAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const CDOTAUserMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_debuff_ = from.is_debuff_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const CDOTAUserMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ModifierAlert::InternalSwap(CDOTAUserMsg_ModifierAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  class_name_.Swap(&other->class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, seconds_remaining_)
      + sizeof(CDOTAUserMsg_ModifierAlert::seconds_remaining_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ModifierAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HPManaAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HPManaAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_raw_values(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HPManaAlert)
}
CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(const CDOTAUserMsg_HPManaAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_raw_values_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(show_raw_values_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HPManaAlert)
}

void CDOTAUserMsg_HPManaAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_raw_values_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(show_raw_values_));
}

CDOTAUserMsg_HPManaAlert::~CDOTAUserMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HPManaAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HPManaAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HPManaAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_HPManaAlert* _this = reinterpret_cast< CDOTAUserMsg_HPManaAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_HPManaAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HPManaAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HPManaAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_raw_values_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(show_raw_values_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HPManaAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_raw_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_raw_values(&has_bits);
          show_raw_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HPManaAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HPManaAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  // optional bool show_raw_values = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_raw_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HPManaAlert)
  return target;
}

size_t CDOTAUserMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HPManaAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional bool show_raw_values = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HPManaAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HPManaAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HPManaAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HPManaAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const CDOTAUserMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_raw_values_ = from.show_raw_values_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const CDOTAUserMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HPManaAlert::InternalSwap(CDOTAUserMsg_HPManaAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, show_raw_values_)
      + sizeof(CDOTAUserMsg_HPManaAlert::show_raw_values_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HPManaAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GlyphAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GlyphAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GlyphAlert)
}
CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(const CDOTAUserMsg_GlyphAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GlyphAlert)
}

void CDOTAUserMsg_GlyphAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
}

CDOTAUserMsg_GlyphAlert::~CDOTAUserMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GlyphAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GlyphAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_GlyphAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_GlyphAlert* _this = reinterpret_cast< CDOTAUserMsg_GlyphAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_GlyphAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GlyphAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GlyphAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&negative_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GlyphAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool negative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GlyphAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GlyphAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GlyphAlert)
  return target;
}

size_t CDOTAUserMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GlyphAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional bool negative = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlyphAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GlyphAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GlyphAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GlyphAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const CDOTAUserMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      negative_ = from.negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const CDOTAUserMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlyphAlert::InternalSwap(CDOTAUserMsg_GlyphAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, negative_)
      + sizeof(CDOTAUserMsg_GlyphAlert::negative_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GlyphAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_RadarAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RadarAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RadarAlert)
}
CDOTAUserMsg_RadarAlert::CDOTAUserMsg_RadarAlert(const CDOTAUserMsg_RadarAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RadarAlert)
}

void CDOTAUserMsg_RadarAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
}

CDOTAUserMsg_RadarAlert::~CDOTAUserMsg_RadarAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RadarAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_RadarAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_RadarAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_RadarAlert* _this = reinterpret_cast< CDOTAUserMsg_RadarAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_RadarAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_RadarAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_RadarAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RadarAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&negative_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(negative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RadarAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool negative = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_negative(&has_bits);
          negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_RadarAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RadarAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_negative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RadarAlert)
  return target;
}

size_t CDOTAUserMsg_RadarAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RadarAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional bool negative = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_RadarAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_RadarAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_RadarAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_RadarAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_RadarAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_RadarAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_RadarAlert::MergeFrom(const CDOTAUserMsg_RadarAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RadarAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      negative_ = from.negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_RadarAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_RadarAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_RadarAlert::CopyFrom(const CDOTAUserMsg_RadarAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RadarAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RadarAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RadarAlert::InternalSwap(CDOTAUserMsg_RadarAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RadarAlert, negative_)
      + sizeof(CDOTAUserMsg_RadarAlert::negative_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RadarAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RadarAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_WillPurchaseAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WillPurchaseAlert>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gold_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_suggestion_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WillPurchaseAlert)
}
CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(const CDOTAUserMsg_WillPurchaseAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WillPurchaseAlert)
}

void CDOTAUserMsg_WillPurchaseAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
}

CDOTAUserMsg_WillPurchaseAlert::~CDOTAUserMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WillPurchaseAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_WillPurchaseAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_WillPurchaseAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_WillPurchaseAlert* _this = reinterpret_cast< CDOTAUserMsg_WillPurchaseAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_WillPurchaseAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WillPurchaseAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&suggestion_player_id_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(suggestion_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WillPurchaseAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gold_remaining(&has_bits);
          gold_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 suggestion_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_suggestion_player_id(&has_bits);
          suggestion_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_WillPurchaseAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WillPurchaseAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 gold_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_suggestion_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAUserMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WillPurchaseAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional int32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional uint32 gold_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_remaining());
    }

    // optional int32 suggestion_player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_suggestion_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WillPurchaseAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_WillPurchaseAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_WillPurchaseAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_WillPurchaseAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_remaining_ = from.gold_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      suggestion_player_id_ = from.suggestion_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WillPurchaseAlert::InternalSwap(CDOTAUserMsg_WillPurchaseAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, suggestion_player_id_)
      + sizeof(CDOTAUserMsg_WillPurchaseAlert::suggestion_player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, item_ability_id_)>(
          reinterpret_cast<char*>(&item_ability_id_),
          reinterpret_cast<char*>(&other->item_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WillPurchaseAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_EmptyTeleportAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EmptyTeleportAlert>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EmptyTeleportAlert)
}
CDOTAUserMsg_EmptyTeleportAlert::CDOTAUserMsg_EmptyTeleportAlert(const CDOTAUserMsg_EmptyTeleportAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_seconds_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EmptyTeleportAlert)
}

void CDOTAUserMsg_EmptyTeleportAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_seconds_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
}

CDOTAUserMsg_EmptyTeleportAlert::~CDOTAUserMsg_EmptyTeleportAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EmptyTeleportAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_EmptyTeleportAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_EmptyTeleportAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_EmptyTeleportAlert* _this = reinterpret_cast< CDOTAUserMsg_EmptyTeleportAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_EmptyTeleportAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_EmptyTeleportAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_EmptyTeleportAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EmptyTeleportAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_seconds_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EmptyTeleportAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cooldown_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_EmptyTeleportAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EmptyTeleportAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 cooldown_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cooldown_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EmptyTeleportAlert)
  return target;
}

size_t CDOTAUserMsg_EmptyTeleportAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EmptyTeleportAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional int32 cooldown_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cooldown_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_EmptyTeleportAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_EmptyTeleportAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_EmptyTeleportAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_EmptyTeleportAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_EmptyTeleportAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_EmptyTeleportAlert::MergeFrom(const CDOTAUserMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_seconds_ = from.cooldown_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_EmptyTeleportAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_EmptyTeleportAlert::CopyFrom(const CDOTAUserMsg_EmptyTeleportAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EmptyTeleportAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EmptyTeleportAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EmptyTeleportAlert::InternalSwap(CDOTAUserMsg_EmptyTeleportAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyTeleportAlert, cooldown_seconds_)
      + sizeof(CDOTAUserMsg_EmptyTeleportAlert::cooldown_seconds_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyTeleportAlert, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EmptyTeleportAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MarsArenaOfBloodAttack::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MarsArenaOfBloodAttack>()._has_bits_);
  static void set_has_source_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_warrior_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
}
CDOTAUserMsg_MarsArenaOfBloodAttack::CDOTAUserMsg_MarsArenaOfBloodAttack(const CDOTAUserMsg_MarsArenaOfBloodAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_ehandle_, &from.source_ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&warrior_index_) -
    reinterpret_cast<char*>(&source_ehandle_)) + sizeof(warrior_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&warrior_index_) -
    reinterpret_cast<char*>(&source_ehandle_)) + sizeof(warrior_index_));
}

CDOTAUserMsg_MarsArenaOfBloodAttack::~CDOTAUserMsg_MarsArenaOfBloodAttack() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MarsArenaOfBloodAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::ArenaDtor(void* object) {
  CDOTAUserMsg_MarsArenaOfBloodAttack* _this = reinterpret_cast< CDOTAUserMsg_MarsArenaOfBloodAttack* >(object);
  (void)_this;
}
void CDOTAUserMsg_MarsArenaOfBloodAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MarsArenaOfBloodAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&source_ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&warrior_index_) -
        reinterpret_cast<char*>(&source_ehandle_)) + sizeof(warrior_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MarsArenaOfBloodAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_ehandle(&has_bits);
          source_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_ehandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 warrior_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_warrior_index(&has_bits);
          warrior_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MarsArenaOfBloodAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_ehandle(), target);
  }

  // optional int32 target_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional int32 warrior_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_warrior_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MarsArenaOfBloodAttack)
  return target;
}

size_t CDOTAUserMsg_MarsArenaOfBloodAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 source_ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_ehandle());
    }

    // optional int32 target_ehandle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_ehandle());
    }

    // optional int32 warrior_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_warrior_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MarsArenaOfBloodAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MarsArenaOfBloodAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MarsArenaOfBloodAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MarsArenaOfBloodAttack)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::MergeFrom(const CDOTAUserMsg_MarsArenaOfBloodAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_ehandle_ = from.source_ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ehandle_ = from.target_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      warrior_index_ = from.warrior_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::CopyFrom(const CDOTAUserMsg_MarsArenaOfBloodAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MarsArenaOfBloodAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MarsArenaOfBloodAttack::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MarsArenaOfBloodAttack::InternalSwap(CDOTAUserMsg_MarsArenaOfBloodAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MarsArenaOfBloodAttack, warrior_index_)
      + sizeof(CDOTAUserMsg_MarsArenaOfBloodAttack::warrior_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MarsArenaOfBloodAttack, source_ehandle_)>(
          reinterpret_cast<char*>(&source_ehandle_),
          reinterpret_cast<char*>(&other->source_ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MarsArenaOfBloodAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAEntityMsg_InvokerSpellCast::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAEntityMsg_InvokerSpellCast>()._has_bits_);
  static const ::CEntityMsg& entity_msg(const CDOTAEntityMsg_InvokerSpellCast* msg);
  static void set_has_entity_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cast_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CEntityMsg&
CDOTAEntityMsg_InvokerSpellCast::_Internal::entity_msg(const CDOTAEntityMsg_InvokerSpellCast* msg) {
  return *msg->entity_msg_;
}
void CDOTAEntityMsg_InvokerSpellCast::clear_entity_msg() {
  if (entity_msg_ != nullptr) entity_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAEntityMsg_InvokerSpellCast)
}
CDOTAEntityMsg_InvokerSpellCast::CDOTAEntityMsg_InvokerSpellCast(const CDOTAEntityMsg_InvokerSpellCast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_msg()) {
    entity_msg_ = new ::CEntityMsg(*from.entity_msg_);
  } else {
    entity_msg_ = nullptr;
  }
  cast_activity_ = from.cast_activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAEntityMsg_InvokerSpellCast)
}

void CDOTAEntityMsg_InvokerSpellCast::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cast_activity_) -
    reinterpret_cast<char*>(&entity_msg_)) + sizeof(cast_activity_));
}

CDOTAEntityMsg_InvokerSpellCast::~CDOTAEntityMsg_InvokerSpellCast() {
  // @@protoc_insertion_point(destructor:CDOTAEntityMsg_InvokerSpellCast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAEntityMsg_InvokerSpellCast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_msg_;
}

void CDOTAEntityMsg_InvokerSpellCast::ArenaDtor(void* object) {
  CDOTAEntityMsg_InvokerSpellCast* _this = reinterpret_cast< CDOTAEntityMsg_InvokerSpellCast* >(object);
  (void)_this;
}
void CDOTAEntityMsg_InvokerSpellCast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAEntityMsg_InvokerSpellCast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAEntityMsg_InvokerSpellCast::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAEntityMsg_InvokerSpellCast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(entity_msg_ != nullptr);
    entity_msg_->Clear();
  }
  cast_activity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAEntityMsg_InvokerSpellCast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CEntityMsg entity_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cast_activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cast_activity(&has_bits);
          cast_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAEntityMsg_InvokerSpellCast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAEntityMsg_InvokerSpellCast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEntityMsg entity_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_msg(this), target, stream);
  }

  // optional int32 cast_activity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cast_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAEntityMsg_InvokerSpellCast)
  return target;
}

size_t CDOTAEntityMsg_InvokerSpellCast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAEntityMsg_InvokerSpellCast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEntityMsg entity_msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_msg_);
    }

    // optional int32 cast_activity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cast_activity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAEntityMsg_InvokerSpellCast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAEntityMsg_InvokerSpellCast)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAEntityMsg_InvokerSpellCast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAEntityMsg_InvokerSpellCast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAEntityMsg_InvokerSpellCast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAEntityMsg_InvokerSpellCast)
    MergeFrom(*source);
  }
}

void CDOTAEntityMsg_InvokerSpellCast::MergeFrom(const CDOTAEntityMsg_InvokerSpellCast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAEntityMsg_InvokerSpellCast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_entity_msg()->::CEntityMsg::MergeFrom(from._internal_entity_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      cast_activity_ = from.cast_activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAEntityMsg_InvokerSpellCast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAEntityMsg_InvokerSpellCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAEntityMsg_InvokerSpellCast::CopyFrom(const CDOTAEntityMsg_InvokerSpellCast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAEntityMsg_InvokerSpellCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAEntityMsg_InvokerSpellCast::IsInitialized() const {
  return true;
}

void CDOTAEntityMsg_InvokerSpellCast::InternalSwap(CDOTAEntityMsg_InvokerSpellCast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAEntityMsg_InvokerSpellCast, cast_activity_)
      + sizeof(CDOTAEntityMsg_InvokerSpellCast::cast_activity_)
      - PROTOBUF_FIELD_OFFSET(CDOTAEntityMsg_InvokerSpellCast, entity_msg_)>(
          reinterpret_cast<char*>(&entity_msg_),
          reinterpret_cast<char*>(&other->entity_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAEntityMsg_InvokerSpellCast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_BuyBackStateAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BuyBackStateAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BuyBackStateAlert)
}
CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(const CDOTAUserMsg_BuyBackStateAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BuyBackStateAlert)
}

void CDOTAUserMsg_BuyBackStateAlert::SharedCtor() {
player_id_ = 0;
}

CDOTAUserMsg_BuyBackStateAlert::~CDOTAUserMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BuyBackStateAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_BuyBackStateAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_BuyBackStateAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_BuyBackStateAlert* _this = reinterpret_cast< CDOTAUserMsg_BuyBackStateAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_BuyBackStateAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BuyBackStateAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BuyBackStateAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_BuyBackStateAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BuyBackStateAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAUserMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BuyBackStateAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BuyBackStateAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_BuyBackStateAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_BuyBackStateAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_BuyBackStateAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BuyBackStateAlert::InternalSwap(CDOTAUserMsg_BuyBackStateAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BuyBackStateAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_QuickBuyAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QuickBuyAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gold_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_show_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QuickBuyAlert)
}
CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(const CDOTAUserMsg_QuickBuyAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_buyback_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(show_buyback_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QuickBuyAlert)
}

void CDOTAUserMsg_QuickBuyAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_buyback_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(show_buyback_));
}

CDOTAUserMsg_QuickBuyAlert::~CDOTAUserMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QuickBuyAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_QuickBuyAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_QuickBuyAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_QuickBuyAlert* _this = reinterpret_cast< CDOTAUserMsg_QuickBuyAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_QuickBuyAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_QuickBuyAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QuickBuyAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_buyback_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(show_buyback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QuickBuyAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gold_cost(&has_bits);
          gold_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_cooldown_seconds(&has_bits);
          item_cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_buyback = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_show_buyback(&has_bits);
          show_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_QuickBuyAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QuickBuyAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 item_ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_ability_id(), target);
  }

  // optional int32 gold_cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold_cost(), target);
  }

  // optional int32 item_cooldown_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_item_cooldown_seconds(), target);
  }

  // optional bool show_buyback = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_show_buyback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAUserMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QuickBuyAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 item_ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional int32 gold_cost = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_cost());
    }

    // optional int32 item_cooldown_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_cooldown_seconds());
    }

    // optional bool show_buyback = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QuickBuyAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_QuickBuyAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_QuickBuyAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_QuickBuyAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_cost_ = from.gold_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_cooldown_seconds_ = from.item_cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      show_buyback_ = from.show_buyback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QuickBuyAlert::InternalSwap(CDOTAUserMsg_QuickBuyAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, show_buyback_)
      + sizeof(CDOTAUserMsg_QuickBuyAlert::show_buyback_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QuickBuyAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CourierKilledAlert_LostItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CourierKilledAlert_LostItem>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
}
CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(const CDOTAUserMsg_CourierKilledAlert_LostItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(quantity_));
}

CDOTAUserMsg_CourierKilledAlert_LostItem::~CDOTAUserMsg_CourierKilledAlert_LostItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CourierKilledAlert.LostItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::ArenaDtor(void* object) {
  CDOTAUserMsg_CourierKilledAlert_LostItem* _this = reinterpret_cast< CDOTAUserMsg_CourierKilledAlert_LostItem* >(object);
  (void)_this;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CourierKilledAlert_LostItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CourierKilledAlert_LostItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CourierKilledAlert.LostItem)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert_LostItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 item_ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_ability_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CourierKilledAlert_LostItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CourierKilledAlert_LostItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CourierKilledAlert.LostItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CourierKilledAlert.LostItem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::MergeFrom(const CDOTAUserMsg_CourierKilledAlert_LostItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::CopyFrom(const CDOTAUserMsg_CourierKilledAlert_LostItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert_LostItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::InternalSwap(CDOTAUserMsg_CourierKilledAlert_LostItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, quantity_)
      + sizeof(CDOTAUserMsg_CourierKilledAlert_LostItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, item_ability_id_)>(
          reinterpret_cast<char*>(&item_ability_id_),
          reinterpret_cast<char*>(&other->item_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CourierKilledAlert_LostItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CourierKilledAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CourierKilledAlert>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gold_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owning_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lost_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CourierKilledAlert)
}
CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(const CDOTAUserMsg_CourierKilledAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lost_items_(from.lost_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&owning_player_id_) -
    reinterpret_cast<char*>(&team_)) + sizeof(owning_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CourierKilledAlert)
}

void CDOTAUserMsg_CourierKilledAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owning_player_id_) -
    reinterpret_cast<char*>(&team_)) + sizeof(owning_player_id_));
}

CDOTAUserMsg_CourierKilledAlert::~CDOTAUserMsg_CourierKilledAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CourierKilledAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CourierKilledAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_CourierKilledAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_CourierKilledAlert* _this = reinterpret_cast< CDOTAUserMsg_CourierKilledAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_CourierKilledAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CourierKilledAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CourierKilledAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CourierKilledAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lost_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owning_player_id_) -
        reinterpret_cast<char*>(&team_)) + sizeof(owning_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CourierKilledAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gold_value(&has_bits);
          gold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lost_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 killer_player_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_killer_player_id(&has_bits);
          killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 owning_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_owning_player_id(&has_bits);
          owning_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CourierKilledAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CourierKilledAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional uint32 gold_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold_value(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  // optional int32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lost_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_lost_items(i), target, stream);
  }

  // optional int32 killer_player_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_killer_player_id(), target);
  }

  // optional int32 owning_player_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_owning_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CourierKilledAlert)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CourierKilledAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  total_size += 1UL * this->_internal_lost_items_size();
  for (const auto& msg : this->lost_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 gold_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_value());
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional int32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timestamp());
    }

    // optional int32 killer_player_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_killer_player_id());
    }

    // optional int32 owning_player_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_owning_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CourierKilledAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CourierKilledAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CourierKilledAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CourierKilledAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CourierKilledAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CourierKilledAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lost_items_.MergeFrom(from.lost_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_value_ = from.gold_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      killer_player_id_ = from.killer_player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      owning_player_id_ = from.owning_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CourierKilledAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CourierKilledAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert::InternalSwap(CDOTAUserMsg_CourierKilledAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lost_items_.InternalSwap(&other->lost_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, owning_player_id_)
      + sizeof(CDOTAUserMsg_CourierKilledAlert::owning_player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CourierKilledAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MinimapEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MinimapEvent>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MinimapEvent)
}
CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entity_handle_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(target_entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapEvent)
}

void CDOTAUserMsg_MinimapEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entity_handle_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(target_entity_handle_));
}

CDOTAUserMsg_MinimapEvent::~CDOTAUserMsg_MinimapEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MinimapEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MinimapEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_MinimapEvent* _this = reinterpret_cast< CDOTAUserMsg_MinimapEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_MinimapEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MinimapEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MinimapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MinimapEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entity_handle_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(target_entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MinimapEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_entity_handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_entity_handle(&has_bits);
          target_entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MinimapEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_type(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entity_handle(), target);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  // optional int32 duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_duration(), target);
  }

  // optional int32 target_entity_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_target_entity_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapEvent)
  return target;
}

size_t CDOTAUserMsg_MinimapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MinimapEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 event_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_event_type());
    }

    // optional int32 entity_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional int32 x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 duration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_duration());
    }

    // optional int32 target_entity_handle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_entity_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MinimapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MinimapEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MinimapEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MinimapEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const CDOTAUserMsg_MinimapEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MinimapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_entity_handle_ = from.target_entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MinimapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const CDOTAUserMsg_MinimapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MinimapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapEvent::InternalSwap(CDOTAUserMsg_MinimapEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, target_entity_handle_)
      + sizeof(CDOTAUserMsg_MinimapEvent::target_entity_handle_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, event_type_)>(
          reinterpret_cast<char*>(&event_type_),
          reinterpret_cast<char*>(&other->event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MinimapEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MapLine>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_MapLine& mapline(const CDOTAUserMsg_MapLine* msg);
  static void set_has_mapline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_MapLine&
CDOTAUserMsg_MapLine::_Internal::mapline(const CDOTAUserMsg_MapLine* msg) {
  return *msg->mapline_;
}
void CDOTAUserMsg_MapLine::clear_mapline() {
  if (mapline_ != nullptr) mapline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MapLine)
}
CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapline()) {
    mapline_ = new ::CDOTAMsg_MapLine(*from.mapline_);
  } else {
    mapline_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MapLine)
}

void CDOTAUserMsg_MapLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&mapline_)) + sizeof(player_id_));
}

CDOTAUserMsg_MapLine::~CDOTAUserMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MapLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mapline_;
}

void CDOTAUserMsg_MapLine::ArenaDtor(void* object) {
  CDOTAUserMsg_MapLine* _this = reinterpret_cast< CDOTAUserMsg_MapLine* >(object);
  (void)_this;
}
void CDOTAUserMsg_MapLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mapline_ != nullptr);
    mapline_->Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MapLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_MapLine mapline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MapLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MapLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_MapLine mapline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mapline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MapLine)
  return target;
}

size_t CDOTAUserMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MapLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_MapLine mapline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapline_);
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MapLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MapLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MapLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MapLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MapLine::MergeFrom(const CDOTAUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from._internal_mapline());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MapLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MapLine::CopyFrom(const CDOTAUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MapLine::InternalSwap(CDOTAUserMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MapLine, player_id_)
      + sizeof(CDOTAUserMsg_MapLine::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MapLine, mapline_)>(
          reinterpret_cast<char*>(&mapline_),
          reinterpret_cast<char*>(&other->mapline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MapLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MinimapDebugPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MinimapDebugPoint>()._has_bits_);
  static const ::CMsgVector& location(const CDOTAUserMsg_MinimapDebugPoint* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_MinimapDebugPoint::_Internal::location(const CDOTAUserMsg_MinimapDebugPoint* msg) {
  return *msg->location_;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MinimapDebugPoint)
}
CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgVector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&color_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MinimapDebugPoint)
}

void CDOTAUserMsg_MinimapDebugPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&location_)) + sizeof(index_));
}

CDOTAUserMsg_MinimapDebugPoint::~CDOTAUserMsg_MinimapDebugPoint() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MinimapDebugPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MinimapDebugPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CDOTAUserMsg_MinimapDebugPoint::ArenaDtor(void* object) {
  CDOTAUserMsg_MinimapDebugPoint* _this = reinterpret_cast< CDOTAUserMsg_MinimapDebugPoint* >(object);
  (void)_this;
}
void CDOTAUserMsg_MinimapDebugPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MinimapDebugPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MinimapDebugPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MinimapDebugPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&color_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MinimapDebugPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MinimapDebugPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MinimapDebugPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  // optional int32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MinimapDebugPoint)
  return target;
}

size_t CDOTAUserMsg_MinimapDebugPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MinimapDebugPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional int32 size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MinimapDebugPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapDebugPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MinimapDebugPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MinimapDebugPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MinimapDebugPoint)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MinimapDebugPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgVector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MinimapDebugPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MinimapDebugPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapDebugPoint::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapDebugPoint::InternalSwap(CDOTAUserMsg_MinimapDebugPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, index_)
      + sizeof(CDOTAUserMsg_MinimapDebugPoint::index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MinimapDebugPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CreateLinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CreateLinearProjectile>()._has_bits_);
  static const ::CMsgVector& origin(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector2D& velocity(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_particle_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgVector2D& acceleration(const CDOTAUserMsg_CreateLinearProjectile* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fow_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sticky_fow_reveal(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_CreateLinearProjectile::_Internal::origin(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->origin_;
}
const ::CMsgVector2D&
CDOTAUserMsg_CreateLinearProjectile::_Internal::velocity(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->velocity_;
}
const ::CMsgVector2D&
CDOTAUserMsg_CreateLinearProjectile::_Internal::acceleration(const CDOTAUserMsg_CreateLinearProjectile* msg) {
  return *msg->acceleration_;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CreateLinearProjectile)
}
CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::CMsgVector2D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::CMsgVector2D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  ::memcpy(&particle_index_, &from.particle_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorgemcolor_) -
    reinterpret_cast<char*>(&particle_index_)) + sizeof(colorgemcolor_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CreateLinearProjectile)
}

void CDOTAUserMsg_CreateLinearProjectile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colorgemcolor_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(colorgemcolor_));
}

CDOTAUserMsg_CreateLinearProjectile::~CDOTAUserMsg_CreateLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CreateLinearProjectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CreateLinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void CDOTAUserMsg_CreateLinearProjectile::ArenaDtor(void* object) {
  CDOTAUserMsg_CreateLinearProjectile* _this = reinterpret_cast< CDOTAUserMsg_CreateLinearProjectile* >(object);
  (void)_this;
}
void CDOTAUserMsg_CreateLinearProjectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CreateLinearProjectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CreateLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CreateLinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&particle_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fow_radius_) -
        reinterpret_cast<char*>(&particle_index_)) + sizeof(fow_radius_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&sticky_fow_reveal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colorgemcolor_) -
        reinterpret_cast<char*>(&sticky_fow_reveal_)) + sizeof(colorgemcolor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CreateLinearProjectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector2D velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 particle_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_particle_index(&has_bits);
          particle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector2D acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fow_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fow_radius(&has_bits);
          fow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool sticky_fow_reveal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_sticky_fow_reveal(&has_bits);
          sticky_fow_reveal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CreateLinearProjectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CreateLinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // optional .CMsgVector2D velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  // optional int32 entindex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_entindex(), target);
  }

  // optional uint64 particle_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_particle_index(), target);
  }

  // optional int32 handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_handle(), target);
  }

  // optional .CMsgVector2D acceleration = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::acceleration(this), target, stream);
  }

  // optional float max_speed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_speed(), target);
  }

  // optional float fow_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fow_radius(), target);
  }

  // optional bool sticky_fow_reveal = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_sticky_fow_reveal(), target);
  }

  // optional float distance = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_distance(), target);
  }

  // optional fixed32 colorgemcolor = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(12, this->_internal_colorgemcolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CreateLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_CreateLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CreateLinearProjectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .CMsgVector2D velocity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .CMsgVector2D acceleration = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional uint64 particle_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_particle_index());
    }

    // optional int32 entindex = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional int32 handle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_handle());
    }

    // optional float max_speed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float fow_radius = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool sticky_fow_reveal = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float distance = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CreateLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CreateLinearProjectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CreateLinearProjectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CreateLinearProjectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CreateLinearProjectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CreateLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgVector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::CMsgVector2D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::CMsgVector2D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      particle_index_ = from.particle_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      fow_radius_ = from.fow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      sticky_fow_reveal_ = from.sticky_fow_reveal_;
    }
    if (cached_has_bits & 0x00000200u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000400u) {
      colorgemcolor_ = from.colorgemcolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CreateLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CreateLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CreateLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CreateLinearProjectile::InternalSwap(CDOTAUserMsg_CreateLinearProjectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, colorgemcolor_)
      + sizeof(CDOTAUserMsg_CreateLinearProjectile::colorgemcolor_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CreateLinearProjectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_DestroyLinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DestroyLinearProjectile>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DestroyLinearProjectile)
}
CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DestroyLinearProjectile)
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedCtor() {
handle_ = 0;
}

CDOTAUserMsg_DestroyLinearProjectile::~CDOTAUserMsg_DestroyLinearProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DestroyLinearProjectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_DestroyLinearProjectile::ArenaDtor(void* object) {
  CDOTAUserMsg_DestroyLinearProjectile* _this = reinterpret_cast< CDOTAUserMsg_DestroyLinearProjectile* >(object);
  (void)_this;
}
void CDOTAUserMsg_DestroyLinearProjectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_DestroyLinearProjectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_DestroyLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DestroyLinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DestroyLinearProjectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_DestroyLinearProjectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DestroyLinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DestroyLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_DestroyLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DestroyLinearProjectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DestroyLinearProjectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_DestroyLinearProjectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_DestroyLinearProjectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_DestroyLinearProjectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_set_handle(from._internal_handle());
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DestroyLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DestroyLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DestroyLinearProjectile::InternalSwap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DestroyLinearProjectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_DodgeTrackingProjectiles::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DodgeTrackingProjectiles>()._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attacks_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}
CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entindex_, &from.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&attacks_only_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(attacks_only_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DodgeTrackingProjectiles)
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attacks_only_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(attacks_only_));
}

CDOTAUserMsg_DodgeTrackingProjectiles::~CDOTAUserMsg_DodgeTrackingProjectiles() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DodgeTrackingProjectiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::ArenaDtor(void* object) {
  CDOTAUserMsg_DodgeTrackingProjectiles* _this = reinterpret_cast< CDOTAUserMsg_DodgeTrackingProjectiles* >(object);
  (void)_this;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_DodgeTrackingProjectiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attacks_only_) -
        reinterpret_cast<char*>(&entindex_)) + sizeof(attacks_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DodgeTrackingProjectiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool attacks_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attacks_only(&has_bits);
          attacks_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_DodgeTrackingProjectiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional bool attacks_only = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_attacks_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DodgeTrackingProjectiles)
  return target;
}

size_t CDOTAUserMsg_DodgeTrackingProjectiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  size_t total_size = 0;

  // required int32 entindex = 1;
  if (_internal_has_entindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool attacks_only = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DodgeTrackingProjectiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_DodgeTrackingProjectiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_DodgeTrackingProjectiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_DodgeTrackingProjectiles)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      attacks_only_ = from.attacks_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DodgeTrackingProjectiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::InternalSwap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, attacks_only_)
      + sizeof(CDOTAUserMsg_DodgeTrackingProjectiles::attacks_only_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, entindex_)>(
          reinterpret_cast<char*>(&entindex_),
          reinterpret_cast<char*>(&other->entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DodgeTrackingProjectiles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SpectatorPlayerClick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpectatorPlayerClick>()._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpectatorPlayerClick)
}
CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entindex_, &from.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_index_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(target_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerClick)
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_index_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(target_index_));
}

CDOTAUserMsg_SpectatorPlayerClick::~CDOTAUserMsg_SpectatorPlayerClick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerClick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SpectatorPlayerClick::ArenaDtor(void* object) {
  CDOTAUserMsg_SpectatorPlayerClick* _this = reinterpret_cast< CDOTAUserMsg_SpectatorPlayerClick* >(object);
  (void)_this;
}
void CDOTAUserMsg_SpectatorPlayerClick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SpectatorPlayerClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SpectatorPlayerClick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpectatorPlayerClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_index_) -
        reinterpret_cast<char*>(&entindex_)) + sizeof(target_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpectatorPlayerClick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order_type(&has_bits);
          order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_index(&has_bits);
          target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SpectatorPlayerClick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_order_type(), target);
  }

  // optional int32 target_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerClick)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpectatorPlayerClick)
  size_t total_size = 0;

  // required int32 entindex = 1;
  if (_internal_has_entindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entindex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 order_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_order_type());
    }

    // optional int32 target_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerClick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SpectatorPlayerClick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SpectatorPlayerClick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SpectatorPlayerClick)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_index_ = from.target_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpectatorPlayerClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerClick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SpectatorPlayerClick::InternalSwap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, target_index_)
      + sizeof(CDOTAUserMsg_SpectatorPlayerClick::target_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, entindex_)>(
          reinterpret_cast<char*>(&entindex_),
          reinterpret_cast<char*>(&other->entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpectatorPlayerClick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SpectatorPlayerUnitOrders::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpectatorPlayerUnitOrders>()._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& position(const CDOTAUserMsg_SpectatorPlayerUnitOrders* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_SpectatorPlayerUnitOrders::_Internal::position(const CDOTAUserMsg_SpectatorPlayerUnitOrders* msg) {
  return *msg->position_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}
CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&entindex_, &from.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&position_)) + sizeof(flags_));
}

CDOTAUserMsg_SpectatorPlayerUnitOrders::~CDOTAUserMsg_SpectatorPlayerUnitOrders() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::ArenaDtor(void* object) {
  CDOTAUserMsg_SpectatorPlayerUnitOrders* _this = reinterpret_cast< CDOTAUserMsg_SpectatorPlayerUnitOrders* >(object);
  (void)_this;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&entindex_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpectatorPlayerUnitOrders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_order_type(&has_bits);
          order_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_target_index(&has_bits);
          target_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool queue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_queue(&has_bits);
          queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SpectatorPlayerUnitOrders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_order_type(), target);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_units(i), target);
  }

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_index(), target);
  }

  // optional int32 ability_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional .CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_queue(), target);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerUnitOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector position = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 entindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional int32 order_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_order_type());
    }

    // optional int32 target_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_index());
    }

    // optional int32 ability_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_id());
    }

    // optional bool queue = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerUnitOrders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SpectatorPlayerUnitOrders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SpectatorPlayerUnitOrders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SpectatorPlayerUnitOrders)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      queue_ = from.queue_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::InternalSwap(CDOTAUserMsg_SpectatorPlayerUnitOrders* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, flags_)
      + sizeof(CDOTAUserMsg_SpectatorPlayerUnitOrders::flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpectatorPlayerUnitOrders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_NevermoreRequiem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_NevermoreRequiem>()._has_bits_);
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lines(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& origin(const CDOTAUserMsg_NevermoreRequiem* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_NevermoreRequiem::_Internal::origin(const CDOTAUserMsg_NevermoreRequiem* msg) {
  return *msg->origin_;
}
void CDOTAUserMsg_NevermoreRequiem::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_NevermoreRequiem)
}
CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&entity_handle_, &from.entity_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&entity_handle_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_NevermoreRequiem)
}

void CDOTAUserMsg_NevermoreRequiem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(reverse_));
}

CDOTAUserMsg_NevermoreRequiem::~CDOTAUserMsg_NevermoreRequiem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_NevermoreRequiem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_NevermoreRequiem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
}

void CDOTAUserMsg_NevermoreRequiem::ArenaDtor(void* object) {
  CDOTAUserMsg_NevermoreRequiem* _this = reinterpret_cast< CDOTAUserMsg_NevermoreRequiem* >(object);
  (void)_this;
}
void CDOTAUserMsg_NevermoreRequiem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_NevermoreRequiem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_NevermoreRequiem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_NevermoreRequiem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(origin_ != nullptr);
    origin_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&entity_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_) -
        reinterpret_cast<char*>(&entity_handle_)) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_NevermoreRequiem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity_handle(&has_bits);
          entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lines(&has_bits);
          lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reverse(&has_bits);
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_NevermoreRequiem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_NevermoreRequiem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_handle(), target);
  }

  // optional int32 lines = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lines(), target);
  }

  // optional .CMsgVector origin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::origin(this), target, stream);
  }

  // optional bool reverse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_NevermoreRequiem)
  return target;
}

size_t CDOTAUserMsg_NevermoreRequiem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_NevermoreRequiem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector origin = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional int32 entity_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_handle());
    }

    // optional int32 lines = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lines());
    }

    // optional bool reverse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_NevermoreRequiem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_NevermoreRequiem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_NevermoreRequiem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_NevermoreRequiem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_NevermoreRequiem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_NevermoreRequiem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgVector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      lines_ = from.lines_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_NevermoreRequiem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_NevermoreRequiem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NevermoreRequiem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_NevermoreRequiem::InternalSwap(CDOTAUserMsg_NevermoreRequiem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, reverse_)
      + sizeof(CDOTAUserMsg_NevermoreRequiem::reverse_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_NevermoreRequiem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_InvalidCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_InvalidCommand>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_InvalidCommand)
}
CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_InvalidCommand)
}

void CDOTAUserMsg_InvalidCommand::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_InvalidCommand::~CDOTAUserMsg_InvalidCommand() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_InvalidCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_InvalidCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_InvalidCommand::ArenaDtor(void* object) {
  CDOTAUserMsg_InvalidCommand* _this = reinterpret_cast< CDOTAUserMsg_InvalidCommand* >(object);
  (void)_this;
}
void CDOTAUserMsg_InvalidCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_InvalidCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_InvalidCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_InvalidCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_InvalidCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_InvalidCommand.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_InvalidCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_InvalidCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_InvalidCommand.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_InvalidCommand)
  return target;
}

size_t CDOTAUserMsg_InvalidCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_InvalidCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_InvalidCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_InvalidCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_InvalidCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_InvalidCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_InvalidCommand)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const CDOTAUserMsg_InvalidCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_InvalidCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_InvalidCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const CDOTAUserMsg_InvalidCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_InvalidCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_InvalidCommand::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_InvalidCommand::InternalSwap(CDOTAUserMsg_InvalidCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_InvalidCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HudError::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HudError>()._has_bits_);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HudError)
}
CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HudError)
}

void CDOTAUserMsg_HudError::SharedCtor() {
order_id_ = 0;
}

CDOTAUserMsg_HudError::~CDOTAUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HudError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HudError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HudError::ArenaDtor(void* object) {
  CDOTAUserMsg_HudError* _this = reinterpret_cast< CDOTAUserMsg_HudError* >(object);
  (void)_this;
}
void CDOTAUserMsg_HudError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HudError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HudError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HudError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_order_id(&has_bits);
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HudError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HudError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HudError)
  return target;
}

size_t CDOTAUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HudError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 order_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HudError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HudError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HudError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HudError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HudError)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HudError::MergeFrom(const CDOTAUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order_id()) {
    _internal_set_order_id(from._internal_order_id());
  }
}

void CDOTAUserMsg_HudError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HudError::CopyFrom(const CDOTAUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HudError::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HudError::InternalSwap(CDOTAUserMsg_HudError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_id_, other->order_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HudError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SharedCooldown::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SharedCooldown>()._has_bits_);
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SharedCooldown)
}
CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&entindex_, &from.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_index_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(name_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SharedCooldown)
}

void CDOTAUserMsg_SharedCooldown::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&name_index_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(name_index_));
}

CDOTAUserMsg_SharedCooldown::~CDOTAUserMsg_SharedCooldown() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SharedCooldown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SharedCooldown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SharedCooldown::ArenaDtor(void* object) {
  CDOTAUserMsg_SharedCooldown* _this = reinterpret_cast< CDOTAUserMsg_SharedCooldown* >(object);
  (void)_this;
}
void CDOTAUserMsg_SharedCooldown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SharedCooldown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SharedCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SharedCooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_index_) -
        reinterpret_cast<char*>(&entindex_)) + sizeof(name_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SharedCooldown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_SharedCooldown.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cooldown(&has_bits);
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 name_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_name_index(&has_bits);
          name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SharedCooldown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SharedCooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entindex(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SharedCooldown.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional float cooldown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cooldown(), target);
  }

  // optional int32 name_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_name_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SharedCooldown)
  return target;
}

size_t CDOTAUserMsg_SharedCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SharedCooldown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 entindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional float cooldown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 name_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_name_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SharedCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SharedCooldown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SharedCooldown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SharedCooldown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SharedCooldown)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const CDOTAUserMsg_SharedCooldown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SharedCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      name_index_ = from.name_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SharedCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const CDOTAUserMsg_SharedCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SharedCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SharedCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SharedCooldown::InternalSwap(CDOTAUserMsg_SharedCooldown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_index_)
      + sizeof(CDOTAUserMsg_SharedCooldown::name_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, entindex_)>(
          reinterpret_cast<char*>(&entindex_),
          reinterpret_cast<char*>(&other->entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SharedCooldown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SetNextAutobuyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SetNextAutobuyItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SetNextAutobuyItem)
}
CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SetNextAutobuyItem)
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_SetNextAutobuyItem::~CDOTAUserMsg_SetNextAutobuyItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SetNextAutobuyItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SetNextAutobuyItem::ArenaDtor(void* object) {
  CDOTAUserMsg_SetNextAutobuyItem* _this = reinterpret_cast< CDOTAUserMsg_SetNextAutobuyItem* >(object);
  (void)_this;
}
void CDOTAUserMsg_SetNextAutobuyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SetNextAutobuyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SetNextAutobuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SetNextAutobuyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SetNextAutobuyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_SetNextAutobuyItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SetNextAutobuyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SetNextAutobuyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SetNextAutobuyItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SetNextAutobuyItem)
  return target;
}

size_t CDOTAUserMsg_SetNextAutobuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SetNextAutobuyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SetNextAutobuyItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SetNextAutobuyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SetNextAutobuyItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SetNextAutobuyItem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SetNextAutobuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SetNextAutobuyItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SetNextAutobuyItem::InternalSwap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SetNextAutobuyItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HalloweenDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HalloweenDrops>()._has_bits_);
  static void set_has_prize_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_defs_(arena),
  player_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HalloweenDrops)
}
CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(const CDOTAUserMsg_HalloweenDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      player_ids_(from.player_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HalloweenDrops)
}

void CDOTAUserMsg_HalloweenDrops::SharedCtor() {
prize_list_ = 0u;
}

CDOTAUserMsg_HalloweenDrops::~CDOTAUserMsg_HalloweenDrops() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HalloweenDrops)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HalloweenDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HalloweenDrops::ArenaDtor(void* object) {
  CDOTAUserMsg_HalloweenDrops* _this = reinterpret_cast< CDOTAUserMsg_HalloweenDrops* >(object);
  (void)_this;
}
void CDOTAUserMsg_HalloweenDrops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HalloweenDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HalloweenDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HalloweenDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  player_ids_.Clear();
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HalloweenDrops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_defs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prize_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prize_list(&has_bits);
          prize_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HalloweenDrops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HalloweenDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_defs(i), target);
  }

  // repeated uint32 player_ids = 2;
  for (int i = 0, n = this->_internal_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prize_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HalloweenDrops)
  return target;
}

size_t CDOTAUserMsg_HalloweenDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HalloweenDrops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated uint32 player_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prize_list());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HalloweenDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HalloweenDrops* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HalloweenDrops>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HalloweenDrops)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HalloweenDrops)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const CDOTAUserMsg_HalloweenDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HalloweenDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  player_ids_.MergeFrom(from.player_ids_);
  if (from._internal_has_prize_list()) {
    _internal_set_prize_list(from._internal_prize_list());
  }
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HalloweenDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const CDOTAUserMsg_HalloweenDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HalloweenDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HalloweenDrops::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HalloweenDrops::InternalSwap(CDOTAUserMsg_HalloweenDrops* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  player_ids_.InternalSwap(&other->player_ids_);
  swap(prize_list_, other->prize_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HalloweenDrops::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PredictionResult_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PredictionResult_Prediction>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_fails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  granted_item_defs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PredictionResult.Prediction)
}
CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(const CDOTAUserMsg_PredictionResult_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      granted_item_defs_(from.granted_item_defs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult.Prediction)
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_fails_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
result_ = 1;
}

CDOTAUserMsg_PredictionResult_Prediction::~CDOTAUserMsg_PredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult.Prediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_PredictionResult_Prediction::ArenaDtor(void* object) {
  CDOTAUserMsg_PredictionResult_Prediction* _this = reinterpret_cast< CDOTAUserMsg_PredictionResult_Prediction* >(object);
  (void)_this;
}
void CDOTAUserMsg_PredictionResult_Prediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PredictionResult_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PredictionResult.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  granted_item_defs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fails_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(num_fails_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PredictionResult_Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_correct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_correct(&has_bits);
          num_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_fails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_fails(&has_bits);
          num_fails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CDOTAUserMsg_PredictionResult_Prediction_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 granted_item_defs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PredictionResult_Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_fails(), target);
  }

  // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->_internal_granted_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_granted_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult.Prediction)
  return target;
}

size_t CDOTAUserMsg_PredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PredictionResult.Prediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->granted_item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_granted_item_defs_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 num_correct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_correct());
    }

    // optional uint32 num_fails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_fails());
    }

    // optional .CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult_Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PredictionResult_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PredictionResult.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PredictionResult.Prediction)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_correct_ = from.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fails_ = from.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult_Prediction::InternalSwap(CDOTAUserMsg_PredictionResult_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  granted_item_defs_.InternalSwap(&other->granted_item_defs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, num_fails_)
      + sizeof(CDOTAUserMsg_PredictionResult_Prediction::num_fails_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PredictionResult_Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PredictionResult>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PredictionResult)
}
CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(const CDOTAUserMsg_PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PredictionResult)
}

void CDOTAUserMsg_PredictionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
}

CDOTAUserMsg_PredictionResult::~CDOTAUserMsg_PredictionResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PredictionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_PredictionResult::ArenaDtor(void* object) {
  CDOTAUserMsg_PredictionResult* _this = reinterpret_cast< CDOTAUserMsg_PredictionResult* >(object);
  (void)_this;
}
void CDOTAUserMsg_PredictionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PredictionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correct_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(correct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PredictionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_correct(&has_bits);
          correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PredictionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PredictionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_correct(), target);
  }

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_predictions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PredictionResult)
  return target;
}

size_t CDOTAUserMsg_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PredictionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PredictionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PredictionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PredictionResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const CDOTAUserMsg_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      correct_ = from.correct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const CDOTAUserMsg_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult::InternalSwap(CDOTAUserMsg_PredictionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_.InternalSwap(&other->predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, correct_)
      + sizeof(CDOTAUserMsg_PredictionResult::correct_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PredictionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAResponseQuerySerialized_Fact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAResponseQuerySerialized_Fact>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_stringtable_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_int_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000022) ^ 0x00000022) != 0;
  }
};

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAResponseQuerySerialized.Fact)
}
CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val_string()) {
    val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val_string(), 
      GetArena());
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&valtype_) -
    reinterpret_cast<char*>(&key_)) + sizeof(valtype_));
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized.Fact)
}

void CDOTAResponseQuerySerialized_Fact::SharedCtor() {
val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_int_numeric_) -
    reinterpret_cast<char*>(&key_)) + sizeof(val_int_numeric_));
valtype_ = 1;
}

CDOTAResponseQuerySerialized_Fact::~CDOTAResponseQuerySerialized_Fact() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized.Fact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAResponseQuerySerialized_Fact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAResponseQuerySerialized_Fact::ArenaDtor(void* object) {
  CDOTAResponseQuerySerialized_Fact* _this = reinterpret_cast< CDOTAResponseQuerySerialized_Fact* >(object);
  (void)_this;
}
void CDOTAResponseQuerySerialized_Fact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAResponseQuerySerialized_Fact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAResponseQuerySerialized_Fact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAResponseQuerySerialized.Fact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_int_numeric_) -
        reinterpret_cast<char*>(&key_)) + sizeof(val_int_numeric_));
    valtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAResponseQuerySerialized_Fact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(val))) {
            _internal_set_valtype(static_cast<::CDOTAResponseQuerySerialized_Fact_ValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float val_numeric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_val_numeric(&has_bits);
          val_numeric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string val_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_val_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAResponseQuerySerialized.Fact.val_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val_stringtable_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_val_stringtable_index(&has_bits);
          val_stringtable_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 val_int_numeric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_val_int_numeric(&has_bits);
          val_int_numeric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAResponseQuerySerialized_Fact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized.Fact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_valtype(), target);
  }

  // optional float val_numeric = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_val_numeric(), target);
  }

  // optional string val_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAResponseQuerySerialized.Fact.val_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_val_string(), target);
  }

  // optional int32 val_stringtable_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_stringtable_index(), target);
  }

  // optional sint32 val_int_numeric = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_val_int_numeric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized.Fact)
  return target;
}

size_t CDOTAResponseQuerySerialized_Fact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  if (_internal_has_valtype()) {
    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valtype());
  }

  return total_size;
}
size_t CDOTAResponseQuerySerialized_Fact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000022) ^ 0x00000022) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());

    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_valtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string val_string = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val_string());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional float val_numeric = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_stringtable_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_stringtable_index());
    }

    // optional sint32 val_int_numeric = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_val_int_numeric());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAResponseQuerySerialized.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized_Fact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAResponseQuerySerialized_Fact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAResponseQuerySerialized.Fact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAResponseQuerySerialized.Fact)
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const CDOTAResponseQuerySerialized_Fact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAResponseQuerySerialized.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_numeric_ = from.val_numeric_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_stringtable_index_ = from.val_stringtable_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_int_numeric_ = from.val_int_numeric_;
    }
    if (cached_has_bits & 0x00000020u) {
      valtype_ = from.valtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAResponseQuerySerialized.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const CDOTAResponseQuerySerialized_Fact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAResponseQuerySerialized.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized_Fact::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAResponseQuerySerialized_Fact::InternalSwap(CDOTAResponseQuerySerialized_Fact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_string_.Swap(&other->val_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_int_numeric_)
      + sizeof(CDOTAResponseQuerySerialized_Fact::val_int_numeric_)
      - PROTOBUF_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
  swap(valtype_, other->valtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAResponseQuerySerialized_Fact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAResponseQuerySerialized::_Internal {
 public:
};

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  facts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAResponseQuerySerialized)
}
CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      facts_(from.facts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAResponseQuerySerialized)
}

void CDOTAResponseQuerySerialized::SharedCtor() {
}

CDOTAResponseQuerySerialized::~CDOTAResponseQuerySerialized() {
  // @@protoc_insertion_point(destructor:CDOTAResponseQuerySerialized)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAResponseQuerySerialized::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAResponseQuerySerialized::ArenaDtor(void* object) {
  CDOTAResponseQuerySerialized* _this = reinterpret_cast< CDOTAResponseQuerySerialized* >(object);
  (void)_this;
}
void CDOTAResponseQuerySerialized::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAResponseQuerySerialized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAResponseQuerySerialized::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAResponseQuerySerialized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  facts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAResponseQuerySerialized::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAResponseQuerySerialized::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAResponseQuerySerialized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_facts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_facts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAResponseQuerySerialized)
  return target;
}

size_t CDOTAResponseQuerySerialized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAResponseQuerySerialized)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  total_size += 1UL * this->_internal_facts_size();
  for (const auto& msg : this->facts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAResponseQuerySerialized::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAResponseQuerySerialized)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAResponseQuerySerialized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAResponseQuerySerialized)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAResponseQuerySerialized)
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized::MergeFrom(const CDOTAResponseQuerySerialized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAResponseQuerySerialized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facts_.MergeFrom(from.facts_);
}

void CDOTAResponseQuerySerialized::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAResponseQuerySerialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized::CopyFrom(const CDOTAResponseQuerySerialized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAResponseQuerySerialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(facts_)) return false;
  return true;
}

void CDOTAResponseQuerySerialized::InternalSwap(CDOTAResponseQuerySerialized* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  facts_.InternalSwap(&other->facts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAResponseQuerySerialized::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTASpeechMatchOnClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTASpeechMatchOnClient>()._has_bits_);
  static void set_has_speech_concept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recipient_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAResponseQuerySerialized& responsequery(const CDOTASpeechMatchOnClient* msg);
  static void set_has_responsequery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_randomseed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CDOTAResponseQuerySerialized&
CDOTASpeechMatchOnClient::_Internal::responsequery(const CDOTASpeechMatchOnClient* msg) {
  return *msg->responsequery_;
}
CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTASpeechMatchOnClient)
}
CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responsequery()) {
    responsequery_ = new ::CDOTAResponseQuerySerialized(*from.responsequery_);
  } else {
    responsequery_ = nullptr;
  }
  ::memcpy(&speech_concept_, &from.speech_concept_,
    static_cast<size_t>(reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&speech_concept_)) + sizeof(randomseed_));
  // @@protoc_insertion_point(copy_constructor:CDOTASpeechMatchOnClient)
}

void CDOTASpeechMatchOnClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&responsequery_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&responsequery_)) + sizeof(randomseed_));
}

CDOTASpeechMatchOnClient::~CDOTASpeechMatchOnClient() {
  // @@protoc_insertion_point(destructor:CDOTASpeechMatchOnClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTASpeechMatchOnClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responsequery_;
}

void CDOTASpeechMatchOnClient::ArenaDtor(void* object) {
  CDOTASpeechMatchOnClient* _this = reinterpret_cast< CDOTASpeechMatchOnClient* >(object);
  (void)_this;
}
void CDOTASpeechMatchOnClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTASpeechMatchOnClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTASpeechMatchOnClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASpeechMatchOnClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(responsequery_ != nullptr);
    responsequery_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&speech_concept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&randomseed_) -
        reinterpret_cast<char*>(&speech_concept_)) + sizeof(randomseed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTASpeechMatchOnClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 speech_concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_speech_concept(&has_bits);
          speech_concept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recipient_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recipient_type(&has_bits);
          recipient_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAResponseQuerySerialized responsequery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_responsequery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 randomseed = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_randomseed(&has_bits);
          randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTASpeechMatchOnClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASpeechMatchOnClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 speech_concept = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speech_concept(), target);
  }

  // optional int32 recipient_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_recipient_type(), target);
  }

  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::responsequery(this), target, stream);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(4, this->_internal_randomseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASpeechMatchOnClient)
  return target;
}

size_t CDOTASpeechMatchOnClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASpeechMatchOnClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDOTAResponseQuerySerialized responsequery = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *responsequery_);
    }

    // optional int32 speech_concept = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speech_concept());
    }

    // optional int32 recipient_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_recipient_type());
    }

    // optional sfixed32 randomseed = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTASpeechMatchOnClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTASpeechMatchOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASpeechMatchOnClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTASpeechMatchOnClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTASpeechMatchOnClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTASpeechMatchOnClient)
    MergeFrom(*source);
  }
}

void CDOTASpeechMatchOnClient::MergeFrom(const CDOTASpeechMatchOnClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTASpeechMatchOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_responsequery()->::CDOTAResponseQuerySerialized::MergeFrom(from._internal_responsequery());
    }
    if (cached_has_bits & 0x00000002u) {
      speech_concept_ = from.speech_concept_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_type_ = from.recipient_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      randomseed_ = from.randomseed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASpeechMatchOnClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTASpeechMatchOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASpeechMatchOnClient::CopyFrom(const CDOTASpeechMatchOnClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASpeechMatchOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASpeechMatchOnClient::IsInitialized() const {
  if (_internal_has_responsequery()) {
    if (!responsequery_->IsInitialized()) return false;
  }
  return true;
}

void CDOTASpeechMatchOnClient::InternalSwap(CDOTASpeechMatchOnClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTASpeechMatchOnClient, randomseed_)
      + sizeof(CDOTASpeechMatchOnClient::randomseed_)
      - PROTOBUF_FIELD_OFFSET(CDOTASpeechMatchOnClient, responsequery_)>(
          reinterpret_cast<char*>(&responsequery_),
          reinterpret_cast<char*>(&other->responsequery_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTASpeechMatchOnClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_Interval::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_Interval>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.Interval)
}
CDOTAUserMsg_UnitEvent_Interval::CDOTAUserMsg_UnitEvent_Interval(const CDOTAUserMsg_UnitEvent_Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&start_)) + sizeof(range_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.Interval)
}

void CDOTAUserMsg_UnitEvent_Interval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&start_)) + sizeof(range_));
}

CDOTAUserMsg_UnitEvent_Interval::~CDOTAUserMsg_UnitEvent_Interval() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.Interval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_Interval::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_Interval* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_Interval* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_Interval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_) -
        reinterpret_cast<char*>(&start_)) + sizeof(range_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_Interval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_Interval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_start(), target);
  }

  // optional float range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.Interval)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.Interval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_Interval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_Interval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_Interval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.Interval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.Interval)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_Interval::MergeFrom(const CDOTAUserMsg_UnitEvent_Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_ = from.range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_Interval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Interval::CopyFrom(const CDOTAUserMsg_UnitEvent_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Interval::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_Interval::InternalSwap(CDOTAUserMsg_UnitEvent_Interval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Interval, range_)
      + sizeof(CDOTAUserMsg_UnitEvent_Interval::range_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Interval, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_Interval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_Speech::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_Speech>()._has_bits_);
  static void set_has_speech_concept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recipient_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_muteable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CDOTAUserMsg_UnitEvent_Interval& predelay(const CDOTAUserMsg_UnitEvent_Speech* msg);
  static void set_has_predelay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CDOTAUserMsg_UnitEvent_Interval&
CDOTAUserMsg_UnitEvent_Speech::_Internal::predelay(const CDOTAUserMsg_UnitEvent_Speech* msg) {
  return *msg->predelay_;
}
CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.Speech)
}
CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_response()) {
    response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response(), 
      GetArena());
  }
  if (from._internal_has_predelay()) {
    predelay_ = new ::CDOTAUserMsg_UnitEvent_Interval(*from.predelay_);
  } else {
    predelay_ = nullptr;
  }
  ::memcpy(&speech_concept_, &from.speech_concept_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&speech_concept_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.Speech)
}

void CDOTAUserMsg_UnitEvent_Speech::SharedCtor() {
response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predelay_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&predelay_)) + sizeof(flags_));
}

CDOTAUserMsg_UnitEvent_Speech::~CDOTAUserMsg_UnitEvent_Speech() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.Speech)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_Speech::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete predelay_;
}

void CDOTAUserMsg_UnitEvent_Speech::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_Speech* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_Speech* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_Speech::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_Speech::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_Speech::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.Speech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(predelay_ != nullptr);
      predelay_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&speech_concept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&speech_concept_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_Speech::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 speech_concept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_speech_concept(&has_bits);
          speech_concept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_UnitEvent.Speech.response");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recipient_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recipient_type(&has_bits);
          recipient_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool muteable = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_muteable(&has_bits);
          muteable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_predelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_Speech::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.Speech)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 speech_concept = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speech_concept(), target);
  }

  // optional string response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_UnitEvent.Speech.response");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response(), target);
  }

  // optional int32 recipient_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_recipient_type(), target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // optional bool muteable = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_muteable(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::predelay(this), target, stream);
  }

  // optional uint32 flags = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.Speech)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_Speech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.Speech)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string response = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response());
    }

    // optional .CDOTAUserMsg_UnitEvent.Interval predelay = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *predelay_);
    }

    // optional int32 speech_concept = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_speech_concept());
    }

    // optional int32 recipient_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_recipient_type());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional bool muteable = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 flags = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.Speech)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_Speech* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_Speech>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.Speech)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.Speech)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.Speech)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_response(from._internal_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_predelay()->::CDOTAUserMsg_UnitEvent_Interval::MergeFrom(from._internal_predelay());
    }
    if (cached_has_bits & 0x00000004u) {
      speech_concept_ = from.speech_concept_;
    }
    if (cached_has_bits & 0x00000008u) {
      recipient_type_ = from.recipient_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      muteable_ = from.muteable_;
    }
    if (cached_has_bits & 0x00000040u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Speech::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_Speech::InternalSwap(CDOTAUserMsg_UnitEvent_Speech* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, flags_)
      + sizeof(CDOTAUserMsg_UnitEvent_Speech::flags_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, predelay_)>(
          reinterpret_cast<char*>(&predelay_),
          reinterpret_cast<char*>(&other->predelay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_Speech::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_SpeechMute::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_SpeechMute>()._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}
CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.SpeechMute)
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedCtor() {
delay_ = 0.5f;
}

CDOTAUserMsg_UnitEvent_SpeechMute::~CDOTAUserMsg_UnitEvent_SpeechMute() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.SpeechMute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_SpeechMute* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_SpeechMute* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_SpeechMute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_SpeechMute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delay_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_SpeechMute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float delay = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_SpeechMute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delay = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.SpeechMute)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_SpeechMute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float delay = 1 [default = 0.5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_SpeechMute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_SpeechMute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.SpeechMute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.SpeechMute)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delay()) {
    _internal_set_delay(from._internal_delay());
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.SpeechMute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::InternalSwap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_SpeechMute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_AddGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_AddGesture>()._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fade_in(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fade_out(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sequence_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}
CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activity_, &from.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&playback_rate_) -
    reinterpret_cast<char*>(&activity_)) + sizeof(playback_rate_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.AddGesture)
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_variant_) -
    reinterpret_cast<char*>(&activity_)) + sizeof(sequence_variant_));
fade_out_ = 0.1f;
playback_rate_ = 1;
}

CDOTAUserMsg_UnitEvent_AddGesture::~CDOTAUserMsg_UnitEvent_AddGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.AddGesture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_AddGesture::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_AddGesture* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_AddGesture* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_AddGesture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_AddGesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_AddGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.AddGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_variant_) -
        reinterpret_cast<char*>(&activity_)) + sizeof(sequence_variant_));
    fade_out_ = 0.1f;
    playback_rate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_AddGesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fade_in = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_fade_in(&has_bits);
          fade_in_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fade_out = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_fade_out(&has_bits);
          fade_out_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float playback_rate = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_playback_rate(&has_bits);
          playback_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sequence_variant(&has_bits);
          sequence_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_AddGesture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.AddGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional float fade_in = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fade_in(), target);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fade_out(), target);
  }

  // optional float playback_rate = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_playback_rate(), target);
  }

  // optional int32 sequence_variant = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sequence_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.AddGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_AddGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.AddGesture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_activity());
    }

    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
    }

    // optional float fade_in = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 sequence_variant = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_variant());
    }

    // optional float fade_out = 4 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float playback_rate = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_AddGesture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_AddGesture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.AddGesture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.AddGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      fade_in_ = from.fade_in_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_variant_ = from.sequence_variant_;
    }
    if (cached_has_bits & 0x00000010u) {
      fade_out_ = from.fade_out_;
    }
    if (cached_has_bits & 0x00000020u) {
      playback_rate_ = from.playback_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.AddGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_AddGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_AddGesture::InternalSwap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, sequence_variant_)
      + sizeof(CDOTAUserMsg_UnitEvent_AddGesture::sequence_variant_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, activity_)>(
          reinterpret_cast<char*>(&activity_),
          reinterpret_cast<char*>(&other->activity_));
  swap(fade_out_, other->fade_out_);
  swap(playback_rate_, other->playback_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_AddGesture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_RemoveGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_RemoveGesture>()._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}
CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedCtor() {
activity_ = 0;
}

CDOTAUserMsg_UnitEvent_RemoveGesture::~CDOTAUserMsg_UnitEvent_RemoveGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.RemoveGesture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_RemoveGesture* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_RemoveGesture* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_RemoveGesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_RemoveGesture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.RemoveGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_RemoveGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 activity = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_RemoveGesture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_RemoveGesture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.RemoveGesture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.RemoveGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity()) {
    _internal_set_activity(from._internal_activity());
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::InternalSwap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activity_, other->activity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_RemoveGesture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_BloodImpact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_BloodImpact>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}
CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_normal_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(y_normal_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.BloodImpact)
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_normal_) -
    reinterpret_cast<char*>(&scale_)) + sizeof(y_normal_));
}

CDOTAUserMsg_UnitEvent_BloodImpact::~CDOTAUserMsg_UnitEvent_BloodImpact() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.BloodImpact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_BloodImpact* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_BloodImpact* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_BloodImpact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_normal_) -
        reinterpret_cast<char*>(&scale_)) + sizeof(y_normal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_BloodImpact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x_normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x_normal(&has_bits);
          x_normal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y_normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y_normal(&has_bits);
          y_normal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_BloodImpact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scale(), target);
  }

  // optional int32 x_normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_normal(), target);
  }

  // optional int32 y_normal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_normal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.BloodImpact)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_BloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scale());
    }

    // optional int32 x_normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x_normal());
    }

    // optional int32 y_normal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y_normal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_BloodImpact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_BloodImpact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.BloodImpact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.BloodImpact)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_normal_ = from.x_normal_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_normal_ = from.y_normal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.BloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::InternalSwap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, y_normal_)
      + sizeof(CDOTAUserMsg_UnitEvent_BloodImpact::y_normal_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_BloodImpact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent_FadeGesture::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent_FadeGesture>()._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}
CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent.FadeGesture)
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedCtor() {
activity_ = 0;
}

CDOTAUserMsg_UnitEvent_FadeGesture::~CDOTAUserMsg_UnitEvent_FadeGesture() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent.FadeGesture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent_FadeGesture* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent_FadeGesture* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent_FadeGesture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent_FadeGesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent_FadeGesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent_FadeGesture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_activity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent.FadeGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_FadeGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 activity = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_FadeGesture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent_FadeGesture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent.FadeGesture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent.FadeGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activity()) {
    _internal_set_activity(from._internal_activity());
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent.FadeGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::InternalSwap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activity_, other->activity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent_FadeGesture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UnitEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UnitEvent>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CDOTAUserMsg_UnitEvent_Speech& speech(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAUserMsg_UnitEvent_SpeechMute& speech_mute(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAUserMsg_UnitEvent_AddGesture& add_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_add_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAUserMsg_UnitEvent_RemoveGesture& remove_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_remove_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDOTAUserMsg_UnitEvent_BloodImpact& blood_impact(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_blood_impact(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CDOTAUserMsg_UnitEvent_FadeGesture& fade_gesture(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_fade_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CDOTASpeechMatchOnClient& speech_match_on_client(const CDOTAUserMsg_UnitEvent* msg);
  static void set_has_speech_match_on_client(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000180) ^ 0x00000180) != 0;
  }
};

const ::CDOTAUserMsg_UnitEvent_Speech&
CDOTAUserMsg_UnitEvent::_Internal::speech(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->speech_;
}
const ::CDOTAUserMsg_UnitEvent_SpeechMute&
CDOTAUserMsg_UnitEvent::_Internal::speech_mute(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->speech_mute_;
}
const ::CDOTAUserMsg_UnitEvent_AddGesture&
CDOTAUserMsg_UnitEvent::_Internal::add_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->add_gesture_;
}
const ::CDOTAUserMsg_UnitEvent_RemoveGesture&
CDOTAUserMsg_UnitEvent::_Internal::remove_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->remove_gesture_;
}
const ::CDOTAUserMsg_UnitEvent_BloodImpact&
CDOTAUserMsg_UnitEvent::_Internal::blood_impact(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->blood_impact_;
}
const ::CDOTAUserMsg_UnitEvent_FadeGesture&
CDOTAUserMsg_UnitEvent::_Internal::fade_gesture(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->fade_gesture_;
}
const ::CDOTASpeechMatchOnClient&
CDOTAUserMsg_UnitEvent::_Internal::speech_match_on_client(const CDOTAUserMsg_UnitEvent* msg) {
  return *msg->speech_match_on_client_;
}
CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UnitEvent)
}
CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_speech()) {
    speech_ = new ::CDOTAUserMsg_UnitEvent_Speech(*from.speech_);
  } else {
    speech_ = nullptr;
  }
  if (from._internal_has_speech_mute()) {
    speech_mute_ = new ::CDOTAUserMsg_UnitEvent_SpeechMute(*from.speech_mute_);
  } else {
    speech_mute_ = nullptr;
  }
  if (from._internal_has_add_gesture()) {
    add_gesture_ = new ::CDOTAUserMsg_UnitEvent_AddGesture(*from.add_gesture_);
  } else {
    add_gesture_ = nullptr;
  }
  if (from._internal_has_remove_gesture()) {
    remove_gesture_ = new ::CDOTAUserMsg_UnitEvent_RemoveGesture(*from.remove_gesture_);
  } else {
    remove_gesture_ = nullptr;
  }
  if (from._internal_has_blood_impact()) {
    blood_impact_ = new ::CDOTAUserMsg_UnitEvent_BloodImpact(*from.blood_impact_);
  } else {
    blood_impact_ = nullptr;
  }
  if (from._internal_has_fade_gesture()) {
    fade_gesture_ = new ::CDOTAUserMsg_UnitEvent_FadeGesture(*from.fade_gesture_);
  } else {
    fade_gesture_ = nullptr;
  }
  if (from._internal_has_speech_match_on_client()) {
    speech_match_on_client_ = new ::CDOTASpeechMatchOnClient(*from.speech_match_on_client_);
  } else {
    speech_match_on_client_ = nullptr;
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(entity_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UnitEvent)
}

void CDOTAUserMsg_UnitEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&speech_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&speech_)) + sizeof(entity_index_));
}

CDOTAUserMsg_UnitEvent::~CDOTAUserMsg_UnitEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UnitEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UnitEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete speech_;
  if (this != internal_default_instance()) delete speech_mute_;
  if (this != internal_default_instance()) delete add_gesture_;
  if (this != internal_default_instance()) delete remove_gesture_;
  if (this != internal_default_instance()) delete blood_impact_;
  if (this != internal_default_instance()) delete fade_gesture_;
  if (this != internal_default_instance()) delete speech_match_on_client_;
}

void CDOTAUserMsg_UnitEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_UnitEvent* _this = reinterpret_cast< CDOTAUserMsg_UnitEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_UnitEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UnitEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UnitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UnitEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(speech_ != nullptr);
      speech_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speech_mute_ != nullptr);
      speech_mute_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_gesture_ != nullptr);
      add_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(remove_gesture_ != nullptr);
      remove_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(blood_impact_ != nullptr);
      blood_impact_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(fade_gesture_ != nullptr);
      fade_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(speech_match_on_client_ != nullptr);
      speech_match_on_client_->Clear();
    }
  }
  msg_type_ = 0;
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UnitEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDotaEntityMessages_IsValid(val))) {
            _internal_set_msg_type(static_cast<::EDotaEntityMessages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entity_index(&has_bits);
          entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_mute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_blood_impact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fade_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_speech_match_on_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UnitEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UnitEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // required int32 entity_index = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entity_index(), target);
  }

  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::speech(this), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::speech_mute(this), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_gesture(this), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::remove_gesture(this), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::blood_impact(this), target, stream);
  }

  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fade_gesture(this), target, stream);
  }

  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::speech_match_on_client(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UnitEvent)
  return target;
}

size_t CDOTAUserMsg_UnitEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (_internal_has_msg_type()) {
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  if (_internal_has_entity_index()) {
    // required int32 entity_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_index());
  }

  return total_size;
}
size_t CDOTAUserMsg_UnitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000180) ^ 0x00000180) == 0) {  // All required fields are present.
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());

    // required int32 entity_index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entity_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speech_);
    }

    // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speech_mute_);
    }

    // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_gesture_);
    }

    // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remove_gesture_);
    }

    // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blood_impact_);
    }

    // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fade_gesture_);
    }

    // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speech_match_on_client_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UnitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UnitEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UnitEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UnitEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const CDOTAUserMsg_UnitEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UnitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_speech()->::CDOTAUserMsg_UnitEvent_Speech::MergeFrom(from._internal_speech());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speech_mute()->::CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(from._internal_speech_mute());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_add_gesture()->::CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(from._internal_add_gesture());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_remove_gesture()->::CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(from._internal_remove_gesture());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_blood_impact()->::CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(from._internal_blood_impact());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_fade_gesture()->::CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(from._internal_fade_gesture());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_speech_match_on_client()->::CDOTASpeechMatchOnClient::MergeFrom(from._internal_speech_match_on_client());
    }
    if (cached_has_bits & 0x00000080u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_entity_index(from._internal_entity_index());
  }
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UnitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const CDOTAUserMsg_UnitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UnitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_speech_match_on_client()) {
    if (!speech_match_on_client_->IsInitialized()) return false;
  }
  return true;
}

void CDOTAUserMsg_UnitEvent::InternalSwap(CDOTAUserMsg_UnitEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, entity_index_)
      + sizeof(CDOTAUserMsg_UnitEvent::entity_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_)>(
          reinterpret_cast<char*>(&speech_),
          reinterpret_cast<char*>(&other->speech_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UnitEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ItemPurchased::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemPurchased>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemPurchased)
}
CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_ability_id_ = from.item_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemPurchased)
}

void CDOTAUserMsg_ItemPurchased::SharedCtor() {
item_ability_id_ = 0;
}

CDOTAUserMsg_ItemPurchased::~CDOTAUserMsg_ItemPurchased() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemPurchased)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ItemPurchased::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ItemPurchased::ArenaDtor(void* object) {
  CDOTAUserMsg_ItemPurchased* _this = reinterpret_cast< CDOTAUserMsg_ItemPurchased* >(object);
  (void)_this;
}
void CDOTAUserMsg_ItemPurchased::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ItemPurchased::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ItemPurchased::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemPurchased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ability_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemPurchased::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ItemPurchased::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemPurchased)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemPurchased)
  return target;
}

size_t CDOTAUserMsg_ItemPurchased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemPurchased)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 item_ability_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_ability_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ItemPurchased)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemPurchased* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ItemPurchased>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ItemPurchased)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ItemPurchased)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const CDOTAUserMsg_ItemPurchased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemPurchased)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_ability_id()) {
    _internal_set_item_ability_id(from._internal_item_ability_id());
  }
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ItemPurchased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const CDOTAUserMsg_ItemPurchased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemPurchased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemPurchased::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemPurchased::InternalSwap(CDOTAUserMsg_ItemPurchased* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_ability_id_, other->item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemPurchased::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ItemSold::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemSold>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemSold)
}
CDOTAUserMsg_ItemSold::CDOTAUserMsg_ItemSold(const CDOTAUserMsg_ItemSold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_ability_id_ = from.item_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemSold)
}

void CDOTAUserMsg_ItemSold::SharedCtor() {
item_ability_id_ = 0;
}

CDOTAUserMsg_ItemSold::~CDOTAUserMsg_ItemSold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemSold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ItemSold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ItemSold::ArenaDtor(void* object) {
  CDOTAUserMsg_ItemSold* _this = reinterpret_cast< CDOTAUserMsg_ItemSold* >(object);
  (void)_this;
}
void CDOTAUserMsg_ItemSold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ItemSold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ItemSold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemSold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ability_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemSold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ItemSold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemSold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemSold)
  return target;
}

size_t CDOTAUserMsg_ItemSold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemSold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 item_ability_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_ability_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ItemSold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ItemSold)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemSold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ItemSold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ItemSold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ItemSold)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemSold::MergeFrom(const CDOTAUserMsg_ItemSold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemSold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_ability_id()) {
    _internal_set_item_ability_id(from._internal_item_ability_id());
  }
}

void CDOTAUserMsg_ItemSold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ItemSold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemSold::CopyFrom(const CDOTAUserMsg_ItemSold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemSold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemSold::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemSold::InternalSwap(CDOTAUserMsg_ItemSold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_ability_id_, other->item_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemSold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ItemFound::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ItemFound>()._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_itemdef(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ItemFound)
}
CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemdef_) -
    reinterpret_cast<char*>(&player_)) + sizeof(itemdef_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ItemFound)
}

void CDOTAUserMsg_ItemFound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemdef_) -
    reinterpret_cast<char*>(&player_)) + sizeof(itemdef_));
}

CDOTAUserMsg_ItemFound::~CDOTAUserMsg_ItemFound() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ItemFound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ItemFound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ItemFound::ArenaDtor(void* object) {
  CDOTAUserMsg_ItemFound* _this = reinterpret_cast< CDOTAUserMsg_ItemFound* >(object);
  (void)_this;
}
void CDOTAUserMsg_ItemFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ItemFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ItemFound::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ItemFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemdef_) -
        reinterpret_cast<char*>(&player_)) + sizeof(itemdef_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ItemFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player(&has_bits);
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rarity(&has_bits);
          rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_method(&has_bits);
          method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 itemdef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_itemdef(&has_bits);
          itemdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ItemFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ItemFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  // optional int32 rarity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rarity(), target);
  }

  // optional int32 method = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_method(), target);
  }

  // optional int32 itemdef = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_itemdef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ItemFound)
  return target;
}

size_t CDOTAUserMsg_ItemFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ItemFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 player = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player());
    }

    // optional int32 quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quality());
    }

    // optional int32 rarity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rarity());
    }

    // optional int32 method = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_method());
    }

    // optional int32 itemdef = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_itemdef());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ItemFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ItemFound)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ItemFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ItemFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ItemFound)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemFound::MergeFrom(const CDOTAUserMsg_ItemFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ItemFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000008u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000010u) {
      itemdef_ = from.itemdef_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ItemFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemFound::CopyFrom(const CDOTAUserMsg_ItemFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemFound::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemFound::InternalSwap(CDOTAUserMsg_ItemFound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemFound, itemdef_)
      + sizeof(CDOTAUserMsg_ItemFound::itemdef_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ItemFound, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ItemFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_OverheadEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OverheadEvent>()._has_bits_);
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_player_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_player_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OverheadEvent)
}
CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_type_, &from.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_player_entindex_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(source_player_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OverheadEvent)
}

void CDOTAUserMsg_OverheadEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_player_entindex_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(source_player_entindex_));
}

CDOTAUserMsg_OverheadEvent::~CDOTAUserMsg_OverheadEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OverheadEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_OverheadEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_OverheadEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_OverheadEvent* _this = reinterpret_cast< CDOTAUserMsg_OverheadEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_OverheadEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_OverheadEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_OverheadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OverheadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&message_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_player_entindex_) -
        reinterpret_cast<char*>(&message_type_)) + sizeof(source_player_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OverheadEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_OVERHEAD_ALERT_IsValid(val))) {
            _internal_set_message_type(static_cast<::DOTA_OVERHEAD_ALERT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_player_entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_player_entindex(&has_bits);
          target_player_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_entindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 source_player_entindex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_source_player_entindex(&has_bits);
          source_player_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_OverheadEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OverheadEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // optional int32 target_player_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_player_entindex(), target);
  }

  // optional int32 target_entindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_entindex(), target);
  }

  // optional int32 source_player_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_source_player_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OverheadEvent)
  return target;
}

size_t CDOTAUserMsg_OverheadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OverheadEvent)
  size_t total_size = 0;

  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (_internal_has_message_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

    // optional int32 target_player_entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_entindex());
    }

    // optional int32 target_entindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_entindex());
    }

    // optional int32 source_player_entindex = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_OverheadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_OverheadEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_OverheadEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_OverheadEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_OverheadEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const CDOTAUserMsg_OverheadEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OverheadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      message_type_ = from.message_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_player_entindex_ = from.target_player_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_player_entindex_ = from.source_player_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_OverheadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const CDOTAUserMsg_OverheadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OverheadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OverheadEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_OverheadEvent::InternalSwap(CDOTAUserMsg_OverheadEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, source_player_entindex_)
      + sizeof(CDOTAUserMsg_OverheadEvent::source_player_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, message_type_)>(
          reinterpret_cast<char*>(&message_type_),
          reinterpret_cast<char*>(&other->message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OverheadEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialTipInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialTipInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialTipInfo)
}
CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialTipInfo)
}

void CDOTAUserMsg_TutorialTipInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
progress_ = 0;
}

CDOTAUserMsg_TutorialTipInfo::~CDOTAUserMsg_TutorialTipInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialTipInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialTipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_TutorialTipInfo::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialTipInfo* _this = reinterpret_cast< CDOTAUserMsg_TutorialTipInfo* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialTipInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialTipInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialTipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialTipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  progress_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialTipInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_TutorialTipInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialTipInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialTipInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialTipInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialTipInfo)
  return target;
}

size_t CDOTAUserMsg_TutorialTipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialTipInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_progress());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialTipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialTipInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialTipInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialTipInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialTipInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialTipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialTipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialTipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialTipInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialTipInfo::InternalSwap(CDOTAUserMsg_TutorialTipInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialTipInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialFinish::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialFinish>()._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emblem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialFinish)
}
CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(const CDOTAUserMsg_TutorialFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heading()) {
    heading_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_heading(), 
      GetArena());
  }
  emblem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_emblem()) {
    emblem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_emblem(), 
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFinish)
}

void CDOTAUserMsg_TutorialFinish::SharedCtor() {
heading_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
emblem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

CDOTAUserMsg_TutorialFinish::~CDOTAUserMsg_TutorialFinish() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  heading_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emblem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_TutorialFinish::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialFinish* _this = reinterpret_cast< CDOTAUserMsg_TutorialFinish* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heading_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      emblem_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      body_.ClearNonDefaultToEmpty();
    }
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_heading();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.heading");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string emblem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_emblem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.emblem");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_TutorialFinish.body");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.heading");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_heading(), target);
  }

  // optional string emblem = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_emblem().data(), static_cast<int>(this->_internal_emblem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.emblem");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_emblem(), target);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TutorialFinish.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFinish)
  return target;
}

size_t CDOTAUserMsg_TutorialFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heading());
    }

    // optional string emblem = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_emblem());
    }

    // optional string body = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialFinish)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const CDOTAUserMsg_TutorialFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_heading(from._internal_heading());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_emblem(from._internal_emblem());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const CDOTAUserMsg_TutorialFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFinish::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFinish::InternalSwap(CDOTAUserMsg_TutorialFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heading_.Swap(&other->heading_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  emblem_.Swap(&other->emblem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialMinimapPosition::_Internal {
 public:
};

CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialMinimapPosition)
}
CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(const CDOTAUserMsg_TutorialMinimapPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialMinimapPosition)
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedCtor() {
}

CDOTAUserMsg_TutorialMinimapPosition::~CDOTAUserMsg_TutorialMinimapPosition() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialMinimapPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TutorialMinimapPosition::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialMinimapPosition* _this = reinterpret_cast< CDOTAUserMsg_TutorialMinimapPosition* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialMinimapPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialMinimapPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialMinimapPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialMinimapPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialMinimapPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialMinimapPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialMinimapPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialMinimapPosition)
  return target;
}

size_t CDOTAUserMsg_TutorialMinimapPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialMinimapPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialMinimapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialMinimapPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialMinimapPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialMinimapPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialMinimapPosition)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialMinimapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialMinimapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialMinimapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialMinimapPosition::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialMinimapPosition::InternalSwap(CDOTAUserMsg_TutorialMinimapPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialMinimapPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SendGenericToolTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendGenericToolTip>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendGenericToolTip)
}
CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(const CDOTAUserMsg_SendGenericToolTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&entindex_, &from.entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendGenericToolTip)
}

void CDOTAUserMsg_SendGenericToolTip::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&entindex_)) + sizeof(close_));
}

CDOTAUserMsg_SendGenericToolTip::~CDOTAUserMsg_SendGenericToolTip() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendGenericToolTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SendGenericToolTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SendGenericToolTip::ArenaDtor(void* object) {
  CDOTAUserMsg_SendGenericToolTip* _this = reinterpret_cast< CDOTAUserMsg_SendGenericToolTip* >(object);
  (void)_this;
}
void CDOTAUserMsg_SendGenericToolTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SendGenericToolTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SendGenericToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendGenericToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&close_) -
        reinterpret_cast<char*>(&entindex_)) + sizeof(close_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendGenericToolTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_SendGenericToolTip.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_SendGenericToolTip.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_close(&has_bits);
          close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SendGenericToolTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendGenericToolTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SendGenericToolTip.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SendGenericToolTip.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entindex(), target);
  }

  // optional bool close = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_close(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendGenericToolTip)
  return target;
}

size_t CDOTAUserMsg_SendGenericToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendGenericToolTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int32 entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional bool close = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SendGenericToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendGenericToolTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SendGenericToolTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SendGenericToolTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SendGenericToolTip)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendGenericToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      close_ = from.close_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SendGenericToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendGenericToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendGenericToolTip::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendGenericToolTip::InternalSwap(CDOTAUserMsg_SendGenericToolTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, close_)
      + sizeof(CDOTAUserMsg_SendGenericToolTip::close_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, entindex_)>(
          reinterpret_cast<char*>(&entindex_),
          reinterpret_cast<char*>(&other->entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendGenericToolTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_WorldLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WorldLine>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_WorldLine& worldline(const CDOTAUserMsg_WorldLine* msg);
  static void set_has_worldline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_WorldLine&
CDOTAUserMsg_WorldLine::_Internal::worldline(const CDOTAUserMsg_WorldLine* msg) {
  return *msg->worldline_;
}
void CDOTAUserMsg_WorldLine::clear_worldline() {
  if (worldline_ != nullptr) worldline_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WorldLine)
}
CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(const CDOTAUserMsg_WorldLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldline()) {
    worldline_ = new ::CDOTAMsg_WorldLine(*from.worldline_);
  } else {
    worldline_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WorldLine)
}

void CDOTAUserMsg_WorldLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&worldline_)) + sizeof(player_id_));
}

CDOTAUserMsg_WorldLine::~CDOTAUserMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WorldLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_WorldLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete worldline_;
}

void CDOTAUserMsg_WorldLine::ArenaDtor(void* object) {
  CDOTAUserMsg_WorldLine* _this = reinterpret_cast< CDOTAUserMsg_WorldLine* >(object);
  (void)_this;
}
void CDOTAUserMsg_WorldLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_WorldLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(worldline_ != nullptr);
    worldline_->Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WorldLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_WorldLine worldline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_WorldLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WorldLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_WorldLine worldline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worldline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WorldLine)
  return target;
}

size_t CDOTAUserMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WorldLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_WorldLine worldline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *worldline_);
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_WorldLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WorldLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_WorldLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_WorldLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WorldLine::MergeFrom(const CDOTAUserMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_worldline()->::CDOTAMsg_WorldLine::MergeFrom(from._internal_worldline());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WorldLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WorldLine::CopyFrom(const CDOTAUserMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WorldLine::InternalSwap(CDOTAUserMsg_WorldLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WorldLine, player_id_)
      + sizeof(CDOTAUserMsg_WorldLine::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WorldLine, worldline_)>(
          reinterpret_cast<char*>(&worldline_),
          reinterpret_cast<char*>(&other->worldline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WorldLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ChatWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatWheel>()._has_bits_);
  static void set_has_chat_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatWheel)
}
CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(const CDOTAUserMsg_ChatWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatWheel)
}

void CDOTAUserMsg_ChatWheel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&emoticon_id_) -
    reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
}

CDOTAUserMsg_ChatWheel::~CDOTAUserMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ChatWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ChatWheel::ArenaDtor(void* object) {
  CDOTAUserMsg_ChatWheel* _this = reinterpret_cast< CDOTAUserMsg_ChatWheel* >(object);
  (void)_this;
}
void CDOTAUserMsg_ChatWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ChatWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&chat_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emoticon_id_) -
        reinterpret_cast<char*>(&chat_message_id_)) + sizeof(emoticon_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 chat_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chat_message_id(&has_bits);
          chat_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 param_hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_param_hero_id(&has_bits);
          param_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 emoticon_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_emoticon_id(&has_bits);
          emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ChatWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chat_message_id(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 param_hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_param_hero_id(), target);
  }

  // optional uint32 emoticon_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatWheel)
  return target;
}

size_t CDOTAUserMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 chat_message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_message_id());
    }

    // optional uint32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 param_hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_param_hero_id());
    }

    // optional uint32 emoticon_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_emoticon_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ChatWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ChatWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ChatWheel)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const CDOTAUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_hero_id_ = from.param_hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      emoticon_id_ = from.emoticon_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const CDOTAUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheel::InternalSwap(CDOTAUserMsg_ChatWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, emoticon_id_)
      + sizeof(CDOTAUserMsg_ChatWheel::emoticon_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, chat_message_id_)>(
          reinterpret_cast<char*>(&chat_message_id_),
          reinterpret_cast<char*>(&other->chat_message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ReceivedXmasGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ReceivedXmasGift>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ReceivedXmasGift)
}
CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(const CDOTAUserMsg_ReceivedXmasGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name()) {
    item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inventory_slot_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(inventory_slot_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ReceivedXmasGift)
}

void CDOTAUserMsg_ReceivedXmasGift::SharedCtor() {
item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inventory_slot_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(inventory_slot_));
}

CDOTAUserMsg_ReceivedXmasGift::~CDOTAUserMsg_ReceivedXmasGift() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ReceivedXmasGift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ReceivedXmasGift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ReceivedXmasGift::ArenaDtor(void* object) {
  CDOTAUserMsg_ReceivedXmasGift* _this = reinterpret_cast< CDOTAUserMsg_ReceivedXmasGift* >(object);
  (void)_this;
}
void CDOTAUserMsg_ReceivedXmasGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ReceivedXmasGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ReceivedXmasGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ReceivedXmasGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inventory_slot_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(inventory_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ReceivedXmasGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ReceivedXmasGift.item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 inventory_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inventory_slot(&has_bits);
          inventory_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ReceivedXmasGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ReceivedXmasGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ReceivedXmasGift.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // optional int32 inventory_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_inventory_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ReceivedXmasGift)
  return target;
}

size_t CDOTAUserMsg_ReceivedXmasGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ReceivedXmasGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 inventory_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_inventory_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ReceivedXmasGift)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ReceivedXmasGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ReceivedXmasGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ReceivedXmasGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ReceivedXmasGift)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ReceivedXmasGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      inventory_slot_ = from.inventory_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ReceivedXmasGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ReceivedXmasGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReceivedXmasGift::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ReceivedXmasGift::InternalSwap(CDOTAUserMsg_ReceivedXmasGift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_name_.Swap(&other->item_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, inventory_slot_)
      + sizeof(CDOTAUserMsg_ReceivedXmasGift::inventory_slot_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ReceivedXmasGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ShowSurvey::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShowSurvey>()._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teammate_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_teammate_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teammate_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShowSurvey)
}
CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(const CDOTAUserMsg_ShowSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_response_style()) {
    response_style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_style(), 
      GetArena());
  }
  teammate_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teammate_name()) {
    teammate_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_teammate_name(), 
      GetArena());
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&teammate_account_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(teammate_account_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowSurvey)
}

void CDOTAUserMsg_ShowSurvey::SharedCtor() {
response_style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
teammate_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&teammate_account_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(teammate_account_id_));
}

CDOTAUserMsg_ShowSurvey::~CDOTAUserMsg_ShowSurvey() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowSurvey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ShowSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teammate_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ShowSurvey::ArenaDtor(void* object) {
  CDOTAUserMsg_ShowSurvey* _this = reinterpret_cast< CDOTAUserMsg_ShowSurvey* >(object);
  (void)_this;
}
void CDOTAUserMsg_ShowSurvey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ShowSurvey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ShowSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShowSurvey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      response_style_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      teammate_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teammate_account_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(teammate_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShowSurvey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string response_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_response_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowSurvey.response_style");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teammate_hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teammate_hero_id(&has_bits);
          teammate_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teammate_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_teammate_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowSurvey.teammate_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teammate_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_teammate_account_id(&has_bits);
          teammate_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ShowSurvey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowSurvey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 survey_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_survey_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional string response_style = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response_style().data(), static_cast<int>(this->_internal_response_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowSurvey.response_style");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_response_style(), target);
  }

  // optional uint32 teammate_hero_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teammate_hero_id(), target);
  }

  // optional string teammate_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teammate_name().data(), static_cast<int>(this->_internal_teammate_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowSurvey.teammate_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_teammate_name(), target);
  }

  // optional uint32 teammate_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_teammate_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowSurvey)
  return target;
}

size_t CDOTAUserMsg_ShowSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShowSurvey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string response_style = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_style());
    }

    // optional string teammate_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teammate_name());
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional int32 survey_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_survey_id());
    }

    // optional uint32 teammate_hero_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teammate_hero_id());
    }

    // optional uint32 teammate_account_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teammate_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ShowSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ShowSurvey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ShowSurvey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ShowSurvey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ShowSurvey)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const CDOTAUserMsg_ShowSurvey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShowSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_response_style(from._internal_response_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_teammate_name(from._internal_teammate_name());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      survey_id_ = from.survey_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      teammate_hero_id_ = from.teammate_hero_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      teammate_account_id_ = from.teammate_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ShowSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const CDOTAUserMsg_ShowSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShowSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowSurvey::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ShowSurvey::InternalSwap(CDOTAUserMsg_ShowSurvey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  response_style_.Swap(&other->response_style_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  teammate_name_.Swap(&other->teammate_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_account_id_)
      + sizeof(CDOTAUserMsg_ShowSurvey::teammate_account_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShowSurvey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UpdateSharedContent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_UpdateSharedContent>()._has_bits_);
  static void set_has_slot_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UpdateSharedContent)
}
CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(const CDOTAUserMsg_UpdateSharedContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_type_ = from.slot_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UpdateSharedContent)
}

void CDOTAUserMsg_UpdateSharedContent::SharedCtor() {
slot_type_ = 0;
}

CDOTAUserMsg_UpdateSharedContent::~CDOTAUserMsg_UpdateSharedContent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UpdateSharedContent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UpdateSharedContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UpdateSharedContent::ArenaDtor(void* object) {
  CDOTAUserMsg_UpdateSharedContent* _this = reinterpret_cast< CDOTAUserMsg_UpdateSharedContent* >(object);
  (void)_this;
}
void CDOTAUserMsg_UpdateSharedContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UpdateSharedContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UpdateSharedContent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UpdateSharedContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UpdateSharedContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 slot_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_type(&has_bits);
          slot_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UpdateSharedContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UpdateSharedContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UpdateSharedContent)
  return target;
}

size_t CDOTAUserMsg_UpdateSharedContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UpdateSharedContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 slot_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UpdateSharedContent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UpdateSharedContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UpdateSharedContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UpdateSharedContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UpdateSharedContent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UpdateSharedContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot_type()) {
    _internal_set_slot_type(from._internal_slot_type());
  }
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UpdateSharedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UpdateSharedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateSharedContent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UpdateSharedContent::InternalSwap(CDOTAUserMsg_UpdateSharedContent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_type_, other->slot_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UpdateSharedContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialRequestExp::_Internal {
 public:
};

CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialRequestExp)
}
CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(const CDOTAUserMsg_TutorialRequestExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialRequestExp)
}

void CDOTAUserMsg_TutorialRequestExp::SharedCtor() {
}

CDOTAUserMsg_TutorialRequestExp::~CDOTAUserMsg_TutorialRequestExp() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialRequestExp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialRequestExp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TutorialRequestExp::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialRequestExp* _this = reinterpret_cast< CDOTAUserMsg_TutorialRequestExp* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialRequestExp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialRequestExp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialRequestExp::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialRequestExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialRequestExp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialRequestExp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialRequestExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialRequestExp)
  return target;
}

size_t CDOTAUserMsg_TutorialRequestExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialRequestExp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialRequestExp)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialRequestExp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialRequestExp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialRequestExp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialRequestExp)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialRequestExp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialRequestExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialRequestExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialRequestExp::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialRequestExp::InternalSwap(CDOTAUserMsg_TutorialRequestExp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialRequestExp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialFade::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialFade>()._has_bits_);
  static void set_has_tgt_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialFade)
}
CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(const CDOTAUserMsg_TutorialFade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tgt_alpha_ = from.tgt_alpha_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialFade)
}

void CDOTAUserMsg_TutorialFade::SharedCtor() {
tgt_alpha_ = 0;
}

CDOTAUserMsg_TutorialFade::~CDOTAUserMsg_TutorialFade() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialFade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialFade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TutorialFade::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialFade* _this = reinterpret_cast< CDOTAUserMsg_TutorialFade* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialFade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialFade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialFade::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialFade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tgt_alpha_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialFade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tgt_alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tgt_alpha(&has_bits);
          tgt_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialFade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialFade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tgt_alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tgt_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialFade)
  return target;
}

size_t CDOTAUserMsg_TutorialFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialFade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 tgt_alpha = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tgt_alpha());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialFade)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialFade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialFade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialFade)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const CDOTAUserMsg_TutorialFade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialFade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tgt_alpha()) {
    _internal_set_tgt_alpha(from._internal_tgt_alpha());
  }
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const CDOTAUserMsg_TutorialFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFade::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFade::InternalSwap(CDOTAUserMsg_TutorialFade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tgt_alpha_, other->tgt_alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialFade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TutorialPingMinimap::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TutorialPingMinimap>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TutorialPingMinimap)
}
CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(const CDOTAUserMsg_TutorialPingMinimap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TutorialPingMinimap)
}

void CDOTAUserMsg_TutorialPingMinimap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_index_));
}

CDOTAUserMsg_TutorialPingMinimap::~CDOTAUserMsg_TutorialPingMinimap() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TutorialPingMinimap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TutorialPingMinimap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TutorialPingMinimap::ArenaDtor(void* object) {
  CDOTAUserMsg_TutorialPingMinimap* _this = reinterpret_cast< CDOTAUserMsg_TutorialPingMinimap* >(object);
  (void)_this;
}
void CDOTAUserMsg_TutorialPingMinimap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TutorialPingMinimap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TutorialPingMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TutorialPingMinimap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_index_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(entity_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TutorialPingMinimap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pos_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_pos_z(&has_bits);
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_entity_index(&has_bits);
          entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TutorialPingMinimap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TutorialPingMinimap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_z(), target);
  }

  // optional int32 entity_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TutorialPingMinimap)
  return target;
}

size_t CDOTAUserMsg_TutorialPingMinimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TutorialPingMinimap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional float pos_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 entity_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TutorialPingMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialPingMinimap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TutorialPingMinimap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TutorialPingMinimap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TutorialPingMinimap)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TutorialPingMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      entity_index_ = from.entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TutorialPingMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TutorialPingMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialPingMinimap::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialPingMinimap::InternalSwap(CDOTAUserMsg_TutorialPingMinimap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, entity_index_)
      + sizeof(CDOTAUserMsg_TutorialPingMinimap::entity_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TutorialPingMinimap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GamerulesStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GamerulesStateChanged>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GamerulesStateChanged)
}
CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(const CDOTAUserMsg_GamerulesStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GamerulesStateChanged)
}

void CDOTAUserMsg_GamerulesStateChanged::SharedCtor() {
state_ = 0u;
}

CDOTAUserMsg_GamerulesStateChanged::~CDOTAUserMsg_GamerulesStateChanged() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GamerulesStateChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GamerulesStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_GamerulesStateChanged::ArenaDtor(void* object) {
  CDOTAUserMsg_GamerulesStateChanged* _this = reinterpret_cast< CDOTAUserMsg_GamerulesStateChanged* >(object);
  (void)_this;
}
void CDOTAUserMsg_GamerulesStateChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GamerulesStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GamerulesStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GamerulesStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GamerulesStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GamerulesStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GamerulesStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GamerulesStateChanged)
  return target;
}

size_t CDOTAUserMsg_GamerulesStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GamerulesStateChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GamerulesStateChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GamerulesStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GamerulesStateChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GamerulesStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GamerulesStateChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GamerulesStateChanged)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GamerulesStateChanged::MergeFrom(const CDOTAUserMsg_GamerulesStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GamerulesStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
}

void CDOTAUserMsg_GamerulesStateChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GamerulesStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GamerulesStateChanged::CopyFrom(const CDOTAUserMsg_GamerulesStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GamerulesStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GamerulesStateChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GamerulesStateChanged::InternalSwap(CDOTAUserMsg_GamerulesStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GamerulesStateChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AddQuestLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AddQuestLogEntry>()._has_bits_);
  static void set_has_npc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npc_dialog(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AddQuestLogEntry)
}
CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(const CDOTAUserMsg_AddQuestLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  npc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_npc_name()) {
    npc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_npc_name(), 
      GetArena());
  }
  npc_dialog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_npc_dialog()) {
    npc_dialog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_npc_dialog(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AddQuestLogEntry)
}

void CDOTAUserMsg_AddQuestLogEntry::SharedCtor() {
npc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
npc_dialog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_AddQuestLogEntry::~CDOTAUserMsg_AddQuestLogEntry() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AddQuestLogEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AddQuestLogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  npc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npc_dialog_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_AddQuestLogEntry::ArenaDtor(void* object) {
  CDOTAUserMsg_AddQuestLogEntry* _this = reinterpret_cast< CDOTAUserMsg_AddQuestLogEntry* >(object);
  (void)_this;
}
void CDOTAUserMsg_AddQuestLogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AddQuestLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AddQuestLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AddQuestLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      npc_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      npc_dialog_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AddQuestLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string npc_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_npc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_AddQuestLogEntry.npc_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string npc_dialog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_npc_dialog();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AddQuestLogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AddQuestLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string npc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_name().data(), static_cast<int>(this->_internal_npc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AddQuestLogEntry.npc_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_npc_name(), target);
  }

  // optional string npc_dialog = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_dialog().data(), static_cast<int>(this->_internal_npc_dialog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_npc_dialog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AddQuestLogEntry)
  return target;
}

size_t CDOTAUserMsg_AddQuestLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AddQuestLogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string npc_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_name());
    }

    // optional string npc_dialog = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_dialog());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AddQuestLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AddQuestLogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AddQuestLogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AddQuestLogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AddQuestLogEntry)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AddQuestLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_npc_name(from._internal_npc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_npc_dialog(from._internal_npc_dialog());
    }
  }
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AddQuestLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AddQuestLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AddQuestLogEntry::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AddQuestLogEntry::InternalSwap(CDOTAUserMsg_AddQuestLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  npc_name_.Swap(&other->npc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  npc_dialog_.Swap(&other->npc_dialog_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AddQuestLogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SendStatPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendStatPopup>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_SendStatPopup& statpopup(const CDOTAUserMsg_SendStatPopup* msg);
  static void set_has_statpopup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_SendStatPopup&
CDOTAUserMsg_SendStatPopup::_Internal::statpopup(const CDOTAUserMsg_SendStatPopup* msg) {
  return *msg->statpopup_;
}
void CDOTAUserMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != nullptr) statpopup_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendStatPopup)
}
CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(const CDOTAUserMsg_SendStatPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_statpopup()) {
    statpopup_ = new ::CDOTAMsg_SendStatPopup(*from.statpopup_);
  } else {
    statpopup_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendStatPopup)
}

void CDOTAUserMsg_SendStatPopup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&statpopup_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&statpopup_)) + sizeof(player_id_));
}

CDOTAUserMsg_SendStatPopup::~CDOTAUserMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendStatPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SendStatPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete statpopup_;
}

void CDOTAUserMsg_SendStatPopup::ArenaDtor(void* object) {
  CDOTAUserMsg_SendStatPopup* _this = reinterpret_cast< CDOTAUserMsg_SendStatPopup* >(object);
  (void)_this;
}
void CDOTAUserMsg_SendStatPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SendStatPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(statpopup_ != nullptr);
    statpopup_->Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendStatPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_SendStatPopup statpopup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statpopup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SendStatPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendStatPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_SendStatPopup statpopup = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::statpopup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendStatPopup)
  return target;
}

size_t CDOTAUserMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendStatPopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_SendStatPopup statpopup = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statpopup_);
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendStatPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SendStatPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SendStatPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const CDOTAUserMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_statpopup()->::CDOTAMsg_SendStatPopup::MergeFrom(from._internal_statpopup());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const CDOTAUserMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendStatPopup::InternalSwap(CDOTAUserMsg_SendStatPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, player_id_)
      + sizeof(CDOTAUserMsg_SendStatPopup::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, statpopup_)>(
          reinterpret_cast<char*>(&statpopup_),
          reinterpret_cast<char*>(&other->statpopup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendStatPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_DismissAllStatPopups::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DismissAllStatPopups>()._has_bits_);
  static const ::CDOTAMsg_DismissAllStatPopups& dismissallmsg(const CDOTAUserMsg_DismissAllStatPopups* msg);
  static void set_has_dismissallmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_DismissAllStatPopups&
CDOTAUserMsg_DismissAllStatPopups::_Internal::dismissallmsg(const CDOTAUserMsg_DismissAllStatPopups* msg) {
  return *msg->dismissallmsg_;
}
void CDOTAUserMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (dismissallmsg_ != nullptr) dismissallmsg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DismissAllStatPopups)
}
CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(const CDOTAUserMsg_DismissAllStatPopups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dismissallmsg()) {
    dismissallmsg_ = new ::CDOTAMsg_DismissAllStatPopups(*from.dismissallmsg_);
  } else {
    dismissallmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DismissAllStatPopups)
}

void CDOTAUserMsg_DismissAllStatPopups::SharedCtor() {
dismissallmsg_ = nullptr;
}

CDOTAUserMsg_DismissAllStatPopups::~CDOTAUserMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DismissAllStatPopups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_DismissAllStatPopups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dismissallmsg_;
}

void CDOTAUserMsg_DismissAllStatPopups::ArenaDtor(void* object) {
  CDOTAUserMsg_DismissAllStatPopups* _this = reinterpret_cast< CDOTAUserMsg_DismissAllStatPopups* >(object);
  (void)_this;
}
void CDOTAUserMsg_DismissAllStatPopups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dismissallmsg_ != nullptr);
    dismissallmsg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DismissAllStatPopups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dismissallmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_DismissAllStatPopups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DismissAllStatPopups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dismissallmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAUserMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DismissAllStatPopups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dismissallmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_DismissAllStatPopups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DismissAllStatPopups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_DismissAllStatPopups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_DismissAllStatPopups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DismissAllStatPopups::MergeFrom(const CDOTAUserMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dismissallmsg()) {
    _internal_mutable_dismissallmsg()->::CDOTAMsg_DismissAllStatPopups::MergeFrom(from._internal_dismissallmsg());
  }
}

void CDOTAUserMsg_DismissAllStatPopups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DismissAllStatPopups::CopyFrom(const CDOTAUserMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DismissAllStatPopups::InternalSwap(CDOTAUserMsg_DismissAllStatPopups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dismissallmsg_, other->dismissallmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DismissAllStatPopups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SendRoshanSpectatorPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendRoshanSpectatorPhase>()._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phase_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
}
CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(const CDOTAUserMsg_SendRoshanSpectatorPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_length_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(phase_length_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phase_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_length_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(phase_length_));
}

CDOTAUserMsg_SendRoshanSpectatorPhase::~CDOTAUserMsg_SendRoshanSpectatorPhase() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendRoshanSpectatorPhase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::ArenaDtor(void* object) {
  CDOTAUserMsg_SendRoshanSpectatorPhase* _this = reinterpret_cast< CDOTAUserMsg_SendRoshanSpectatorPhase* >(object);
  (void)_this;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_length_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(phase_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendRoshanSpectatorPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_ROSHAN_PHASE_IsValid(val))) {
            _internal_set_phase(static_cast<::DOTA_ROSHAN_PHASE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 phase_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_phase_start_time(&has_bits);
          phase_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 phase_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_phase_length(&has_bits);
          phase_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SendRoshanSpectatorPhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 phase_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_start_time(), target);
  }

  // optional int32 phase_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_phase_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendRoshanSpectatorPhase)
  return target;
}

size_t CDOTAUserMsg_SendRoshanSpectatorPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional int32 phase_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phase_start_time());
    }

    // optional int32 phase_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phase_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendRoshanSpectatorPhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SendRoshanSpectatorPhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SendRoshanSpectatorPhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SendRoshanSpectatorPhase)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::MergeFrom(const CDOTAUserMsg_SendRoshanSpectatorPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_start_time_ = from.phase_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      phase_length_ = from.phase_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::CopyFrom(const CDOTAUserMsg_SendRoshanSpectatorPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanSpectatorPhase::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::InternalSwap(CDOTAUserMsg_SendRoshanSpectatorPhase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, phase_length_)
      + sizeof(CDOTAUserMsg_SendRoshanSpectatorPhase::phase_length_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, phase_)>(
          reinterpret_cast<char*>(&phase_),
          reinterpret_cast<char*>(&other->phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendRoshanSpectatorPhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SendRoshanPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SendRoshanPopup>()._has_bits_);
  static void set_has_reclaimed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendRoshanPopup)
}
CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(const CDOTAUserMsg_SendRoshanPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reclaimed_, &from.reclaimed_,
    static_cast<size_t>(reinterpret_cast<char*>(&gametime_) -
    reinterpret_cast<char*>(&reclaimed_)) + sizeof(gametime_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendRoshanPopup)
}

void CDOTAUserMsg_SendRoshanPopup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reclaimed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gametime_) -
    reinterpret_cast<char*>(&reclaimed_)) + sizeof(gametime_));
}

CDOTAUserMsg_SendRoshanPopup::~CDOTAUserMsg_SendRoshanPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendRoshanPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SendRoshanPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SendRoshanPopup::ArenaDtor(void* object) {
  CDOTAUserMsg_SendRoshanPopup* _this = reinterpret_cast< CDOTAUserMsg_SendRoshanPopup* >(object);
  (void)_this;
}
void CDOTAUserMsg_SendRoshanPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SendRoshanPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SendRoshanPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendRoshanPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reclaimed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gametime_) -
        reinterpret_cast<char*>(&reclaimed_)) + sizeof(gametime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendRoshanPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool reclaimed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reclaimed(&has_bits);
          reclaimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gametime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gametime(&has_bits);
          gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SendRoshanPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendRoshanPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reclaimed(), target);
  }

  // optional int32 gametime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendRoshanPopup)
  return target;
}

size_t CDOTAUserMsg_SendRoshanPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendRoshanPopup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool reclaimed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 gametime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gametime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SendRoshanPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendRoshanPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SendRoshanPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SendRoshanPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SendRoshanPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendRoshanPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reclaimed_ = from.reclaimed_;
    }
    if (cached_has_bits & 0x00000002u) {
      gametime_ = from.gametime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SendRoshanPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendRoshanPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanPopup::InternalSwap(CDOTAUserMsg_SendRoshanPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, gametime_)
      + sizeof(CDOTAUserMsg_SendRoshanPopup::gametime_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, reclaimed_)>(
          reinterpret_cast<char*>(&reclaimed_),
          reinterpret_cast<char*>(&other->reclaimed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendRoshanPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SendFinalGold::_Internal {
 public:
};

CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reliable_gold_(arena),
  unreliable_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SendFinalGold)
}
CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(const CDOTAUserMsg_SendFinalGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reliable_gold_(from.reliable_gold_),
      unreliable_gold_(from.unreliable_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SendFinalGold)
}

void CDOTAUserMsg_SendFinalGold::SharedCtor() {
}

CDOTAUserMsg_SendFinalGold::~CDOTAUserMsg_SendFinalGold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SendFinalGold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SendFinalGold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SendFinalGold::ArenaDtor(void* object) {
  CDOTAUserMsg_SendFinalGold* _this = reinterpret_cast< CDOTAUserMsg_SendFinalGold* >(object);
  (void)_this;
}
void CDOTAUserMsg_SendFinalGold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SendFinalGold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SendFinalGold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SendFinalGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reliable_gold_.Clear();
  unreliable_gold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SendFinalGold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 reliable_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reliable_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reliable_gold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 unreliable_gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unreliable_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unreliable_gold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SendFinalGold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SendFinalGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  for (int i = 0, n = this->_internal_reliable_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reliable_gold(i), target);
  }

  // repeated uint32 unreliable_gold = 2;
  for (int i = 0, n = this->_internal_unreliable_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unreliable_gold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SendFinalGold)
  return target;
}

size_t CDOTAUserMsg_SendFinalGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SendFinalGold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reliable_gold_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reliable_gold_size());
    total_size += data_size;
  }

  // repeated uint32 unreliable_gold = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unreliable_gold_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unreliable_gold_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SendFinalGold)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendFinalGold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SendFinalGold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SendFinalGold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SendFinalGold)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const CDOTAUserMsg_SendFinalGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SendFinalGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reliable_gold_.MergeFrom(from.reliable_gold_);
  unreliable_gold_.MergeFrom(from.unreliable_gold_);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SendFinalGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const CDOTAUserMsg_SendFinalGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SendFinalGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendFinalGold::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendFinalGold::InternalSwap(CDOTAUserMsg_SendFinalGold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reliable_gold_.InternalSwap(&other->reliable_gold_);
  unreliable_gold_.InternalSwap(&other->unreliable_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SendFinalGold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CustomMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomMsg>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomMsg)
}
CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(const CDOTAUserMsg_CustomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomMsg)
}

void CDOTAUserMsg_CustomMsg::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
}

CDOTAUserMsg_CustomMsg::~CDOTAUserMsg_CustomMsg() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CustomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomMsg::ArenaDtor(void* object) {
  CDOTAUserMsg_CustomMsg* _this = reinterpret_cast< CDOTAUserMsg_CustomMsg* >(object);
  (void)_this;
}
void CDOTAUserMsg_CustomMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CustomMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CustomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomMsg.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CustomMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomMsg.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomMsg)
  return target;
}

size_t CDOTAUserMsg_CustomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CustomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CustomMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CustomMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CustomMsg)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const CDOTAUserMsg_CustomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CustomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const CDOTAUserMsg_CustomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomMsg::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomMsg::InternalSwap(CDOTAUserMsg_CustomMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, value_)
      + sizeof(CDOTAUserMsg_CustomMsg::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CoachHUDPing>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_CoachHUDPing& hud_ping(const CDOTAUserMsg_CoachHUDPing* msg);
  static void set_has_hud_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_CoachHUDPing&
CDOTAUserMsg_CoachHUDPing::_Internal::hud_ping(const CDOTAUserMsg_CoachHUDPing* msg) {
  return *msg->hud_ping_;
}
void CDOTAUserMsg_CoachHUDPing::clear_hud_ping() {
  if (hud_ping_ != nullptr) hud_ping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CoachHUDPing)
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hud_ping()) {
    hud_ping_ = new ::CDOTAMsg_CoachHUDPing(*from.hud_ping_);
  } else {
    hud_ping_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CoachHUDPing)
}

void CDOTAUserMsg_CoachHUDPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hud_ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&hud_ping_)) + sizeof(player_id_));
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CoachHUDPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hud_ping_;
}

void CDOTAUserMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAUserMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAUserMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAUserMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hud_ping_ != nullptr);
    hud_ping_->Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hud_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CoachHUDPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CoachHUDPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hud_ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CoachHUDPing)
  return target;
}

size_t CDOTAUserMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CoachHUDPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hud_ping_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CoachHUDPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CoachHUDPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CoachHUDPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from._internal_hud_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CoachHUDPing::InternalSwap(CDOTAUserMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, player_id_)
      + sizeof(CDOTAUserMsg_CoachHUDPing::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, hud_ping_)>(
          reinterpret_cast<char*>(&hud_ping_),
          reinterpret_cast<char*>(&other->hud_ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ClientLoadGridNav::_Internal {
 public:
};

CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ClientLoadGridNav)
}
CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(const CDOTAUserMsg_ClientLoadGridNav& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ClientLoadGridNav)
}

void CDOTAUserMsg_ClientLoadGridNav::SharedCtor() {
}

CDOTAUserMsg_ClientLoadGridNav::~CDOTAUserMsg_ClientLoadGridNav() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ClientLoadGridNav)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ClientLoadGridNav::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ClientLoadGridNav::ArenaDtor(void* object) {
  CDOTAUserMsg_ClientLoadGridNav* _this = reinterpret_cast< CDOTAUserMsg_ClientLoadGridNav* >(object);
  (void)_this;
}
void CDOTAUserMsg_ClientLoadGridNav::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ClientLoadGridNav::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ClientLoadGridNav::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ClientLoadGridNav)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ClientLoadGridNav::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ClientLoadGridNav::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ClientLoadGridNav)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ClientLoadGridNav)
  return target;
}

size_t CDOTAUserMsg_ClientLoadGridNav::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ClientLoadGridNav)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ClientLoadGridNav)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ClientLoadGridNav* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ClientLoadGridNav>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ClientLoadGridNav)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ClientLoadGridNav)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ClientLoadGridNav)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ClientLoadGridNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ClientLoadGridNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ClientLoadGridNav::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ClientLoadGridNav::InternalSwap(CDOTAUserMsg_ClientLoadGridNav* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ClientLoadGridNav::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_Projectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_Projectile>()._has_bits_);
  static void set_has_hsource(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_htarget(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sourceattachment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_particlesystemhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isattack(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_expiretime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_maximpacttime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_launch_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgVector& vtargetloc(const CDOTAUserMsg_TE_Projectile* msg);
  static void set_has_vtargetloc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_TE_Projectile::_Internal::vtargetloc(const CDOTAUserMsg_TE_Projectile* msg) {
  return *msg->vtargetloc_;
}
void CDOTAUserMsg_TE_Projectile::clear_vtargetloc() {
  if (vtargetloc_ != nullptr) vtargetloc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_Projectile)
}
CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(const CDOTAUserMsg_TE_Projectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vtargetloc()) {
    vtargetloc_ = new ::CMsgVector(*from.vtargetloc_);
  } else {
    vtargetloc_ = nullptr;
  }
  ::memcpy(&hsource_, &from.hsource_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&hsource_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_Projectile)
}

void CDOTAUserMsg_TE_Projectile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vtargetloc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&vtargetloc_)) + sizeof(handle_));
}

CDOTAUserMsg_TE_Projectile::~CDOTAUserMsg_TE_Projectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_Projectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_Projectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vtargetloc_;
}

void CDOTAUserMsg_TE_Projectile::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_Projectile* _this = reinterpret_cast< CDOTAUserMsg_TE_Projectile* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_Projectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_Projectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_Projectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_Projectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vtargetloc_ != nullptr);
    vtargetloc_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&hsource_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isattack_) -
        reinterpret_cast<char*>(&hsource_)) + sizeof(isattack_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&expiretime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handle_) -
        reinterpret_cast<char*>(&expiretime_)) + sizeof(handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_Projectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 hSource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hsource(&has_bits);
          hsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hTarget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_htarget(&has_bits);
          htarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 moveSpeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_movespeed(&has_bits);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sourceAttachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sourceattachment(&has_bits);
          sourceattachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 particleSystemHandle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_particlesystemhandle(&has_bits);
          particlesystemhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dodgeable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dodgeable(&has_bits);
          dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAttack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_isattack(&has_bits);
          isattack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float expireTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_expiretime(&has_bits);
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maximpacttime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_maximpacttime(&has_bits);
          maximpacttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 launch_tick = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_launch_tick(&has_bits);
          launch_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 handle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector vTargetLoc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vtargetloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_Projectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_Projectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hSource = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hsource(), target);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_htarget(), target);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_movespeed(), target);
  }

  // optional int32 sourceAttachment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sourceattachment(), target);
  }

  // optional int64 particleSystemHandle = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_particlesystemhandle(), target);
  }

  // optional bool dodgeable = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_dodgeable(), target);
  }

  // optional bool isAttack = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isattack(), target);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_expiretime(), target);
  }

  // optional float maximpacttime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_maximpacttime(), target);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_launch_tick(), target);
  }

  // optional int32 handle = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_handle(), target);
  }

  // optional .CMsgVector vTargetLoc = 14;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vtargetloc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_Projectile)
  return target;
}

size_t CDOTAUserMsg_TE_Projectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_Projectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector vTargetLoc = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vtargetloc_);
    }

    // optional int32 hSource = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hsource());
    }

    // optional int32 hTarget = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_htarget());
    }

    // optional int32 moveSpeed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_movespeed());
    }

    // optional int32 sourceAttachment = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sourceattachment());
    }

    // optional int64 particleSystemHandle = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_particlesystemhandle());
    }

    // optional bool dodgeable = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool isAttack = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float expireTime = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float maximpacttime = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 launch_tick = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_launch_tick());
    }

    // optional int32 handle = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_Projectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_Projectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_Projectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_Projectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_Projectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_Projectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_Projectile::MergeFrom(const CDOTAUserMsg_TE_Projectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_Projectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vtargetloc()->::CMsgVector::MergeFrom(from._internal_vtargetloc());
    }
    if (cached_has_bits & 0x00000002u) {
      hsource_ = from.hsource_;
    }
    if (cached_has_bits & 0x00000004u) {
      htarget_ = from.htarget_;
    }
    if (cached_has_bits & 0x00000008u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      sourceattachment_ = from.sourceattachment_;
    }
    if (cached_has_bits & 0x00000020u) {
      particlesystemhandle_ = from.particlesystemhandle_;
    }
    if (cached_has_bits & 0x00000040u) {
      dodgeable_ = from.dodgeable_;
    }
    if (cached_has_bits & 0x00000080u) {
      isattack_ = from.isattack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      expiretime_ = from.expiretime_;
    }
    if (cached_has_bits & 0x00000200u) {
      maximpacttime_ = from.maximpacttime_;
    }
    if (cached_has_bits & 0x00000400u) {
      colorgemcolor_ = from.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000800u) {
      launch_tick_ = from.launch_tick_;
    }
    if (cached_has_bits & 0x00001000u) {
      handle_ = from.handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_Projectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_Projectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_Projectile::CopyFrom(const CDOTAUserMsg_TE_Projectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_Projectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_Projectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_Projectile::InternalSwap(CDOTAUserMsg_TE_Projectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, handle_)
      + sizeof(CDOTAUserMsg_TE_Projectile::handle_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, vtargetloc_)>(
          reinterpret_cast<char*>(&vtargetloc_),
          reinterpret_cast<char*>(&other->vtargetloc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_Projectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_ProjectileLoc::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_ProjectileLoc>()._has_bits_);
  static const ::CMsgVector& vsourceloc(const CDOTAUserMsg_TE_ProjectileLoc* msg);
  static void set_has_vsourceloc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_htarget(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_particlesystemhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isattack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiretime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& vtargetloc(const CDOTAUserMsg_TE_ProjectileLoc* msg);
  static void set_has_vtargetloc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_colorgemcolor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_launch_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hsource(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sourceattachment(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_TE_ProjectileLoc::_Internal::vsourceloc(const CDOTAUserMsg_TE_ProjectileLoc* msg) {
  return *msg->vsourceloc_;
}
const ::CMsgVector&
CDOTAUserMsg_TE_ProjectileLoc::_Internal::vtargetloc(const CDOTAUserMsg_TE_ProjectileLoc* msg) {
  return *msg->vtargetloc_;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_vsourceloc() {
  if (vsourceloc_ != nullptr) vsourceloc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_vtargetloc() {
  if (vtargetloc_ != nullptr) vtargetloc_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_ProjectileLoc)
}
CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(const CDOTAUserMsg_TE_ProjectileLoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vsourceloc()) {
    vsourceloc_ = new ::CMsgVector(*from.vsourceloc_);
  } else {
    vsourceloc_ = nullptr;
  }
  if (from._internal_has_vtargetloc()) {
    vtargetloc_ = new ::CMsgVector(*from.vtargetloc_);
  } else {
    vtargetloc_ = nullptr;
  }
  ::memcpy(&htarget_, &from.htarget_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceattachment_) -
    reinterpret_cast<char*>(&htarget_)) + sizeof(sourceattachment_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_ProjectileLoc)
}

void CDOTAUserMsg_TE_ProjectileLoc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vsourceloc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourceattachment_) -
    reinterpret_cast<char*>(&vsourceloc_)) + sizeof(sourceattachment_));
}

CDOTAUserMsg_TE_ProjectileLoc::~CDOTAUserMsg_TE_ProjectileLoc() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_ProjectileLoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_ProjectileLoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vsourceloc_;
  if (this != internal_default_instance()) delete vtargetloc_;
}

void CDOTAUserMsg_TE_ProjectileLoc::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_ProjectileLoc* _this = reinterpret_cast< CDOTAUserMsg_TE_ProjectileLoc* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_ProjectileLoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_ProjectileLoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_ProjectileLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_ProjectileLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vsourceloc_ != nullptr);
      vsourceloc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vtargetloc_ != nullptr);
      vtargetloc_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&htarget_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiretime_) -
        reinterpret_cast<char*>(&htarget_)) + sizeof(expiretime_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&colorgemcolor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sourceattachment_) -
        reinterpret_cast<char*>(&colorgemcolor_)) + sizeof(sourceattachment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_ProjectileLoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector vSourceLoc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vsourceloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hTarget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_htarget(&has_bits);
          htarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 moveSpeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_movespeed(&has_bits);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 particleSystemHandle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_particlesystemhandle(&has_bits);
          particlesystemhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dodgeable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dodgeable(&has_bits);
          dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAttack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isattack(&has_bits);
          isattack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float expireTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_expiretime(&has_bits);
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector vTargetLoc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vtargetloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 colorgemcolor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_colorgemcolor(&has_bits);
          colorgemcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 launch_tick = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_launch_tick(&has_bits);
          launch_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 handle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hSource = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_hsource(&has_bits);
          hsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sourceAttachment = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_sourceattachment(&has_bits);
          sourceattachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_ProjectileLoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_ProjectileLoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector vSourceLoc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vsourceloc(this), target, stream);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_htarget(), target);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_movespeed(), target);
  }

  // optional int64 particleSystemHandle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_particlesystemhandle(), target);
  }

  // optional bool dodgeable = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dodgeable(), target);
  }

  // optional bool isAttack = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isattack(), target);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_expiretime(), target);
  }

  // optional .CMsgVector vTargetLoc = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::vtargetloc(this), target, stream);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_launch_tick(), target);
  }

  // optional int32 handle = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_handle(), target);
  }

  // optional int32 hSource = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_hsource(), target);
  }

  // optional int32 sourceAttachment = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_sourceattachment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_ProjectileLoc)
  return target;
}

size_t CDOTAUserMsg_TE_ProjectileLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_ProjectileLoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector vSourceLoc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vsourceloc_);
    }

    // optional .CMsgVector vTargetLoc = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vtargetloc_);
    }

    // optional int32 hTarget = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_htarget());
    }

    // optional int32 moveSpeed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_movespeed());
    }

    // optional int64 particleSystemHandle = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_particlesystemhandle());
    }

    // optional bool dodgeable = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool isAttack = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float expireTime = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional fixed32 colorgemcolor = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 launch_tick = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_launch_tick());
    }

    // optional int32 handle = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_handle());
    }

    // optional int32 hSource = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hsource());
    }

    // optional int32 sourceAttachment = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sourceattachment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_ProjectileLoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_ProjectileLoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_ProjectileLoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_ProjectileLoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_ProjectileLoc)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_ProjectileLoc::MergeFrom(const CDOTAUserMsg_TE_ProjectileLoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vsourceloc()->::CMsgVector::MergeFrom(from._internal_vsourceloc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vtargetloc()->::CMsgVector::MergeFrom(from._internal_vtargetloc());
    }
    if (cached_has_bits & 0x00000004u) {
      htarget_ = from.htarget_;
    }
    if (cached_has_bits & 0x00000008u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      particlesystemhandle_ = from.particlesystemhandle_;
    }
    if (cached_has_bits & 0x00000020u) {
      dodgeable_ = from.dodgeable_;
    }
    if (cached_has_bits & 0x00000040u) {
      isattack_ = from.isattack_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiretime_ = from.expiretime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      colorgemcolor_ = from.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000200u) {
      launch_tick_ = from.launch_tick_;
    }
    if (cached_has_bits & 0x00000400u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000800u) {
      hsource_ = from.hsource_;
    }
    if (cached_has_bits & 0x00001000u) {
      sourceattachment_ = from.sourceattachment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_ProjectileLoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_ProjectileLoc::CopyFrom(const CDOTAUserMsg_TE_ProjectileLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_ProjectileLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_ProjectileLoc::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_ProjectileLoc::InternalSwap(CDOTAUserMsg_TE_ProjectileLoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, sourceattachment_)
      + sizeof(CDOTAUserMsg_TE_ProjectileLoc::sourceattachment_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, vsourceloc_)>(
          reinterpret_cast<char*>(&vsourceloc_),
          reinterpret_cast<char*>(&other->vsourceloc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_ProjectileLoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_DestroyProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_DestroyProjectile>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_DestroyProjectile)
}
CDOTAUserMsg_TE_DestroyProjectile::CDOTAUserMsg_TE_DestroyProjectile(const CDOTAUserMsg_TE_DestroyProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_DestroyProjectile)
}

void CDOTAUserMsg_TE_DestroyProjectile::SharedCtor() {
handle_ = 0;
}

CDOTAUserMsg_TE_DestroyProjectile::~CDOTAUserMsg_TE_DestroyProjectile() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_DestroyProjectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_DestroyProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TE_DestroyProjectile::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_DestroyProjectile* _this = reinterpret_cast< CDOTAUserMsg_TE_DestroyProjectile* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_DestroyProjectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_DestroyProjectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_DestroyProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_DestroyProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_DestroyProjectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_DestroyProjectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_DestroyProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_DestroyProjectile)
  return target;
}

size_t CDOTAUserMsg_TE_DestroyProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_DestroyProjectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 handle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_DestroyProjectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_DestroyProjectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_DestroyProjectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_DestroyProjectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_DestroyProjectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_DestroyProjectile::MergeFrom(const CDOTAUserMsg_TE_DestroyProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_handle()) {
    _internal_set_handle(from._internal_handle());
  }
}

void CDOTAUserMsg_TE_DestroyProjectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_DestroyProjectile::CopyFrom(const CDOTAUserMsg_TE_DestroyProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_DestroyProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_DestroyProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_DestroyProjectile::InternalSwap(CDOTAUserMsg_TE_DestroyProjectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_DestroyProjectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_DotaBloodImpact::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_DotaBloodImpact>()._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xnormal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ynormal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_DotaBloodImpact)
}
CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(const CDOTAUserMsg_TE_DotaBloodImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    static_cast<size_t>(reinterpret_cast<char*>(&ynormal_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(ynormal_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_DotaBloodImpact)
}

void CDOTAUserMsg_TE_DotaBloodImpact::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ynormal_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(ynormal_));
}

CDOTAUserMsg_TE_DotaBloodImpact::~CDOTAUserMsg_TE_DotaBloodImpact() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_DotaBloodImpact)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_DotaBloodImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TE_DotaBloodImpact::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_DotaBloodImpact* _this = reinterpret_cast< CDOTAUserMsg_TE_DotaBloodImpact* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_DotaBloodImpact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_DotaBloodImpact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_DotaBloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_DotaBloodImpact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&entity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ynormal_) -
        reinterpret_cast<char*>(&entity_)) + sizeof(ynormal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_DotaBloodImpact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xnormal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_xnormal(&has_bits);
          xnormal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ynormal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ynormal(&has_bits);
          ynormal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_DotaBloodImpact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_DotaBloodImpact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float xnormal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xnormal(), target);
  }

  // optional float ynormal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ynormal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_DotaBloodImpact)
  return target;
}

size_t CDOTAUserMsg_TE_DotaBloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_DotaBloodImpact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 entity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float xnormal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ynormal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_DotaBloodImpact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_DotaBloodImpact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_DotaBloodImpact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_DotaBloodImpact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_DotaBloodImpact)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_DotaBloodImpact::MergeFrom(const CDOTAUserMsg_TE_DotaBloodImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      xnormal_ = from.xnormal_;
    }
    if (cached_has_bits & 0x00000008u) {
      ynormal_ = from.ynormal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_DotaBloodImpact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_DotaBloodImpact::CopyFrom(const CDOTAUserMsg_TE_DotaBloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_DotaBloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_DotaBloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_DotaBloodImpact::InternalSwap(CDOTAUserMsg_TE_DotaBloodImpact* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, ynormal_)
      + sizeof(CDOTAUserMsg_TE_DotaBloodImpact::ynormal_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, entity_)>(
          reinterpret_cast<char*>(&entity_),
          reinterpret_cast<char*>(&other->entity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_DotaBloodImpact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AbilityPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilityPing>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mana_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entity_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_primary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_caster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ctrl_held(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reclaim_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilityPing)
}
CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(const CDOTAUserMsg_AbilityPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilityPing)
}

void CDOTAUserMsg_AbilityPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reclaim_time_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(reclaim_time_));
type_ = 1;
}

CDOTAUserMsg_AbilityPing::~CDOTAUserMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilityPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AbilityPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AbilityPing::ArenaDtor(void* object) {
  CDOTAUserMsg_AbilityPing* _this = reinterpret_cast< CDOTAUserMsg_AbilityPing* >(object);
  (void)_this;
}
void CDOTAUserMsg_AbilityPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AbilityPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AbilityPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilityPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passive_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(passive_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&ctrl_held_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reclaim_time_) -
        reinterpret_cast<char*>(&ctrl_held_)) + sizeof(reclaim_time_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilityPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_ABILITY_PING_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::DOTA_ABILITY_PING_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool passive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_passive(&has_bits);
          passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mana_needed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mana_needed(&has_bits);
          mana_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entity_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_entity_id(&has_bits);
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 primary_charges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_primary_charges(&has_bits);
          primary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_secondary_charges(&has_bits);
          secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 caster_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_caster_id(&has_bits);
          caster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_held = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ctrl_held(&has_bits);
          ctrl_held_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float reclaim_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_reclaim_time(&has_bits);
          reclaim_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AbilityPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilityPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional uint32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cooldown_seconds(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // optional bool passive = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_passive(), target);
  }

  // optional uint32 mana_needed = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mana_needed(), target);
  }

  // optional uint32 entity_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_entity_id(), target);
  }

  // optional int32 primary_charges = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_primary_charges(), target);
  }

  // optional int32 secondary_charges = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_secondary_charges(), target);
  }

  // optional uint32 caster_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_caster_id(), target);
  }

  // optional bool ctrl_held = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_ctrl_held(), target);
  }

  // optional float reclaim_time = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_reclaim_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilityPing)
  return target;
}

size_t CDOTAUserMsg_AbilityPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilityPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 cooldown_seconds = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cooldown_seconds());
    }

    // optional uint32 level = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 mana_needed = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mana_needed());
    }

    // optional uint32 entity_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entity_id());
    }

    // optional int32 primary_charges = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_primary_charges());
    }

    // optional bool passive = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool ctrl_held = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 secondary_charges = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_secondary_charges());
    }

    // optional uint32 caster_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caster_id());
    }

    // optional float reclaim_time = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional .DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AbilityPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AbilityPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AbilityPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AbilityPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const CDOTAUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_seconds_ = from.cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mana_needed_ = from.mana_needed_;
    }
    if (cached_has_bits & 0x00000020u) {
      entity_id_ = from.entity_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      primary_charges_ = from.primary_charges_;
    }
    if (cached_has_bits & 0x00000080u) {
      passive_ = from.passive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ctrl_held_ = from.ctrl_held_;
    }
    if (cached_has_bits & 0x00000200u) {
      secondary_charges_ = from.secondary_charges_;
    }
    if (cached_has_bits & 0x00000400u) {
      caster_id_ = from.caster_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      reclaim_time_ = from.reclaim_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const CDOTAUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilityPing::InternalSwap(CDOTAUserMsg_AbilityPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, reclaim_time_)
      + sizeof(CDOTAUserMsg_AbilityPing::reclaim_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilityPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_UnitAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_UnitAnimation>()._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequencevariant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playbackrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_castpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lag_compensation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_UnitAnimation)
}
CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(const CDOTAUserMsg_TE_UnitAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    static_cast<size_t>(reinterpret_cast<char*>(&lag_compensation_time_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(lag_compensation_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_UnitAnimation)
}

void CDOTAUserMsg_TE_UnitAnimation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lag_compensation_time_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(lag_compensation_time_));
}

CDOTAUserMsg_TE_UnitAnimation::~CDOTAUserMsg_TE_UnitAnimation() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_UnitAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_UnitAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TE_UnitAnimation::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_UnitAnimation* _this = reinterpret_cast< CDOTAUserMsg_TE_UnitAnimation* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_UnitAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_UnitAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_UnitAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_UnitAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&entity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lag_compensation_time_) -
        reinterpret_cast<char*>(&entity_)) + sizeof(lag_compensation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_UnitAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequenceVariant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sequencevariant(&has_bits);
          sequencevariant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float playbackrate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_playbackrate(&has_bits);
          playbackrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float castpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_castpoint(&has_bits);
          castpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_activity(&has_bits);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lag_compensation_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_lag_compensation_time(&has_bits);
          lag_compensation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_UnitAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_UnitAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional int32 sequenceVariant = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequencevariant(), target);
  }

  // optional float playbackrate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_playbackrate(), target);
  }

  // optional float castpoint = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_castpoint(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  // optional int32 activity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_activity(), target);
  }

  // optional float lag_compensation_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_lag_compensation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_UnitAnimation)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_UnitAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 entity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity());
    }

    // optional int32 sequenceVariant = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequencevariant());
    }

    // optional float playbackrate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float castpoint = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 activity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_activity());
    }

    // optional float lag_compensation_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_UnitAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_UnitAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_UnitAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_UnitAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_UnitAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_UnitAnimation)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_UnitAnimation::MergeFrom(const CDOTAUserMsg_TE_UnitAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_UnitAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequencevariant_ = from.sequencevariant_;
    }
    if (cached_has_bits & 0x00000004u) {
      playbackrate_ = from.playbackrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      castpoint_ = from.castpoint_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x00000040u) {
      lag_compensation_time_ = from.lag_compensation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_UnitAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_UnitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_UnitAnimation::CopyFrom(const CDOTAUserMsg_TE_UnitAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_UnitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimation::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimation::InternalSwap(CDOTAUserMsg_TE_UnitAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, lag_compensation_time_)
      + sizeof(CDOTAUserMsg_TE_UnitAnimation::lag_compensation_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, entity_)>(
          reinterpret_cast<char*>(&entity_),
          reinterpret_cast<char*>(&other->entity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_UnitAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TE_UnitAnimationEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TE_UnitAnimationEnd>()._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_snap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TE_UnitAnimationEnd)
}
CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(const CDOTAUserMsg_TE_UnitAnimationEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    static_cast<size_t>(reinterpret_cast<char*>(&snap_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(snap_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TE_UnitAnimationEnd)
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&snap_) -
    reinterpret_cast<char*>(&entity_)) + sizeof(snap_));
}

CDOTAUserMsg_TE_UnitAnimationEnd::~CDOTAUserMsg_TE_UnitAnimationEnd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TE_UnitAnimationEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::ArenaDtor(void* object) {
  CDOTAUserMsg_TE_UnitAnimationEnd* _this = reinterpret_cast< CDOTAUserMsg_TE_UnitAnimationEnd* >(object);
  (void)_this;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TE_UnitAnimationEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&entity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snap_) -
        reinterpret_cast<char*>(&entity_)) + sizeof(snap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TE_UnitAnimationEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity(&has_bits);
          entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool snap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_snap(&has_bits);
          snap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TE_UnitAnimationEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity(), target);
  }

  // optional bool snap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_snap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TE_UnitAnimationEnd)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimationEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 entity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity());
    }

    // optional bool snap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_UnitAnimationEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TE_UnitAnimationEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TE_UnitAnimationEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TE_UnitAnimationEnd)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_UnitAnimationEnd::MergeFrom(const CDOTAUserMsg_TE_UnitAnimationEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      snap_ = from.snap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_UnitAnimationEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::CopyFrom(const CDOTAUserMsg_TE_UnitAnimationEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TE_UnitAnimationEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimationEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::InternalSwap(CDOTAUserMsg_TE_UnitAnimationEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, snap_)
      + sizeof(CDOTAUserMsg_TE_UnitAnimationEnd::snap_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, entity_)>(
          reinterpret_cast<char*>(&entity_),
          reinterpret_cast<char*>(&other->entity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TE_UnitAnimationEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ShowGenericPopup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShowGenericPopup>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tint_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_no_other_dialogs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShowGenericPopup)
}
CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(const CDOTAUserMsg_ShowGenericPopup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArena());
  }
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param1()) {
    param1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param1(), 
      GetArena());
  }
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param2()) {
    param2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_param2(), 
      GetArena());
  }
  ::memcpy(&tint_screen_, &from.tint_screen_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_no_other_dialogs_) -
    reinterpret_cast<char*>(&tint_screen_)) + sizeof(show_no_other_dialogs_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShowGenericPopup)
}

void CDOTAUserMsg_ShowGenericPopup::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tint_screen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_no_other_dialogs_) -
    reinterpret_cast<char*>(&tint_screen_)) + sizeof(show_no_other_dialogs_));
}

CDOTAUserMsg_ShowGenericPopup::~CDOTAUserMsg_ShowGenericPopup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShowGenericPopup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ShowGenericPopup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ShowGenericPopup::ArenaDtor(void* object) {
  CDOTAUserMsg_ShowGenericPopup* _this = reinterpret_cast< CDOTAUserMsg_ShowGenericPopup* >(object);
  (void)_this;
}
void CDOTAUserMsg_ShowGenericPopup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ShowGenericPopup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ShowGenericPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShowGenericPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      param2_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&tint_screen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_no_other_dialogs_) -
      reinterpret_cast<char*>(&tint_screen_)) + sizeof(show_no_other_dialogs_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShowGenericPopup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.header");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.body");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_param1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.param1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShowGenericPopup.param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tint_screen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tint_screen(&has_bits);
          tint_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_no_other_dialogs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_show_no_other_dialogs(&has_bits);
          show_no_other_dialogs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ShowGenericPopup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShowGenericPopup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // required string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // optional string param1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.param1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param1(), target);
  }

  // optional string param2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShowGenericPopup.param2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param2(), target);
  }

  // optional bool tint_screen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_tint_screen(), target);
  }

  // optional bool show_no_other_dialogs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_show_no_other_dialogs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShowGenericPopup)
  return target;
}

size_t CDOTAUserMsg_ShowGenericPopup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  if (_internal_has_body()) {
    // required string body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  return total_size;
}
size_t CDOTAUserMsg_ShowGenericPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());

    // required string body = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional string param1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string param2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional bool tint_screen = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool show_no_other_dialogs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ShowGenericPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ShowGenericPopup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ShowGenericPopup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ShowGenericPopup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ShowGenericPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShowGenericPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000010u) {
      tint_screen_ = from.tint_screen_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_no_other_dialogs_ = from.show_no_other_dialogs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ShowGenericPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShowGenericPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowGenericPopup::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ShowGenericPopup::InternalSwap(CDOTAUserMsg_ShowGenericPopup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_.Swap(&other->header_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param1_.Swap(&other->param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param2_.Swap(&other->param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, show_no_other_dialogs_)
      + sizeof(CDOTAUserMsg_ShowGenericPopup::show_no_other_dialogs_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, tint_screen_)>(
          reinterpret_cast<char*>(&tint_screen_),
          reinterpret_cast<char*>(&other->tint_screen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShowGenericPopup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_VoteStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VoteStart>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_choice_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteStart)
}
CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(const CDOTAUserMsg_VoteStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      choices_(from.choices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&choice_count_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(choice_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteStart)
}

void CDOTAUserMsg_VoteStart::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&choice_count_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(choice_count_));
}

CDOTAUserMsg_VoteStart::~CDOTAUserMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_VoteStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_VoteStart::ArenaDtor(void* object) {
  CDOTAUserMsg_VoteStart* _this = reinterpret_cast< CDOTAUserMsg_VoteStart* >(object);
  (void)_this;
}
void CDOTAUserMsg_VoteStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_VoteStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_VoteStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&choice_count_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(choice_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_VoteStart.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 choice_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_choice_count(&has_bits);
          choice_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string choices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_choices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_VoteStart.choices");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_VoteStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_VoteStart.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional int32 choice_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_choice_count(), target);
  }

  // repeated string choices = 4;
  for (int i = 0, n = this->_internal_choices_size(); i < n; i++) {
    const auto& s = this->_internal_choices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_VoteStart.choices");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteStart)
  return target;
}

size_t CDOTAUserMsg_VoteStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string choices = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(choices_.size());
  for (int i = 0, n = choices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      choices_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 choice_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_choice_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_VoteStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_VoteStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_VoteStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_VoteStart)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteStart::MergeFrom(const CDOTAUserMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      choice_count_ = from.choice_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_VoteStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteStart::CopyFrom(const CDOTAUserMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteStart::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteStart::InternalSwap(CDOTAUserMsg_VoteStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  choices_.InternalSwap(&other->choices_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VoteStart, choice_count_)
      + sizeof(CDOTAUserMsg_VoteStart::choice_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VoteStart, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_VoteUpdate::_Internal {
 public:
};

CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choice_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteUpdate)
}
CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(const CDOTAUserMsg_VoteUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      choice_counts_(from.choice_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteUpdate)
}

void CDOTAUserMsg_VoteUpdate::SharedCtor() {
}

CDOTAUserMsg_VoteUpdate::~CDOTAUserMsg_VoteUpdate() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_VoteUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_VoteUpdate::ArenaDtor(void* object) {
  CDOTAUserMsg_VoteUpdate* _this = reinterpret_cast< CDOTAUserMsg_VoteUpdate* >(object);
  (void)_this;
}
void CDOTAUserMsg_VoteUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_VoteUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_VoteUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_counts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 choice_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_choice_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_choice_counts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_VoteUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  for (int i = 0, n = this->_internal_choice_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_choice_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteUpdate)
  return target;
}

size_t CDOTAUserMsg_VoteUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->choice_counts_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_choice_counts_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_VoteUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_VoteUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_VoteUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_VoteUpdate)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const CDOTAUserMsg_VoteUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choice_counts_.MergeFrom(from.choice_counts_);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_VoteUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const CDOTAUserMsg_VoteUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteUpdate::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteUpdate::InternalSwap(CDOTAUserMsg_VoteUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  choice_counts_.InternalSwap(&other->choice_counts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_VoteEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VoteEnd>()._has_bits_);
  static void set_has_selected_choice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VoteEnd)
}
CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(const CDOTAUserMsg_VoteEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selected_choice_ = from.selected_choice_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VoteEnd)
}

void CDOTAUserMsg_VoteEnd::SharedCtor() {
selected_choice_ = 0;
}

CDOTAUserMsg_VoteEnd::~CDOTAUserMsg_VoteEnd() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VoteEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_VoteEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_VoteEnd::ArenaDtor(void* object) {
  CDOTAUserMsg_VoteEnd* _this = reinterpret_cast< CDOTAUserMsg_VoteEnd* >(object);
  (void)_this;
}
void CDOTAUserMsg_VoteEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_VoteEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_VoteEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VoteEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_choice_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VoteEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 selected_choice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_selected_choice(&has_bits);
          selected_choice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_VoteEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VoteEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 selected_choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_selected_choice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VoteEnd)
  return target;
}

size_t CDOTAUserMsg_VoteEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VoteEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 selected_choice = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selected_choice());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_VoteEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_VoteEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_VoteEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_VoteEnd)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const CDOTAUserMsg_VoteEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VoteEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_selected_choice()) {
    _internal_set_selected_choice(from._internal_selected_choice());
  }
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_VoteEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const CDOTAUserMsg_VoteEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VoteEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteEnd::InternalSwap(CDOTAUserMsg_VoteEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(selected_choice_, other->selected_choice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VoteEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_BoosterStatePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BoosterStatePlayer>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_bonus_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BoosterStatePlayer)
}
CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(const CDOTAUserMsg_BoosterStatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_bonus_item_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_bonus_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterStatePlayer)
}

void CDOTAUserMsg_BoosterStatePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_bonus_item_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_bonus_item_id_));
}

CDOTAUserMsg_BoosterStatePlayer::~CDOTAUserMsg_BoosterStatePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterStatePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_BoosterStatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_BoosterStatePlayer::ArenaDtor(void* object) {
  CDOTAUserMsg_BoosterStatePlayer* _this = reinterpret_cast< CDOTAUserMsg_BoosterStatePlayer* >(object);
  (void)_this;
}
void CDOTAUserMsg_BoosterStatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_BoosterStatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_BoosterStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BoosterStatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_bonus_item_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(event_bonus_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BoosterStatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float bonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bonus(&has_bits);
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float event_bonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_event_bonus(&has_bits);
          event_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 bonus_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bonus_item_id(&has_bits);
          bonus_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_bonus_item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_bonus_item_id(&has_bits);
          event_bonus_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_BoosterStatePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterStatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bonus(), target);
  }

  // optional float event_bonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_event_bonus(), target);
  }

  // optional uint32 bonus_item_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bonus_item_id(), target);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_bonus_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterStatePlayer)
  return target;
}

size_t CDOTAUserMsg_BoosterStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BoosterStatePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional float bonus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float event_bonus = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_item_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bonus_item_id());
    }

    // optional uint32 event_bonus_item_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_bonus_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_BoosterStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterStatePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_BoosterStatePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_BoosterStatePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_BoosterStatePlayer)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BoosterStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_bonus_ = from.event_bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_item_id_ = from.bonus_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_bonus_item_id_ = from.event_bonus_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_BoosterStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BoosterStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterStatePlayer::InternalSwap(CDOTAUserMsg_BoosterStatePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, event_bonus_item_id_)
      + sizeof(CDOTAUserMsg_BoosterStatePlayer::event_bonus_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BoosterStatePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_BoosterState::_Internal {
 public:
};

CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boosted_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BoosterState)
}
CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(const CDOTAUserMsg_BoosterState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boosted_players_(from.boosted_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BoosterState)
}

void CDOTAUserMsg_BoosterState::SharedCtor() {
}

CDOTAUserMsg_BoosterState::~CDOTAUserMsg_BoosterState() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BoosterState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_BoosterState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_BoosterState::ArenaDtor(void* object) {
  CDOTAUserMsg_BoosterState* _this = reinterpret_cast< CDOTAUserMsg_BoosterState* >(object);
  (void)_this;
}
void CDOTAUserMsg_BoosterState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_BoosterState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_BoosterState::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BoosterState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boosted_players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BoosterState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boosted_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_BoosterState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BoosterState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boosted_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_boosted_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BoosterState)
  return target;
}

size_t CDOTAUserMsg_BoosterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BoosterState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  total_size += 1UL * this->_internal_boosted_players_size();
  for (const auto& msg : this->boosted_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_BoosterState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_BoosterState)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_BoosterState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_BoosterState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_BoosterState)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterState::MergeFrom(const CDOTAUserMsg_BoosterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BoosterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boosted_players_.MergeFrom(from.boosted_players_);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_BoosterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const CDOTAUserMsg_BoosterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BoosterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterState::InternalSwap(CDOTAUserMsg_BoosterState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boosted_players_.InternalSwap(&other->boosted_players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BoosterState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PlayerMMR::_Internal {
 public:
};

CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PlayerMMR)
}
CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(const CDOTAUserMsg_PlayerMMR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mmr_(from.mmr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PlayerMMR)
}

void CDOTAUserMsg_PlayerMMR::SharedCtor() {
}

CDOTAUserMsg_PlayerMMR::~CDOTAUserMsg_PlayerMMR() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PlayerMMR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PlayerMMR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_PlayerMMR::ArenaDtor(void* object) {
  CDOTAUserMsg_PlayerMMR* _this = reinterpret_cast< CDOTAUserMsg_PlayerMMR* >(object);
  (void)_this;
}
void CDOTAUserMsg_PlayerMMR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PlayerMMR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PlayerMMR::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PlayerMMR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PlayerMMR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint32 mmr = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_mmr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_mmr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PlayerMMR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PlayerMMR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  {
    int byte_size = _mmr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_mmr(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PlayerMMR)
  return target;
}

size_t CDOTAUserMsg_PlayerMMR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PlayerMMR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->mmr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mmr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PlayerMMR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PlayerMMR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PlayerMMR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PlayerMMR)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const CDOTAUserMsg_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmr_.MergeFrom(from.mmr_);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const CDOTAUserMsg_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerMMR::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PlayerMMR::InternalSwap(CDOTAUserMsg_PlayerMMR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mmr_.InternalSwap(&other->mmr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PlayerMMR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AbilitySteal::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilitySteal>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilitySteal)
}
CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(const CDOTAUserMsg_AbilitySteal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ability_level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilitySteal)
}

void CDOTAUserMsg_AbilitySteal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ability_level_));
}

CDOTAUserMsg_AbilitySteal::~CDOTAUserMsg_AbilitySteal() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilitySteal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AbilitySteal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AbilitySteal::ArenaDtor(void* object) {
  CDOTAUserMsg_AbilitySteal* _this = reinterpret_cast< CDOTAUserMsg_AbilitySteal* >(object);
  (void)_this;
}
void CDOTAUserMsg_AbilitySteal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AbilitySteal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AbilitySteal::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilitySteal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_level_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(ability_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilitySteal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ability_level(&has_bits);
          ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AbilitySteal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilitySteal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional uint32 ability_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilitySteal)
  return target;
}

size_t CDOTAUserMsg_AbilitySteal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilitySteal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 ability_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AbilitySteal)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AbilitySteal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AbilitySteal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AbilitySteal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AbilitySteal)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const CDOTAUserMsg_AbilitySteal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilitySteal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_level_ = from.ability_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AbilitySteal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const CDOTAUserMsg_AbilitySteal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilitySteal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilitySteal::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilitySteal::InternalSwap(CDOTAUserMsg_AbilitySteal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, ability_level_)
      + sizeof(CDOTAUserMsg_AbilitySteal::ability_level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilitySteal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsHeroLookup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroLookup>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroLookup)
}
CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(const CDOTAUserMsg_StatsHeroLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_name()) {
    hero_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_name(), 
      GetArena());
  }
  persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona()) {
    persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroLookup)
}

void CDOTAUserMsg_StatsHeroLookup::SharedCtor() {
hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(hero_id_));
}

CDOTAUserMsg_StatsHeroLookup::~CDOTAUserMsg_StatsHeroLookup() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroLookup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsHeroLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hero_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persona_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_StatsHeroLookup::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsHeroLookup* _this = reinterpret_cast< CDOTAUserMsg_StatsHeroLookup* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsHeroLookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsHeroLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_StatsHeroLookup.hero_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string persona = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_persona();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_StatsHeroLookup.persona");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsHeroLookup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_StatsHeroLookup.hero_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hero_name(), target);
  }

  // optional string persona = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_StatsHeroLookup.persona");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_persona(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroLookup)
  return target;
}

size_t CDOTAUserMsg_StatsHeroLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroLookup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string hero_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional string persona = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 hero_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsHeroLookup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroLookup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsHeroLookup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsHeroLookup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsHeroLookup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsHeroLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroLookup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroLookup::InternalSwap(CDOTAUserMsg_StatsHeroLookup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_name_.Swap(&other->hero_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  persona_.Swap(&other->persona_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, hero_id_)
      + sizeof(CDOTAUserMsg_StatsHeroLookup::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroLookup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair>()._has_bits_);
  static void set_has_position_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}
CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_category_, &from.position_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_count_) -
    reinterpret_cast<char*>(&position_category_)) + sizeof(position_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_category_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_count_) -
    reinterpret_cast<char*>(&position_category_)) + sizeof(position_count_));
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::~CDOTAUserMsg_StatsHeroPositionInfo_PositionPair() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* _this = reinterpret_cast< CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&position_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_count_) -
        reinterpret_cast<char*>(&position_category_)) + sizeof(position_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_POSITION_CATEGORY_IsValid(val))) {
            _internal_set_position_category(static_cast<::DOTA_POSITION_CATEGORY>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 position_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position_count(&has_bits);
          position_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_position_category(), target);
  }

  // optional uint32 position_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position_category());
    }

    // optional uint32 position_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      position_category_ = from.position_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_count_ = from.position_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_count_)
      + sizeof(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::position_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_category_)>(
          reinterpret_cast<char*>(&position_category_),
          reinterpret_cast<char*>(&other->position_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsHeroPositionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroPositionInfo>()._has_bits_);
  static void set_has_average_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}
CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(const CDOTAUserMsg_StatsHeroPositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      position_details_(from.position_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  average_position_ = from.average_position_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroPositionInfo)
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedCtor() {
average_position_ = 0;
}

CDOTAUserMsg_StatsHeroPositionInfo::~CDOTAUserMsg_StatsHeroPositionInfo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroPositionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsHeroPositionInfo::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsHeroPositionInfo* _this = reinterpret_cast< CDOTAUserMsg_StatsHeroPositionInfo* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsHeroPositionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsHeroPositionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroPositionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_details_.Clear();
  average_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroPositionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float average_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_average_position(&has_bits);
          average_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_position_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsHeroPositionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroPositionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float average_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_average_position(), target);
  }

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_position_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_position_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroPositionInfo)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroPositionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  total_size += 1UL * this->_internal_position_details_size();
  for (const auto& msg : this->position_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional float average_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsHeroPositionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsHeroPositionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsHeroPositionInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_details_.MergeFrom(from.position_details_);
  if (from._internal_has_average_position()) {
    _internal_set_average_position(from._internal_average_position());
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  position_details_.InternalSwap(&other->position_details_);
  swap(average_position_, other->average_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroPositionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsHeroMinuteDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsHeroMinuteDetails>()._has_bits_);
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CDOTAUserMsg_StatsHeroPositionInfo& position_info(const CDOTAUserMsg_StatsHeroMinuteDetails* msg);
  static void set_has_position_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_harvested_creep_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_claimed_farm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_runes_collected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tps_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CDOTAUserMsg_StatsHeroPositionInfo&
CDOTAUserMsg_StatsHeroMinuteDetails::_Internal::position_info(const CDOTAUserMsg_StatsHeroMinuteDetails* msg) {
  return *msg->position_info_;
}
CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mana_spent_(arena),
  damage_absorbed_(arena),
  damage_done_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}
CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(const CDOTAUserMsg_StatsHeroMinuteDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mana_spent_(from.mana_spent_),
      damage_absorbed_(from.damage_absorbed_),
      damage_done_(from.damage_done_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_info()) {
    position_info_ = new ::CDOTAUserMsg_StatsHeroPositionInfo(*from.position_info_);
  } else {
    position_info_ = nullptr;
  }
  ::memcpy(&last_hits_, &from.last_hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&tps_used_) -
    reinterpret_cast<char*>(&last_hits_)) + sizeof(tps_used_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsHeroMinuteDetails)
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tps_used_) -
    reinterpret_cast<char*>(&position_info_)) + sizeof(tps_used_));
}

CDOTAUserMsg_StatsHeroMinuteDetails::~CDOTAUserMsg_StatsHeroMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsHeroMinuteDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_info_;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsHeroMinuteDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsHeroMinuteDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsHeroMinuteDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mana_spent_.Clear();
  damage_absorbed_.Clear();
  damage_done_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_info_ != nullptr);
    position_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&harvested_creep_gold_) -
        reinterpret_cast<char*>(&last_hits_)) + sizeof(harvested_creep_gold_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&claimed_farm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tps_used_) -
        reinterpret_cast<char*>(&claimed_farm_)) + sizeof(tps_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsHeroMinuteDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 last_hits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_hits(&has_bits);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_kills(&has_bits);
          hero_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_damage(&has_bits);
          hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tower_damage(&has_bits);
          tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_xp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_xp(&has_bits);
          total_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 harvested_creep_gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_harvested_creep_gold(&has_bits);
          harvested_creep_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_farm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_claimed_farm(&has_bits);
          claimed_farm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_wards_placed(&has_bits);
          wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 runes_collected = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_runes_collected(&has_bits);
          runes_collected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tps_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tps_used(&has_bits);
          tps_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mana_spent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mana_spent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mana_spent(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 damage_absorbed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_damage_absorbed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damage_absorbed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 damage_done = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_damage_done(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damage_done(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsHeroMinuteDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_hits = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_hits(), target);
  }

  // optional uint32 hero_kills = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_kills(), target);
  }

  // optional uint32 hero_damage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tower_damage(), target);
  }

  // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::position_info(this), target, stream);
  }

  // optional uint32 total_xp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_xp(), target);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_net_worth(), target);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_harvested_creep_gold(), target);
  }

  // optional uint32 claimed_farm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_claimed_farm(), target);
  }

  // optional uint32 wards_placed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_wards_placed(), target);
  }

  // optional uint32 runes_collected = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_runes_collected(), target);
  }

  // optional uint32 tps_used = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tps_used(), target);
  }

  // repeated uint32 mana_spent = 13;
  for (int i = 0, n = this->_internal_mana_spent_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mana_spent(i), target);
  }

  // repeated uint32 damage_absorbed = 14;
  for (int i = 0, n = this->_internal_damage_absorbed_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_damage_absorbed(i), target);
  }

  // repeated uint32 damage_done = 15;
  for (int i = 0, n = this->_internal_damage_done_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_damage_done(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsHeroMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsHeroMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mana_spent = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mana_spent_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mana_spent_size());
    total_size += data_size;
  }

  // repeated uint32 damage_absorbed = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->damage_absorbed_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_damage_absorbed_size());
    total_size += data_size;
  }

  // repeated uint32 damage_done = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->damage_done_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_damage_done_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_info_);
    }

    // optional uint32 last_hits = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 hero_kills = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_kills());
    }

    // optional uint32 hero_damage = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

    // optional uint32 tower_damage = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

    // optional uint32 total_xp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_xp());
    }

    // optional uint32 net_worth = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 harvested_creep_gold = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_harvested_creep_gold());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 claimed_farm = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_farm());
    }

    // optional uint32 wards_placed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_placed());
    }

    // optional uint32 runes_collected = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_runes_collected());
    }

    // optional uint32 tps_used = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tps_used());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroMinuteDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsHeroMinuteDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsHeroMinuteDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsHeroMinuteDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mana_spent_.MergeFrom(from.mana_spent_);
  damage_absorbed_.MergeFrom(from.damage_absorbed_);
  damage_done_.MergeFrom(from.damage_done_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position_info()->::CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(from._internal_position_info());
    }
    if (cached_has_bits & 0x00000002u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_kills_ = from.hero_kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x00000010u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_xp_ = from.total_xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000080u) {
      harvested_creep_gold_ = from.harvested_creep_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      claimed_farm_ = from.claimed_farm_;
    }
    if (cached_has_bits & 0x00000200u) {
      wards_placed_ = from.wards_placed_;
    }
    if (cached_has_bits & 0x00000400u) {
      runes_collected_ = from.runes_collected_;
    }
    if (cached_has_bits & 0x00000800u) {
      tps_used_ = from.tps_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsHeroMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::InternalSwap(CDOTAUserMsg_StatsHeroMinuteDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mana_spent_.InternalSwap(&other->mana_spent_);
  damage_absorbed_.InternalSwap(&other->damage_absorbed_);
  damage_done_.InternalSwap(&other->damage_done_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, tps_used_)
      + sizeof(CDOTAUserMsg_StatsHeroMinuteDetails::tps_used_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, position_info_)>(
          reinterpret_cast<char*>(&position_info_),
          reinterpret_cast<char*>(&other->position_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsHeroMinuteDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance>()._has_bits_);
  static void set_has_location_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}
CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&location_category_, &from.location_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&location_category_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_category_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&location_category_)) + sizeof(value_));
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* _this = reinterpret_cast< CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&location_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&location_category_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 location_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_location_category(&has_bits);
          location_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_type(&has_bits);
          stat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_location_category(), target);
  }

  // optional uint32 stat_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_type(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 location_category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_location_category());
    }

    // optional uint32 stat_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_type());
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      location_category_ = from.location_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_type_ = from.stat_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, value_)
      + sizeof(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, location_category_)>(
          reinterpret_cast<char*>(&location_category_),
          reinterpret_cast<char*>(&other->location_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsTeamMinuteDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsTeamMinuteDetails>()._has_bits_);
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_barrack_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_available_lane_creep_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_balance_kill_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_balance_tower_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_balance_barracks_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_balance_gold_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_balance_xp_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_stats_(arena),
  lane_performance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}
CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(const CDOTAUserMsg_StatsTeamMinuteDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_stats_(from.player_stats_),
      lane_performance_(from.lane_performance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tower_kills_, &from.tower_kills_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_xp_value_) -
    reinterpret_cast<char*>(&tower_kills_)) + sizeof(balance_xp_value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsTeamMinuteDetails)
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tower_kills_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balance_xp_value_) -
    reinterpret_cast<char*>(&tower_kills_)) + sizeof(balance_xp_value_));
}

CDOTAUserMsg_StatsTeamMinuteDetails::~CDOTAUserMsg_StatsTeamMinuteDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsTeamMinuteDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsTeamMinuteDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsTeamMinuteDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsTeamMinuteDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_stats_.Clear();
  lane_performance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tower_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&balance_xp_value_) -
        reinterpret_cast<char*>(&tower_kills_)) + sizeof(balance_xp_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsTeamMinuteDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 barrack_kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_barrack_kills(&has_bits);
          barrack_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 available_lane_creep_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_available_lane_creep_gold(&has_bits);
          available_lane_creep_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance_kill_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_balance_kill_value(&has_bits);
          balance_kill_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance_tower_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_balance_tower_value(&has_bits);
          balance_tower_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance_barracks_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_balance_barracks_value(&has_bits);
          balance_barracks_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance_gold_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_balance_gold_value(&has_bits);
          balance_gold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance_xp_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_balance_xp_value(&has_bits);
          balance_xp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_performance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsTeamMinuteDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_stats(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 tower_kills = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tower_kills(), target);
  }

  // optional uint32 barrack_kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_barrack_kills(), target);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_available_lane_creep_gold(), target);
  }

  // optional uint32 balance_kill_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_balance_kill_value(), target);
  }

  // optional uint32 balance_tower_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_balance_tower_value(), target);
  }

  // optional uint32 balance_barracks_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_balance_barracks_value(), target);
  }

  // optional uint32 balance_gold_value = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_balance_gold_value(), target);
  }

  // optional uint32 balance_xp_value = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_balance_xp_value(), target);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_performance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_lane_performance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsTeamMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  total_size += 1UL * this->_internal_lane_performance_size();
  for (const auto& msg : this->lane_performance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tower_kills = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_kills());
    }

    // optional uint32 barrack_kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_barrack_kills());
    }

    // optional uint32 available_lane_creep_gold = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_available_lane_creep_gold());
    }

    // optional uint32 balance_kill_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance_kill_value());
    }

    // optional uint32 balance_tower_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance_tower_value());
    }

    // optional uint32 balance_barracks_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance_barracks_value());
    }

    // optional uint32 balance_gold_value = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance_gold_value());
    }

    // optional uint32 balance_xp_value = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance_xp_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsTeamMinuteDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsTeamMinuteDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsTeamMinuteDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
  lane_performance_.MergeFrom(from.lane_performance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000002u) {
      barrack_kills_ = from.barrack_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_lane_creep_gold_ = from.available_lane_creep_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      balance_kill_value_ = from.balance_kill_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance_tower_value_ = from.balance_tower_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      balance_barracks_value_ = from.balance_barracks_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      balance_gold_value_ = from.balance_gold_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      balance_xp_value_ = from.balance_xp_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsTeamMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_stats_.InternalSwap(&other->player_stats_);
  lane_performance_.InternalSwap(&other->lane_performance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_xp_value_)
      + sizeof(CDOTAUserMsg_StatsTeamMinuteDetails::balance_xp_value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, tower_kills_)>(
          reinterpret_cast<char*>(&tower_kills_),
          reinterpret_cast<char*>(&other->tower_kills_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsTeamMinuteDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsPlayerKillShare::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsPlayerKillShare>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kill_share_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_loc_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_loc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_health_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mana_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsPlayerKillShare)
}
CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(const CDOTAUserMsg_StatsPlayerKillShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mana_percent_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mana_percent_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsPlayerKillShare)
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mana_percent_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mana_percent_));
}

CDOTAUserMsg_StatsPlayerKillShare::~CDOTAUserMsg_StatsPlayerKillShare() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsPlayerKillShare)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsPlayerKillShare::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsPlayerKillShare* _this = reinterpret_cast< CDOTAUserMsg_StatsPlayerKillShare* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsPlayerKillShare::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsPlayerKillShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsPlayerKillShare::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsPlayerKillShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mana_percent_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(mana_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsPlayerKillShare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float kill_share_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_kill_share_percent(&has_bits);
          kill_share_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float player_loc_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_player_loc_x(&has_bits);
          player_loc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float player_loc_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_player_loc_y(&has_bits);
          player_loc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float health_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_health_percent(&has_bits);
          health_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mana_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_mana_percent(&has_bits);
          mana_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsPlayerKillShare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsPlayerKillShare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float kill_share_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_kill_share_percent(), target);
  }

  // optional float player_loc_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_player_loc_x(), target);
  }

  // optional float player_loc_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_player_loc_y(), target);
  }

  // optional float health_percent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_health_percent(), target);
  }

  // optional float mana_percent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_mana_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsPlayerKillShare)
  return target;
}

size_t CDOTAUserMsg_StatsPlayerKillShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsPlayerKillShare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional float kill_share_percent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float player_loc_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float player_loc_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float health_percent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float mana_percent = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsPlayerKillShare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsPlayerKillShare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsPlayerKillShare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsPlayerKillShare)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      kill_share_percent_ = from.kill_share_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_loc_x_ = from.player_loc_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_loc_y_ = from.player_loc_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      health_percent_ = from.health_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mana_percent_ = from.mana_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsPlayerKillShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsPlayerKillShare::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsPlayerKillShare::InternalSwap(CDOTAUserMsg_StatsPlayerKillShare* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, mana_percent_)
      + sizeof(CDOTAUserMsg_StatsPlayerKillShare::mana_percent_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsPlayerKillShare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsKillDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsKillDetails>()._has_bits_);
  static void set_has_victim_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_to_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_effective_health(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_death_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_killer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kill_shares_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsKillDetails)
}
CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(const CDOTAUserMsg_StatsKillDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      kill_shares_(from.kill_shares_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_id_, &from.victim_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&killer_id_) -
    reinterpret_cast<char*>(&victim_id_)) + sizeof(killer_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsKillDetails)
}

void CDOTAUserMsg_StatsKillDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&killer_id_) -
    reinterpret_cast<char*>(&victim_id_)) + sizeof(killer_id_));
}

CDOTAUserMsg_StatsKillDetails::~CDOTAUserMsg_StatsKillDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsKillDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsKillDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsKillDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsKillDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsKillDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsKillDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsKillDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsKillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsKillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kill_shares_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&victim_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killer_id_) -
        reinterpret_cast<char*>(&victim_id_)) + sizeof(killer_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsKillDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 victim_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_victim_id(&has_bits);
          victim_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kill_shares(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_to_kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_damage_to_kill(&has_bits);
          damage_to_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effective_health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_effective_health(&has_bits);
          effective_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float death_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_death_time(&has_bits);
          death_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 killer_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_killer_id(&has_bits);
          killer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsKillDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsKillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victim_id(), target);
  }

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kill_shares_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_kill_shares(i), target, stream);
  }

  // optional uint32 damage_to_kill = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage_to_kill(), target);
  }

  // optional uint32 effective_health = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_effective_health(), target);
  }

  // optional float death_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_death_time(), target);
  }

  // optional uint32 killer_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_killer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsKillDetails)
  return target;
}

size_t CDOTAUserMsg_StatsKillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsKillDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  total_size += 1UL * this->_internal_kill_shares_size();
  for (const auto& msg : this->kill_shares_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 victim_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim_id());
    }

    // optional uint32 damage_to_kill = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_to_kill());
    }

    // optional uint32 effective_health = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effective_health());
    }

    // optional float death_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 killer_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsKillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsKillDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsKillDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsKillDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsKillDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const CDOTAUserMsg_StatsKillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsKillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kill_shares_.MergeFrom(from.kill_shares_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      victim_id_ = from.victim_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_to_kill_ = from.damage_to_kill_;
    }
    if (cached_has_bits & 0x00000004u) {
      effective_health_ = from.effective_health_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      killer_id_ = from.killer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsKillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const CDOTAUserMsg_StatsKillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsKillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsKillDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsKillDetails::InternalSwap(CDOTAUserMsg_StatsKillDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kill_shares_.InternalSwap(&other->kill_shares_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, killer_id_)
      + sizeof(CDOTAUserMsg_StatsKillDetails::killer_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, victim_id_)>(
          reinterpret_cast<char*>(&victim_id_),
          reinterpret_cast<char*>(&other->victim_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsKillDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails>()._has_bits_);
  static void set_has_gold_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  participants_(arena),
  deaths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      participants_(from.participants_),
      deaths_(from.deaths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_delta_, &from.gold_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&xp_delta_) -
    reinterpret_cast<char*>(&gold_delta_)) + sizeof(xp_delta_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gold_delta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&xp_delta_) -
    reinterpret_cast<char*>(&gold_delta_)) + sizeof(xp_delta_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participants_.Clear();
  deaths_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gold_delta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xp_delta_) -
        reinterpret_cast<char*>(&gold_delta_)) + sizeof(xp_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 participants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_participants(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_participants(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 deaths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_deaths(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gold_delta(&has_bits);
          gold_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_xp_delta(&has_bits);
          xp_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 participants = 1;
  for (int i = 0, n = this->_internal_participants_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_participants(i), target);
  }

  // repeated uint32 deaths = 2;
  for (int i = 0, n = this->_internal_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deaths(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold_delta = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold_delta(), target);
  }

  // optional uint32 xp_delta = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xp_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 participants = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->participants_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_participants_size());
    total_size += data_size;
  }

  // repeated uint32 deaths = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->deaths_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deaths_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 gold_delta = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_delta());
    }

    // optional uint32 xp_delta = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_delta());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  deaths_.MergeFrom(from.deaths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gold_delta_ = from.gold_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_delta_ = from.xp_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  participants_.InternalSwap(&other->participants_);
  deaths_.InternalSwap(&other->deaths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, xp_delta_)
      + sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::xp_delta_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, gold_delta_)>(
          reinterpret_cast<char*>(&gold_delta_),
          reinterpret_cast<char*>(&other->gold_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& radiant_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg);
  static void set_has_radiant_fight_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& dire_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg);
  static void set_has_dire_fight_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal::radiant_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg) {
  return *msg->radiant_fight_details_;
}
const ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_Internal::dire_fight_details(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* msg) {
  return *msg->dire_fight_details_;
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_radiant_fight_details()) {
    radiant_fight_details_ = new ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from.radiant_fight_details_);
  } else {
    radiant_fight_details_ = nullptr;
  }
  if (from._internal_has_dire_fight_details()) {
    dire_fight_details_ = new ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from.dire_fight_details_);
  } else {
    dire_fight_details_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radiant_fight_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&radiant_fight_details_)) + sizeof(end_time_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete radiant_fight_details_;
  if (this != internal_default_instance()) delete dire_fight_details_;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(radiant_fight_details_ != nullptr);
      radiant_fight_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dire_fight_details_ != nullptr);
      dire_fight_details_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_fight_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_fight_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_start_time(), target);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_end_time(), target);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::radiant_fight_details(this), target, stream);
  }

  // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dire_fight_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radiant_fight_details_);
    }

    // optional .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dire_fight_details_);
    }

    // optional float start_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_radiant_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from._internal_radiant_fight_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dire_fight_details()->::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from._internal_dire_fight_details());
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, end_time_)
      + sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::end_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, radiant_fight_details_)>(
          reinterpret_cast<char*>(&radiant_fight_details_),
          reinterpret_cast<char*>(&other->radiant_fight_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_StatsMatchDetails::_Internal {
 public:
};

CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_lookup_(arena),
  radiant_stats_(arena),
  dire_stats_(arena),
  radiant_kills_(arena),
  dire_kills_(arena),
  fight_details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_StatsMatchDetails)
}
CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(const CDOTAUserMsg_StatsMatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hero_lookup_(from.hero_lookup_),
      radiant_stats_(from.radiant_stats_),
      dire_stats_(from.dire_stats_),
      radiant_kills_(from.radiant_kills_),
      dire_kills_(from.dire_kills_),
      fight_details_(from.fight_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_StatsMatchDetails)
}

void CDOTAUserMsg_StatsMatchDetails::SharedCtor() {
}

CDOTAUserMsg_StatsMatchDetails::~CDOTAUserMsg_StatsMatchDetails() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_StatsMatchDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_StatsMatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_StatsMatchDetails::ArenaDtor(void* object) {
  CDOTAUserMsg_StatsMatchDetails* _this = reinterpret_cast< CDOTAUserMsg_StatsMatchDetails* >(object);
  (void)_this;
}
void CDOTAUserMsg_StatsMatchDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_StatsMatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_StatsMatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_StatsMatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_lookup_.Clear();
  radiant_stats_.Clear();
  dire_stats_.Clear();
  radiant_kills_.Clear();
  dire_kills_.Clear();
  fight_details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_StatsMatchDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_lookup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radiant_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dire_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radiant_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dire_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fight_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_StatsMatchDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_StatsMatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_lookup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hero_lookup(i), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radiant_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_radiant_stats(i), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dire_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dire_stats(i), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radiant_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_radiant_kills(i), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dire_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dire_kills(i), target, stream);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fight_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_fight_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_StatsMatchDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_StatsMatchDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  total_size += 1UL * this->_internal_hero_lookup_size();
  for (const auto& msg : this->hero_lookup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  total_size += 1UL * this->_internal_radiant_stats_size();
  for (const auto& msg : this->radiant_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  total_size += 1UL * this->_internal_dire_stats_size();
  for (const auto& msg : this->dire_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  total_size += 1UL * this->_internal_radiant_kills_size();
  for (const auto& msg : this->radiant_kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  total_size += 1UL * this->_internal_dire_kills_size();
  for (const auto& msg : this->dire_kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  total_size += 1UL * this->_internal_fight_details_size();
  for (const auto& msg : this->fight_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_StatsMatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_StatsMatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_StatsMatchDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_StatsMatchDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_StatsMatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_lookup_.MergeFrom(from.hero_lookup_);
  radiant_stats_.MergeFrom(from.radiant_stats_);
  dire_stats_.MergeFrom(from.dire_stats_);
  radiant_kills_.MergeFrom(from.radiant_kills_);
  dire_kills_.MergeFrom(from.dire_kills_);
  fight_details_.MergeFrom(from.fight_details_);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_StatsMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_StatsMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hero_lookup_.InternalSwap(&other->hero_lookup_);
  radiant_stats_.InternalSwap(&other->radiant_stats_);
  dire_stats_.InternalSwap(&other->dire_stats_);
  radiant_kills_.InternalSwap(&other->radiant_kills_);
  dire_kills_.InternalSwap(&other->dire_kills_);
  fight_details_.InternalSwap(&other->fight_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_StatsMatchDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MiniTaunt::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MiniTaunt>()._has_bits_);
  static void set_has_taunting_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MiniTaunt)
}
CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(const CDOTAUserMsg_MiniTaunt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  taunting_player_id_ = from.taunting_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MiniTaunt)
}

void CDOTAUserMsg_MiniTaunt::SharedCtor() {
taunting_player_id_ = 0u;
}

CDOTAUserMsg_MiniTaunt::~CDOTAUserMsg_MiniTaunt() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MiniTaunt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MiniTaunt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MiniTaunt::ArenaDtor(void* object) {
  CDOTAUserMsg_MiniTaunt* _this = reinterpret_cast< CDOTAUserMsg_MiniTaunt* >(object);
  (void)_this;
}
void CDOTAUserMsg_MiniTaunt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MiniTaunt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MiniTaunt::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MiniTaunt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taunting_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MiniTaunt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 taunting_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_taunting_player_id(&has_bits);
          taunting_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MiniTaunt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MiniTaunt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 taunting_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_taunting_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MiniTaunt)
  return target;
}

size_t CDOTAUserMsg_MiniTaunt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MiniTaunt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 taunting_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_taunting_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MiniTaunt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniTaunt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MiniTaunt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MiniTaunt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MiniTaunt)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const CDOTAUserMsg_MiniTaunt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MiniTaunt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_taunting_player_id()) {
    _internal_set_taunting_player_id(from._internal_taunting_player_id());
  }
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MiniTaunt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const CDOTAUserMsg_MiniTaunt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MiniTaunt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniTaunt::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniTaunt::InternalSwap(CDOTAUserMsg_MiniTaunt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(taunting_player_id_, other->taunting_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MiniTaunt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SpeechBubble::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SpeechBubble>()._has_bits_);
  static void set_has_destroy_all(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SpeechBubble)
}
CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(const CDOTAUserMsg_SpeechBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destroy_all_ = from.destroy_all_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SpeechBubble)
}

void CDOTAUserMsg_SpeechBubble::SharedCtor() {
destroy_all_ = false;
}

CDOTAUserMsg_SpeechBubble::~CDOTAUserMsg_SpeechBubble() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SpeechBubble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SpeechBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SpeechBubble::ArenaDtor(void* object) {
  CDOTAUserMsg_SpeechBubble* _this = reinterpret_cast< CDOTAUserMsg_SpeechBubble* >(object);
  (void)_this;
}
void CDOTAUserMsg_SpeechBubble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SpeechBubble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SpeechBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SpeechBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destroy_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SpeechBubble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool destroy_all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_destroy_all(&has_bits);
          destroy_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SpeechBubble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SpeechBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SpeechBubble)
  return target;
}

size_t CDOTAUserMsg_SpeechBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SpeechBubble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool destroy_all = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SpeechBubble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SpeechBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpeechBubble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SpeechBubble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SpeechBubble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SpeechBubble)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpeechBubble::MergeFrom(const CDOTAUserMsg_SpeechBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SpeechBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destroy_all()) {
    _internal_set_destroy_all(from._internal_destroy_all());
  }
}

void CDOTAUserMsg_SpeechBubble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SpeechBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpeechBubble::CopyFrom(const CDOTAUserMsg_SpeechBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SpeechBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpeechBubble::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpeechBubble::InternalSwap(CDOTAUserMsg_SpeechBubble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(destroy_all_, other->destroy_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SpeechBubble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CustomHeaderMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHeaderMessage>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHeaderMessage)
}
CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(const CDOTAUserMsg_CustomHeaderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHeaderMessage)
}

void CDOTAUserMsg_CustomHeaderMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
}

CDOTAUserMsg_CustomHeaderMessage::~CDOTAUserMsg_CustomHeaderMessage() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHeaderMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CustomHeaderMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHeaderMessage::ArenaDtor(void* object) {
  CDOTAUserMsg_CustomHeaderMessage* _this = reinterpret_cast< CDOTAUserMsg_CustomHeaderMessage* >(object);
  (void)_this;
}
void CDOTAUserMsg_CustomHeaderMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CustomHeaderMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHeaderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHeaderMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomHeaderMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CustomHeaderMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHeaderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHeaderMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHeaderMessage)
  return target;
}

size_t CDOTAUserMsg_CustomHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHeaderMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CustomHeaderMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CustomHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHeaderMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CustomHeaderMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CustomHeaderMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CustomHeaderMessage)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHeaderMessage::MergeFrom(const CDOTAUserMsg_CustomHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomHeaderMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CustomHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHeaderMessage::CopyFrom(const CDOTAUserMsg_CustomHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHeaderMessage::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHeaderMessage::InternalSwap(CDOTAUserMsg_CustomHeaderMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, value_)
      + sizeof(CDOTAUserMsg_CustomHeaderMessage::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHeaderMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgHeroAbilityStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHeroAbilityStat>()._has_bits_);
  static void set_has_stat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgHeroAbilityStat::CMsgHeroAbilityStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgHeroAbilityStat)
}
CMsgHeroAbilityStat::CMsgHeroAbilityStat(const CMsgHeroAbilityStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_type_, &from.stat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&stat_type_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgHeroAbilityStat)
}

void CMsgHeroAbilityStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&stat_type_)) + sizeof(float_value_));
}

CMsgHeroAbilityStat::~CMsgHeroAbilityStat() {
  // @@protoc_insertion_point(destructor:CMsgHeroAbilityStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgHeroAbilityStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgHeroAbilityStat::ArenaDtor(void* object) {
  CMsgHeroAbilityStat* _this = reinterpret_cast< CMsgHeroAbilityStat* >(object);
  (void)_this;
}
void CMsgHeroAbilityStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHeroAbilityStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHeroAbilityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHeroAbilityStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&stat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_value_) -
        reinterpret_cast<char*>(&stat_type_)) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHeroAbilityStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHeroStatType_IsValid(val))) {
            _internal_set_stat_type(static_cast<::EHeroStatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgHeroAbilityStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHeroAbilityStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stat_type(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // optional float float_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHeroAbilityStat)
  return target;
}

size_t CMsgHeroAbilityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHeroAbilityStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_type());
    }

    // optional int32 int_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_value());
    }

    // optional float float_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgHeroAbilityStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgHeroAbilityStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHeroAbilityStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgHeroAbilityStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgHeroAbilityStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgHeroAbilityStat)
    MergeFrom(*source);
  }
}

void CMsgHeroAbilityStat::MergeFrom(const CMsgHeroAbilityStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHeroAbilityStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stat_type_ = from.stat_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHeroAbilityStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgHeroAbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeroAbilityStat::CopyFrom(const CMsgHeroAbilityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHeroAbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroAbilityStat::IsInitialized() const {
  return true;
}

void CMsgHeroAbilityStat::InternalSwap(CMsgHeroAbilityStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHeroAbilityStat, float_value_)
      + sizeof(CMsgHeroAbilityStat::float_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgHeroAbilityStat, stat_type_)>(
          reinterpret_cast<char*>(&stat_type_),
          reinterpret_cast<char*>(&other->stat_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHeroAbilityStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCombatAnalyzerPlayerStat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCombatAnalyzerPlayerStat>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_ability_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCombatAnalyzerPlayerStat)
}
CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(const CMsgCombatAnalyzerPlayerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hero_ability_stats_(from.hero_ability_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerPlayerStat)
}

void CMsgCombatAnalyzerPlayerStat::SharedCtor() {
account_id_ = 0u;
}

CMsgCombatAnalyzerPlayerStat::~CMsgCombatAnalyzerPlayerStat() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerPlayerStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCombatAnalyzerPlayerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCombatAnalyzerPlayerStat::ArenaDtor(void* object) {
  CMsgCombatAnalyzerPlayerStat* _this = reinterpret_cast< CMsgCombatAnalyzerPlayerStat* >(object);
  (void)_this;
}
void CMsgCombatAnalyzerPlayerStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCombatAnalyzerPlayerStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCombatAnalyzerPlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCombatAnalyzerPlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_ability_stats_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCombatAnalyzerPlayerStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_ability_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCombatAnalyzerPlayerStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerPlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_ability_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_hero_ability_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerPlayerStat)
  return target;
}

size_t CMsgCombatAnalyzerPlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCombatAnalyzerPlayerStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHeroAbilityStat hero_ability_stats = 2;
  total_size += 1UL * this->_internal_hero_ability_stats_size();
  for (const auto& msg : this->hero_ability_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCombatAnalyzerPlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCombatAnalyzerPlayerStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCombatAnalyzerPlayerStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCombatAnalyzerPlayerStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCombatAnalyzerPlayerStat)
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const CMsgCombatAnalyzerPlayerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCombatAnalyzerPlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_ability_stats_.MergeFrom(from.hero_ability_stats_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCombatAnalyzerPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const CMsgCombatAnalyzerPlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCombatAnalyzerPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerPlayerStat::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerPlayerStat::InternalSwap(CMsgCombatAnalyzerPlayerStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_ability_stats_.InternalSwap(&other->hero_ability_stats_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCombatAnalyzerPlayerStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCombatAnalyzerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCombatAnalyzerStats>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCombatAnalyzerStats)
}
CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(const CMsgCombatAnalyzerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_stats_(from.player_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgCombatAnalyzerStats)
}

void CMsgCombatAnalyzerStats::SharedCtor() {
match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgCombatAnalyzerStats::~CMsgCombatAnalyzerStats() {
  // @@protoc_insertion_point(destructor:CMsgCombatAnalyzerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCombatAnalyzerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCombatAnalyzerStats::ArenaDtor(void* object) {
  CMsgCombatAnalyzerStats* _this = reinterpret_cast< CMsgCombatAnalyzerStats* >(object);
  (void)_this;
}
void CMsgCombatAnalyzerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCombatAnalyzerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCombatAnalyzerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCombatAnalyzerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_stats_.Clear();
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCombatAnalyzerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCombatAnalyzerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCombatAnalyzerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_player_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCombatAnalyzerStats)
  return target;
}

size_t CMsgCombatAnalyzerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCombatAnalyzerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCombatAnalyzerPlayerStat player_stats = 2;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCombatAnalyzerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCombatAnalyzerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCombatAnalyzerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCombatAnalyzerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCombatAnalyzerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCombatAnalyzerStats)
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerStats::MergeFrom(const CMsgCombatAnalyzerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCombatAnalyzerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
  if (from._internal_has_match_id()) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgCombatAnalyzerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCombatAnalyzerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerStats::CopyFrom(const CMsgCombatAnalyzerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCombatAnalyzerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerStats::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerStats::InternalSwap(CMsgCombatAnalyzerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_stats_.InternalSwap(&other->player_stats_);
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCombatAnalyzerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_BeastChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_BeastChat>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_BeastChat)
}
CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(const CDOTAUserMsg_BeastChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArena());
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_BeastChat)
}

void CDOTAUserMsg_BeastChat::SharedCtor() {
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_ = 0u;
}

CDOTAUserMsg_BeastChat::~CDOTAUserMsg_BeastChat() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_BeastChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_BeastChat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_BeastChat::ArenaDtor(void* object) {
  CDOTAUserMsg_BeastChat* _this = reinterpret_cast< CDOTAUserMsg_BeastChat* >(object);
  (void)_this;
}
void CDOTAUserMsg_BeastChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_BeastChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_BeastChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_BeastChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      target_.ClearNonDefaultToEmpty();
    }
  }
  team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_BeastChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_BeastChat.target");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_BeastChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_BeastChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_BeastChat.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_BeastChat)
  return target;
}

size_t CDOTAUserMsg_BeastChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_BeastChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string format = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string target = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target());
    }

    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_BeastChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_BeastChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BeastChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_BeastChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_BeastChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_BeastChat)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BeastChat::MergeFrom(const CDOTAUserMsg_BeastChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_BeastChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_target(from._internal_target());
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BeastChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_BeastChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BeastChat::CopyFrom(const CDOTAUserMsg_BeastChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_BeastChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BeastChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BeastChat::InternalSwap(CDOTAUserMsg_BeastChat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(team_, other->team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_BeastChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CustomHudElement_Create::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Create>()._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layout_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Create)
}
CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(const CDOTAUserMsg_CustomHudElement_Create& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_element_id()) {
    element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element_id(), 
      GetArena());
  }
  layout_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_layout_filename()) {
    layout_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_layout_filename(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Create)
}

void CDOTAUserMsg_CustomHudElement_Create::SharedCtor() {
element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
layout_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_CustomHudElement_Create::~CDOTAUserMsg_CustomHudElement_Create() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Create)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CustomHudElement_Create::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  element_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layout_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Create::ArenaDtor(void* object) {
  CDOTAUserMsg_CustomHudElement_Create* _this = reinterpret_cast< CDOTAUserMsg_CustomHudElement_Create* >(object);
  (void)_this;
}
void CDOTAUserMsg_CustomHudElement_Create::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CustomHudElement_Create::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      element_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      layout_filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Create::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Create.element_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layout_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_layout_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Create.layout_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CustomHudElement_Create::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Create)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Create.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  // optional string layout_filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layout_filename().data(), static_cast<int>(this->_internal_layout_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Create.layout_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layout_filename(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Create)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Create)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string element_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_element_id());
    }

    // optional string layout_filename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layout_filename());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Create::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CustomHudElement_Create)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Create* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CustomHudElement_Create>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CustomHudElement_Create)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CustomHudElement_Create)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Create::MergeFrom(const CDOTAUserMsg_CustomHudElement_Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_element_id(from._internal_element_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_layout_filename(from._internal_layout_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void CDOTAUserMsg_CustomHudElement_Create::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CustomHudElement_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Create::CopyFrom(const CDOTAUserMsg_CustomHudElement_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Create::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Create::InternalSwap(CDOTAUserMsg_CustomHudElement_Create* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_id_.Swap(&other->element_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  layout_filename_.Swap(&other->layout_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Create::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CustomHudElement_Modify::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Modify>()._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modify_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Modify)
}
CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(const CDOTAUserMsg_CustomHudElement_Modify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_element_id()) {
    element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element_id(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  modify_visible_ = from.modify_visible_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Modify)
}

void CDOTAUserMsg_CustomHudElement_Modify::SharedCtor() {
element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modify_visible_ = false;
}

CDOTAUserMsg_CustomHudElement_Modify::~CDOTAUserMsg_CustomHudElement_Modify() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Modify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CustomHudElement_Modify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  element_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Modify::ArenaDtor(void* object) {
  CDOTAUserMsg_CustomHudElement_Modify* _this = reinterpret_cast< CDOTAUserMsg_CustomHudElement_Modify* >(object);
  (void)_this;
}
void CDOTAUserMsg_CustomHudElement_Modify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CustomHudElement_Modify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Modify::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Modify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      element_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  modify_visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Modify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Modify.element_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool modify_visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_modify_visible(&has_bits);
          modify_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CustomHudElement_Modify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Modify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Modify.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  // optional bool modify_visible = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_modify_visible(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Modify)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Modify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Modify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string element_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_element_id());
    }

    // optional bytes data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional bool modify_visible = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Modify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Modify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CustomHudElement_Modify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CustomHudElement_Modify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CustomHudElement_Modify)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Modify::MergeFrom(const CDOTAUserMsg_CustomHudElement_Modify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_element_id(from._internal_element_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      modify_visible_ = from.modify_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomHudElement_Modify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Modify::CopyFrom(const CDOTAUserMsg_CustomHudElement_Modify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Modify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Modify::InternalSwap(CDOTAUserMsg_CustomHudElement_Modify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_id_.Swap(&other->element_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(modify_visible_, other->modify_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Modify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CustomHudElement_Destroy::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CustomHudElement_Destroy>()._has_bits_);
  static void set_has_element_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CustomHudElement_Destroy)
}
CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(const CDOTAUserMsg_CustomHudElement_Destroy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_element_id()) {
    element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CustomHudElement_Destroy)
}

void CDOTAUserMsg_CustomHudElement_Destroy::SharedCtor() {
element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_CustomHudElement_Destroy::~CDOTAUserMsg_CustomHudElement_Destroy() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CustomHudElement_Destroy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CustomHudElement_Destroy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  element_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Destroy::ArenaDtor(void* object) {
  CDOTAUserMsg_CustomHudElement_Destroy* _this = reinterpret_cast< CDOTAUserMsg_CustomHudElement_Destroy* >(object);
  (void)_this;
}
void CDOTAUserMsg_CustomHudElement_Destroy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CustomHudElement_Destroy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CustomHudElement_Destroy::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CustomHudElement_Destroy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    element_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CustomHudElement_Destroy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string element_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_element_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_CustomHudElement_Destroy.element_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CustomHudElement_Destroy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CustomHudElement_Destroy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_CustomHudElement_Destroy.element_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_element_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CustomHudElement_Destroy)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Destroy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CustomHudElement_Destroy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string element_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Destroy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Destroy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CustomHudElement_Destroy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CustomHudElement_Destroy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CustomHudElement_Destroy)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Destroy::MergeFrom(const CDOTAUserMsg_CustomHudElement_Destroy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_id()) {
    _internal_set_element_id(from._internal_element_id());
  }
}

void CDOTAUserMsg_CustomHudElement_Destroy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Destroy::CopyFrom(const CDOTAUserMsg_CustomHudElement_Destroy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CustomHudElement_Destroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Destroy::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Destroy::InternalSwap(CDOTAUserMsg_CustomHudElement_Destroy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_id_.Swap(&other->element_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CustomHudElement_Destroy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CompendiumStatePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CompendiumStatePlayer>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CompendiumStatePlayer)
}
CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(const CDOTAUserMsg_CompendiumStatePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CompendiumStatePlayer)
}

void CDOTAUserMsg_CompendiumStatePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_));
}

CDOTAUserMsg_CompendiumStatePlayer::~CDOTAUserMsg_CompendiumStatePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CompendiumStatePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CompendiumStatePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_CompendiumStatePlayer::ArenaDtor(void* object) {
  CDOTAUserMsg_CompendiumStatePlayer* _this = reinterpret_cast< CDOTAUserMsg_CompendiumStatePlayer* >(object);
  (void)_this;
}
void CDOTAUserMsg_CompendiumStatePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CompendiumStatePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CompendiumStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CompendiumStatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CompendiumStatePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CompendiumStatePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CompendiumStatePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CompendiumStatePlayer)
  return target;
}

size_t CDOTAUserMsg_CompendiumStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CompendiumStatePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CompendiumStatePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CompendiumStatePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CompendiumStatePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CompendiumStatePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CompendiumStatePlayer)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CompendiumStatePlayer::MergeFrom(const CDOTAUserMsg_CompendiumStatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CompendiumStatePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CompendiumStatePlayer::CopyFrom(const CDOTAUserMsg_CompendiumStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CompendiumStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumStatePlayer::InternalSwap(CDOTAUserMsg_CompendiumStatePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, level_)
      + sizeof(CDOTAUserMsg_CompendiumStatePlayer::level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CompendiumStatePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_CompendiumState::_Internal {
 public:
};

CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compendium_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CompendiumState)
}
CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(const CDOTAUserMsg_CompendiumState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compendium_players_(from.compendium_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CompendiumState)
}

void CDOTAUserMsg_CompendiumState::SharedCtor() {
}

CDOTAUserMsg_CompendiumState::~CDOTAUserMsg_CompendiumState() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CompendiumState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_CompendiumState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_CompendiumState::ArenaDtor(void* object) {
  CDOTAUserMsg_CompendiumState* _this = reinterpret_cast< CDOTAUserMsg_CompendiumState* >(object);
  (void)_this;
}
void CDOTAUserMsg_CompendiumState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CompendiumState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CompendiumState::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CompendiumState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compendium_players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CompendiumState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compendium_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_CompendiumState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CompendiumState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compendium_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_compendium_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CompendiumState)
  return target;
}

size_t CDOTAUserMsg_CompendiumState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CompendiumState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  total_size += 1UL * this->_internal_compendium_players_size();
  for (const auto& msg : this->compendium_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_CompendiumState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_CompendiumState)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CompendiumState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_CompendiumState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_CompendiumState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_CompendiumState)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CompendiumState::MergeFrom(const CDOTAUserMsg_CompendiumState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CompendiumState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compendium_players_.MergeFrom(from.compendium_players_);
}

void CDOTAUserMsg_CompendiumState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_CompendiumState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CompendiumState::CopyFrom(const CDOTAUserMsg_CompendiumState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CompendiumState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumState::InternalSwap(CDOTAUserMsg_CompendiumState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compendium_players_.InternalSwap(&other->compendium_players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CompendiumState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ProjectionAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ProjectionAbility>()._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caster_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_caster_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_end(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& origin(const CDOTAUserMsg_ProjectionAbility* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_track_caster_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_victim_ent_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgVector&
CDOTAUserMsg_ProjectionAbility::_Internal::origin(const CDOTAUserMsg_ProjectionAbility* msg) {
  return *msg->origin_;
}
void CDOTAUserMsg_ProjectionAbility::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ProjectionAbility)
}
CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(const CDOTAUserMsg_ProjectionAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&victim_ent_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(victim_ent_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ProjectionAbility)
}

void CDOTAUserMsg_ProjectionAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&victim_ent_index_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(victim_ent_index_));
}

CDOTAUserMsg_ProjectionAbility::~CDOTAUserMsg_ProjectionAbility() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ProjectionAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ProjectionAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
}

void CDOTAUserMsg_ProjectionAbility::ArenaDtor(void* object) {
  CDOTAUserMsg_ProjectionAbility* _this = reinterpret_cast< CDOTAUserMsg_ProjectionAbility* >(object);
  (void)_this;
}
void CDOTAUserMsg_ProjectionAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ProjectionAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ProjectionAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ProjectionAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(origin_ != nullptr);
    origin_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&victim_ent_index_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(victim_ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ProjectionAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caster_ent_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caster_ent_index(&has_bits);
          caster_ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caster_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_caster_team(&has_bits);
          caster_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_channel_end(&has_bits);
          channel_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool track_caster_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_track_caster_only(&has_bits);
          track_caster_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 victim_ent_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_victim_ent_index(&has_bits);
          victim_ent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ProjectionAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ProjectionAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 caster_ent_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_caster_ent_index(), target);
  }

  // optional int32 caster_team = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_team(), target);
  }

  // optional bool channel_end = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_channel_end(), target);
  }

  // optional .CMsgVector origin = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::origin(this), target, stream);
  }

  // optional bool track_caster_only = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_track_caster_only(), target);
  }

  // optional float end_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_end_time(), target);
  }

  // optional int32 victim_ent_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_victim_ent_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ProjectionAbility)
  return target;
}

size_t CDOTAUserMsg_ProjectionAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ProjectionAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional int32 caster_ent_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster_ent_index());
    }

    // optional int32 caster_team = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster_team());
    }

    // optional bool channel_end = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool track_caster_only = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float end_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 victim_ent_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_victim_ent_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ProjectionAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ProjectionAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ProjectionAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ProjectionAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ProjectionAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ProjectionAbility)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ProjectionAbility::MergeFrom(const CDOTAUserMsg_ProjectionAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ProjectionAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgVector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_ent_index_ = from.caster_ent_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_team_ = from.caster_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_end_ = from.channel_end_;
    }
    if (cached_has_bits & 0x00000020u) {
      track_caster_only_ = from.track_caster_only_;
    }
    if (cached_has_bits & 0x00000040u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      victim_ent_index_ = from.victim_ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ProjectionAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ProjectionAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ProjectionAbility::CopyFrom(const CDOTAUserMsg_ProjectionAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ProjectionAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionAbility::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionAbility::InternalSwap(CDOTAUserMsg_ProjectionAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, victim_ent_index_)
      + sizeof(CDOTAUserMsg_ProjectionAbility::victim_ent_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ProjectionAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ProjectionEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ProjectionEvent>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ProjectionEvent)
}
CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(const CDOTAUserMsg_ProjectionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ProjectionEvent)
}

void CDOTAUserMsg_ProjectionEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(team_));
}

CDOTAUserMsg_ProjectionEvent::~CDOTAUserMsg_ProjectionEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ProjectionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ProjectionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ProjectionEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_ProjectionEvent* _this = reinterpret_cast< CDOTAUserMsg_ProjectionEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_ProjectionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ProjectionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ProjectionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ProjectionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ProjectionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EProjectionEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EProjectionEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ProjectionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ProjectionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ProjectionEvent)
  return target;
}

size_t CDOTAUserMsg_ProjectionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ProjectionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ProjectionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ProjectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ProjectionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ProjectionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ProjectionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ProjectionEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ProjectionEvent::MergeFrom(const CDOTAUserMsg_ProjectionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ProjectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ProjectionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ProjectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ProjectionEvent::CopyFrom(const CDOTAUserMsg_ProjectionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ProjectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionEvent::InternalSwap(CDOTAUserMsg_ProjectionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, team_)
      + sizeof(CDOTAUserMsg_ProjectionEvent::team_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ProjectionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_XPAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_XPAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_XPAlert)
}
CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(const CDOTAUserMsg_XPAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_XPAlert)
}

void CDOTAUserMsg_XPAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
}

CDOTAUserMsg_XPAlert::~CDOTAUserMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_XPAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_XPAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_XPAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_XPAlert* _this = reinterpret_cast< CDOTAUserMsg_XPAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_XPAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_XPAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_XPAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_XPAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_XPAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_XPAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_XPAlert)
  return target;
}

size_t CDOTAUserMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_XPAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_XPAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_XPAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_XPAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_XPAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_XPAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_XPAlert::MergeFrom(const CDOTAUserMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_XPAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_XPAlert::CopyFrom(const CDOTAUserMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_XPAlert::InternalSwap(CDOTAUserMsg_XPAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_XPAlert, target_entindex_)
      + sizeof(CDOTAUserMsg_XPAlert::target_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_XPAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_XPAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TalentTreeAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TalentTreeAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_learned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TalentTreeAlert)
}
CDOTAUserMsg_TalentTreeAlert::CDOTAUserMsg_TalentTreeAlert(const CDOTAUserMsg_TalentTreeAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&learned_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(learned_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TalentTreeAlert)
}

void CDOTAUserMsg_TalentTreeAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&learned_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(learned_));
}

CDOTAUserMsg_TalentTreeAlert::~CDOTAUserMsg_TalentTreeAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TalentTreeAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TalentTreeAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_TalentTreeAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_TalentTreeAlert* _this = reinterpret_cast< CDOTAUserMsg_TalentTreeAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_TalentTreeAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TalentTreeAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TalentTreeAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TalentTreeAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&learned_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(learned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TalentTreeAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool learned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_learned(&has_bits);
          learned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TalentTreeAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TalentTreeAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_entindex(), target);
  }

  // optional int32 ability_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // optional int32 slot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_slot(), target);
  }

  // optional bool learned = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_learned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TalentTreeAlert)
  return target;
}

size_t CDOTAUserMsg_TalentTreeAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TalentTreeAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 target_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional int32 ability_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_id());
    }

    // optional int32 slot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
    }

    // optional bool learned = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TalentTreeAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TalentTreeAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TalentTreeAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TalentTreeAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TalentTreeAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TalentTreeAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TalentTreeAlert::MergeFrom(const CDOTAUserMsg_TalentTreeAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TalentTreeAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      learned_ = from.learned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TalentTreeAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TalentTreeAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TalentTreeAlert::CopyFrom(const CDOTAUserMsg_TalentTreeAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TalentTreeAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TalentTreeAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TalentTreeAlert::InternalSwap(CDOTAUserMsg_TalentTreeAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TalentTreeAlert, learned_)
      + sizeof(CDOTAUserMsg_TalentTreeAlert::learned_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_TalentTreeAlert, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TalentTreeAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_UpdateQuestProgress::_Internal {
 public:
};

CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_UpdateQuestProgress)
}
CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(const CDOTAUserMsg_UpdateQuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_UpdateQuestProgress)
}

void CDOTAUserMsg_UpdateQuestProgress::SharedCtor() {
}

CDOTAUserMsg_UpdateQuestProgress::~CDOTAUserMsg_UpdateQuestProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_UpdateQuestProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_UpdateQuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_UpdateQuestProgress::ArenaDtor(void* object) {
  CDOTAUserMsg_UpdateQuestProgress* _this = reinterpret_cast< CDOTAUserMsg_UpdateQuestProgress* >(object);
  (void)_this;
}
void CDOTAUserMsg_UpdateQuestProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_UpdateQuestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_UpdateQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_UpdateQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_UpdateQuestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_UpdateQuestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_UpdateQuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_UpdateQuestProgress)
  return target;
}

size_t CDOTAUserMsg_UpdateQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_UpdateQuestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_UpdateQuestProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_UpdateQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UpdateQuestProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_UpdateQuestProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_UpdateQuestProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_UpdateQuestProgress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UpdateQuestProgress::MergeFrom(const CDOTAUserMsg_UpdateQuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_UpdateQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_UpdateQuestProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_UpdateQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UpdateQuestProgress::CopyFrom(const CDOTAUserMsg_UpdateQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_UpdateQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateQuestProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UpdateQuestProgress::InternalSwap(CDOTAUserMsg_UpdateQuestProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_UpdateQuestProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_QuestStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QuestStatus>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fail_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QuestStatus)
}
CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(const CDOTAUserMsg_QuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QuestStatus)
}

void CDOTAUserMsg_QuestStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
}

CDOTAUserMsg_QuestStatus::~CDOTAUserMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QuestStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_QuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_QuestStatus::ArenaDtor(void* object) {
  CDOTAUserMsg_QuestStatus* _this = reinterpret_cast< CDOTAUserMsg_QuestStatus* >(object);
  (void)_this;
}
void CDOTAUserMsg_QuestStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_QuestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QuestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QuestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quest_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_id(&has_bits);
          challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_goal(&has_bits);
          goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_query(&has_bits);
          query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fail_gametime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fail_gametime(&has_bits);
          fail_gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_ability_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_QuestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QuestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 quest_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quest_id(), target);
  }

  // optional uint32 challenge_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_progress(), target);
  }

  // optional uint32 goal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_goal(), target);
  }

  // optional uint32 query = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_query(), target);
  }

  // optional float fail_gametime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fail_gametime(), target);
  }

  // optional uint32 item_ability_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_item_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QuestStatus)
  return target;
}

size_t CDOTAUserMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QuestStatus)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional uint32 quest_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_id());
    }

    // optional uint32 challenge_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_id());
    }

    // optional uint32 progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

    // optional uint32 goal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goal());
    }

    // optional uint32 query = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_query());
    }

    // optional float fail_gametime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 item_ability_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_QuestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QuestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_QuestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_QuestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_QuestStatus)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QuestStatus::MergeFrom(const CDOTAUserMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_id_ = from.challenge_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      goal_ = from.goal_;
    }
    if (cached_has_bits & 0x00000020u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000040u) {
      fail_gametime_ = from.fail_gametime_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_QuestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QuestStatus::CopyFrom(const CDOTAUserMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuestStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_QuestStatus::InternalSwap(CDOTAUserMsg_QuestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, item_ability_id_)
      + sizeof(CDOTAUserMsg_QuestStatus::item_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QuestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SuggestHeroPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SuggestHeroPick>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ban(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SuggestHeroPick)
}
CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(const CDOTAUserMsg_SuggestHeroPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ban_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SuggestHeroPick)
}

void CDOTAUserMsg_SuggestHeroPick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ban_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ban_));
}

CDOTAUserMsg_SuggestHeroPick::~CDOTAUserMsg_SuggestHeroPick() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SuggestHeroPick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SuggestHeroPick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SuggestHeroPick::ArenaDtor(void* object) {
  CDOTAUserMsg_SuggestHeroPick* _this = reinterpret_cast< CDOTAUserMsg_SuggestHeroPick* >(object);
  (void)_this;
}
void CDOTAUserMsg_SuggestHeroPick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SuggestHeroPick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SuggestHeroPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SuggestHeroPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(ban_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SuggestHeroPick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ban = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ban(&has_bits);
          ban_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SuggestHeroPick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SuggestHeroPick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional bool ban = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ban(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SuggestHeroPick)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SuggestHeroPick)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional bool ban = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SuggestHeroPick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SuggestHeroPick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SuggestHeroPick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SuggestHeroPick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SuggestHeroPick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SuggestHeroPick)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SuggestHeroPick::MergeFrom(const CDOTAUserMsg_SuggestHeroPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SuggestHeroPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ban_ = from.ban_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SuggestHeroPick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SuggestHeroPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SuggestHeroPick::CopyFrom(const CDOTAUserMsg_SuggestHeroPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SuggestHeroPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroPick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroPick::InternalSwap(CDOTAUserMsg_SuggestHeroPick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, ban_)
      + sizeof(CDOTAUserMsg_SuggestHeroPick::ban_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SuggestHeroPick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SuggestHeroRole::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SuggestHeroRole>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SuggestHeroRole)
}
CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(const CDOTAUserMsg_SuggestHeroRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_role()) {
    hero_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_role(), 
      GetArena());
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SuggestHeroRole)
}

void CDOTAUserMsg_SuggestHeroRole::SharedCtor() {
hero_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = 0u;
}

CDOTAUserMsg_SuggestHeroRole::~CDOTAUserMsg_SuggestHeroRole() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SuggestHeroRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SuggestHeroRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hero_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SuggestHeroRole::ArenaDtor(void* object) {
  CDOTAUserMsg_SuggestHeroRole* _this = reinterpret_cast< CDOTAUserMsg_SuggestHeroRole* >(object);
  (void)_this;
}
void CDOTAUserMsg_SuggestHeroRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SuggestHeroRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SuggestHeroRole::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SuggestHeroRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hero_role_.ClearNonDefaultToEmpty();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SuggestHeroRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hero_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_SuggestHeroRole.hero_role");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SuggestHeroRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SuggestHeroRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string hero_role = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_role().data(), static_cast<int>(this->_internal_hero_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_SuggestHeroRole.hero_role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hero_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SuggestHeroRole)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SuggestHeroRole)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hero_role = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hero_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SuggestHeroRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SuggestHeroRole)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SuggestHeroRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SuggestHeroRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SuggestHeroRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SuggestHeroRole)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SuggestHeroRole::MergeFrom(const CDOTAUserMsg_SuggestHeroRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SuggestHeroRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hero_role(from._internal_hero_role());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SuggestHeroRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SuggestHeroRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SuggestHeroRole::CopyFrom(const CDOTAUserMsg_SuggestHeroRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SuggestHeroRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroRole::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroRole::InternalSwap(CDOTAUserMsg_SuggestHeroRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_role_.Swap(&other->hero_role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SuggestHeroRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_KillcamDamageTaken::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_KillcamDamageTaken>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_KillcamDamageTaken)
}
CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(const CDOTAUserMsg_KillcamDamageTaken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_name()) {
    hero_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_name(), 
      GetArena());
  }
  damage_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_damage_color()) {
    damage_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_damage_color(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_KillcamDamageTaken)
}

void CDOTAUserMsg_KillcamDamageTaken::SharedCtor() {
hero_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
damage_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_ability_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
}

CDOTAUserMsg_KillcamDamageTaken::~CDOTAUserMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_KillcamDamageTaken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_KillcamDamageTaken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hero_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  damage_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_KillcamDamageTaken::ArenaDtor(void* object) {
  CDOTAUserMsg_KillcamDamageTaken* _this = reinterpret_cast< CDOTAUserMsg_KillcamDamageTaken* >(object);
  (void)_this;
}
void CDOTAUserMsg_KillcamDamageTaken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_KillcamDamageTaken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      damage_color_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_ability_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(item_ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_KillcamDamageTaken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage_taken(&has_bits);
          damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_type(&has_bits);
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_ability_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_KillcamDamageTaken.hero_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string damage_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_damage_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_KillcamDamageTaken.damage_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_KillcamDamageTaken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_KillcamDamageTaken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_type(), target);
  }

  // optional uint32 item_ability_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_item_ability_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_KillcamDamageTaken.hero_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_damage_color().data(), static_cast<int>(this->_internal_damage_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_KillcamDamageTaken.damage_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_damage_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAUserMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_KillcamDamageTaken)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string hero_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional string damage_color = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_damage_color());
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional uint32 damage_taken = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_taken());
    }

    // optional uint32 item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_type());
    }

    // optional uint32 item_ability_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_KillcamDamageTaken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_KillcamDamageTaken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_KillcamDamageTaken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_KillcamDamageTaken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_KillcamDamageTaken)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_KillcamDamageTaken::MergeFrom(const CDOTAUserMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_damage_color(from._internal_damage_color());
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_ability_id_ = from.item_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_KillcamDamageTaken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_KillcamDamageTaken::CopyFrom(const CDOTAUserMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_KillcamDamageTaken::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_KillcamDamageTaken::InternalSwap(CDOTAUserMsg_KillcamDamageTaken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hero_name_.Swap(&other->hero_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  damage_color_.Swap(&other->damage_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, item_ability_id_)
      + sizeof(CDOTAUserMsg_KillcamDamageTaken::item_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_KillcamDamageTaken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SelectPenaltyGold::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SelectPenaltyGold>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SelectPenaltyGold)
}
CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(const CDOTAUserMsg_SelectPenaltyGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SelectPenaltyGold)
}

void CDOTAUserMsg_SelectPenaltyGold::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(cost_));
}

CDOTAUserMsg_SelectPenaltyGold::~CDOTAUserMsg_SelectPenaltyGold() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SelectPenaltyGold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SelectPenaltyGold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SelectPenaltyGold::ArenaDtor(void* object) {
  CDOTAUserMsg_SelectPenaltyGold* _this = reinterpret_cast< CDOTAUserMsg_SelectPenaltyGold* >(object);
  (void)_this;
}
void CDOTAUserMsg_SelectPenaltyGold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SelectPenaltyGold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SelectPenaltyGold::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SelectPenaltyGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SelectPenaltyGold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cost(&has_bits);
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SelectPenaltyGold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SelectPenaltyGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional sint32 cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SelectPenaltyGold)
  return target;
}

size_t CDOTAUserMsg_SelectPenaltyGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SelectPenaltyGold)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sint32 cost = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SelectPenaltyGold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SelectPenaltyGold)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SelectPenaltyGold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SelectPenaltyGold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SelectPenaltyGold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SelectPenaltyGold)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SelectPenaltyGold::MergeFrom(const CDOTAUserMsg_SelectPenaltyGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SelectPenaltyGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cost_ = from.cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SelectPenaltyGold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SelectPenaltyGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SelectPenaltyGold::CopyFrom(const CDOTAUserMsg_SelectPenaltyGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SelectPenaltyGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SelectPenaltyGold::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_SelectPenaltyGold::InternalSwap(CDOTAUserMsg_SelectPenaltyGold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, cost_)
      + sizeof(CDOTAUserMsg_SelectPenaltyGold::cost_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SelectPenaltyGold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_RollDiceResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_RollDiceResult>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_RollDiceResult)
}
CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(const CDOTAUserMsg_RollDiceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_RollDiceResult)
}

void CDOTAUserMsg_RollDiceResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
}

CDOTAUserMsg_RollDiceResult::~CDOTAUserMsg_RollDiceResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_RollDiceResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_RollDiceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_RollDiceResult::ArenaDtor(void* object) {
  CDOTAUserMsg_RollDiceResult* _this = reinterpret_cast< CDOTAUserMsg_RollDiceResult* >(object);
  (void)_this;
}
void CDOTAUserMsg_RollDiceResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_RollDiceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_RollDiceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_RollDiceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_RollDiceResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roll_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_roll_min(&has_bits);
          roll_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roll_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_roll_max(&has_bits);
          roll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_RollDiceResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_RollDiceResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional uint32 roll_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roll_min(), target);
  }

  // optional uint32 roll_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_roll_max(), target);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_RollDiceResult)
  return target;
}

size_t CDOTAUserMsg_RollDiceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_RollDiceResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

    // optional uint32 roll_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roll_min());
    }

    // optional uint32 roll_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roll_max());
    }

    // optional uint32 result = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_RollDiceResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_RollDiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_RollDiceResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_RollDiceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_RollDiceResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_RollDiceResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_RollDiceResult::MergeFrom(const CDOTAUserMsg_RollDiceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_RollDiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      roll_max_ = from.roll_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_RollDiceResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_RollDiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_RollDiceResult::CopyFrom(const CDOTAUserMsg_RollDiceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_RollDiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RollDiceResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RollDiceResult::InternalSwap(CDOTAUserMsg_RollDiceResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, result_)
      + sizeof(CDOTAUserMsg_RollDiceResult::result_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_RollDiceResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_FlipCoinResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_FlipCoinResult>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_FlipCoinResult)
}
CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(const CDOTAUserMsg_FlipCoinResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_FlipCoinResult)
}

void CDOTAUserMsg_FlipCoinResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
}

CDOTAUserMsg_FlipCoinResult::~CDOTAUserMsg_FlipCoinResult() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_FlipCoinResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_FlipCoinResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_FlipCoinResult::ArenaDtor(void* object) {
  CDOTAUserMsg_FlipCoinResult* _this = reinterpret_cast< CDOTAUserMsg_FlipCoinResult* >(object);
  (void)_this;
}
void CDOTAUserMsg_FlipCoinResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_FlipCoinResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_FlipCoinResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_FlipCoinResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_FlipCoinResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_FlipCoinResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_FlipCoinResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional bool result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_FlipCoinResult)
  return target;
}

size_t CDOTAUserMsg_FlipCoinResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_FlipCoinResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

    // optional bool result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_FlipCoinResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_FlipCoinResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_FlipCoinResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_FlipCoinResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_FlipCoinResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_FlipCoinResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_FlipCoinResult::MergeFrom(const CDOTAUserMsg_FlipCoinResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_FlipCoinResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_FlipCoinResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_FlipCoinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_FlipCoinResult::CopyFrom(const CDOTAUserMsg_FlipCoinResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_FlipCoinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_FlipCoinResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_FlipCoinResult::InternalSwap(CDOTAUserMsg_FlipCoinResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, result_)
      + sizeof(CDOTAUserMsg_FlipCoinResult::result_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_FlipCoinResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMessage_RequestItemSuggestions::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMessage_RequestItemSuggestions>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMessage_RequestItemSuggestions)
}
CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(const CDOTAUserMessage_RequestItemSuggestions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMessage_RequestItemSuggestions)
}

void CDOTAUserMessage_RequestItemSuggestions::SharedCtor() {
player_id_ = 0u;
}

CDOTAUserMessage_RequestItemSuggestions::~CDOTAUserMessage_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:CDOTAUserMessage_RequestItemSuggestions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMessage_RequestItemSuggestions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMessage_RequestItemSuggestions::ArenaDtor(void* object) {
  CDOTAUserMessage_RequestItemSuggestions* _this = reinterpret_cast< CDOTAUserMessage_RequestItemSuggestions* >(object);
  (void)_this;
}
void CDOTAUserMessage_RequestItemSuggestions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMessage_RequestItemSuggestions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMessage_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMessage_RequestItemSuggestions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMessage_RequestItemSuggestions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMessage_RequestItemSuggestions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMessage_RequestItemSuggestions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMessage_RequestItemSuggestions)
  return target;
}

size_t CDOTAUserMessage_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMessage_RequestItemSuggestions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMessage_RequestItemSuggestions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMessage_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMessage_RequestItemSuggestions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMessage_RequestItemSuggestions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMessage_RequestItemSuggestions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMessage_RequestItemSuggestions)
    MergeFrom(*source);
  }
}

void CDOTAUserMessage_RequestItemSuggestions::MergeFrom(const CDOTAUserMessage_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMessage_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAUserMessage_RequestItemSuggestions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMessage_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMessage_RequestItemSuggestions::CopyFrom(const CDOTAUserMessage_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMessage_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_RequestItemSuggestions::InternalSwap(CDOTAUserMessage_RequestItemSuggestions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMessage_RequestItemSuggestions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMessage_TeamCaptainChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMessage_TeamCaptainChanged>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMessage_TeamCaptainChanged)
}
CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(const CDOTAUserMessage_TeamCaptainChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&captain_player_id_) -
    reinterpret_cast<char*>(&team_)) + sizeof(captain_player_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMessage_TeamCaptainChanged)
}

void CDOTAUserMessage_TeamCaptainChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&captain_player_id_) -
    reinterpret_cast<char*>(&team_)) + sizeof(captain_player_id_));
}

CDOTAUserMessage_TeamCaptainChanged::~CDOTAUserMessage_TeamCaptainChanged() {
  // @@protoc_insertion_point(destructor:CDOTAUserMessage_TeamCaptainChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMessage_TeamCaptainChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMessage_TeamCaptainChanged::ArenaDtor(void* object) {
  CDOTAUserMessage_TeamCaptainChanged* _this = reinterpret_cast< CDOTAUserMessage_TeamCaptainChanged* >(object);
  (void)_this;
}
void CDOTAUserMessage_TeamCaptainChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMessage_TeamCaptainChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMessage_TeamCaptainChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMessage_TeamCaptainChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&captain_player_id_) -
        reinterpret_cast<char*>(&team_)) + sizeof(captain_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMessage_TeamCaptainChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 captain_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_captain_player_id(&has_bits);
          captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMessage_TeamCaptainChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMessage_TeamCaptainChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional uint32 captain_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_captain_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMessage_TeamCaptainChanged)
  return target;
}

size_t CDOTAUserMessage_TeamCaptainChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMessage_TeamCaptainChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 captain_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_captain_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMessage_TeamCaptainChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMessage_TeamCaptainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMessage_TeamCaptainChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMessage_TeamCaptainChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMessage_TeamCaptainChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMessage_TeamCaptainChanged)
    MergeFrom(*source);
  }
}

void CDOTAUserMessage_TeamCaptainChanged::MergeFrom(const CDOTAUserMessage_TeamCaptainChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMessage_TeamCaptainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      captain_player_id_ = from.captain_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMessage_TeamCaptainChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMessage_TeamCaptainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMessage_TeamCaptainChanged::CopyFrom(const CDOTAUserMessage_TeamCaptainChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMessage_TeamCaptainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_TeamCaptainChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_TeamCaptainChanged::InternalSwap(CDOTAUserMessage_TeamCaptainChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, captain_player_id_)
      + sizeof(CDOTAUserMessage_TeamCaptainChanged::captain_player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMessage_TeamCaptainChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ChatWheelCooldown::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatWheelCooldown>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cooldown_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatWheelCooldown)
}
CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(const CDOTAUserMsg_ChatWheelCooldown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_remaining_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(cooldown_remaining_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatWheelCooldown)
}

void CDOTAUserMsg_ChatWheelCooldown::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_remaining_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(cooldown_remaining_));
}

CDOTAUserMsg_ChatWheelCooldown::~CDOTAUserMsg_ChatWheelCooldown() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatWheelCooldown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ChatWheelCooldown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ChatWheelCooldown::ArenaDtor(void* object) {
  CDOTAUserMsg_ChatWheelCooldown* _this = reinterpret_cast< CDOTAUserMsg_ChatWheelCooldown* >(object);
  (void)_this;
}
void CDOTAUserMsg_ChatWheelCooldown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ChatWheelCooldown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ChatWheelCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatWheelCooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_remaining_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(cooldown_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatWheelCooldown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_cooldown_remaining(&has_bits);
          cooldown_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ChatWheelCooldown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatWheelCooldown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // optional float cooldown_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cooldown_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatWheelCooldown)
  return target;
}

size_t CDOTAUserMsg_ChatWheelCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatWheelCooldown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id());
    }

    // optional float cooldown_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ChatWheelCooldown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ChatWheelCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatWheelCooldown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ChatWheelCooldown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ChatWheelCooldown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ChatWheelCooldown)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatWheelCooldown::MergeFrom(const CDOTAUserMsg_ChatWheelCooldown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatWheelCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cooldown_remaining_ = from.cooldown_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatWheelCooldown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ChatWheelCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatWheelCooldown::CopyFrom(const CDOTAUserMsg_ChatWheelCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatWheelCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheelCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheelCooldown::InternalSwap(CDOTAUserMsg_ChatWheelCooldown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, cooldown_remaining_)
      + sizeof(CDOTAUserMsg_ChatWheelCooldown::cooldown_remaining_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, message_id_)>(
          reinterpret_cast<char*>(&message_id_),
          reinterpret_cast<char*>(&other->message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatWheelCooldown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HeroRelicProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HeroRelicProgress>()._has_bits_);
  static void set_has_hero_relic_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HeroRelicProgress)
}
CDOTAUserMsg_HeroRelicProgress::CDOTAUserMsg_HeroRelicProgress(const CDOTAUserMsg_HeroRelicProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_relic_type_, &from.hero_relic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&hero_relic_type_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HeroRelicProgress)
}

void CDOTAUserMsg_HeroRelicProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_relic_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&hero_relic_type_)) + sizeof(event_id_));
}

CDOTAUserMsg_HeroRelicProgress::~CDOTAUserMsg_HeroRelicProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HeroRelicProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HeroRelicProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HeroRelicProgress::ArenaDtor(void* object) {
  CDOTAUserMsg_HeroRelicProgress* _this = reinterpret_cast< CDOTAUserMsg_HeroRelicProgress* >(object);
  (void)_this;
}
void CDOTAUserMsg_HeroRelicProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HeroRelicProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HeroRelicProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HeroRelicProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hero_relic_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&hero_relic_type_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HeroRelicProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_relic_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_relic_type(&has_bits);
          hero_relic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ehandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HeroRelicProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HeroRelicProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_relic_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_relic_type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional uint32 ehandle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ehandle(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HeroRelicProgress)
  return target;
}

size_t CDOTAUserMsg_HeroRelicProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HeroRelicProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 hero_relic_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_relic_type());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

    // optional uint32 ehandle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HeroRelicProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HeroRelicProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HeroRelicProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HeroRelicProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HeroRelicProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HeroRelicProgress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HeroRelicProgress::MergeFrom(const CDOTAUserMsg_HeroRelicProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HeroRelicProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hero_relic_type_ = from.hero_relic_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_HeroRelicProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HeroRelicProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HeroRelicProgress::CopyFrom(const CDOTAUserMsg_HeroRelicProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HeroRelicProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HeroRelicProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HeroRelicProgress::InternalSwap(CDOTAUserMsg_HeroRelicProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HeroRelicProgress, event_id_)
      + sizeof(CDOTAUserMsg_HeroRelicProgress::event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HeroRelicProgress, hero_relic_type_)>(
          reinterpret_cast<char*>(&hero_relic_type_),
          reinterpret_cast<char*>(&other->hero_relic_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HeroRelicProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AbilityDraftRequestAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AbilityDraftRequestAbility>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requested_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctrl_is_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AbilityDraftRequestAbility)
}
CDOTAUserMsg_AbilityDraftRequestAbility::CDOTAUserMsg_AbilityDraftRequestAbility(const CDOTAUserMsg_AbilityDraftRequestAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctrl_is_down_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ctrl_is_down_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AbilityDraftRequestAbility)
}

void CDOTAUserMsg_AbilityDraftRequestAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ctrl_is_down_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ctrl_is_down_));
}

CDOTAUserMsg_AbilityDraftRequestAbility::~CDOTAUserMsg_AbilityDraftRequestAbility() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AbilityDraftRequestAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AbilityDraftRequestAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::ArenaDtor(void* object) {
  CDOTAUserMsg_AbilityDraftRequestAbility* _this = reinterpret_cast< CDOTAUserMsg_AbilityDraftRequestAbility* >(object);
  (void)_this;
}
void CDOTAUserMsg_AbilityDraftRequestAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AbilityDraftRequestAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctrl_is_down_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(ctrl_is_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AbilityDraftRequestAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 requested_ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_requested_ability_id(&has_bits);
          requested_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_is_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ctrl_is_down(&has_bits);
          ctrl_is_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AbilityDraftRequestAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 requested_ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_requested_ability_id(), target);
  }

  // optional bool ctrl_is_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ctrl_is_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AbilityDraftRequestAbility)
  return target;
}

size_t CDOTAUserMsg_AbilityDraftRequestAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 requested_ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requested_ability_id());
    }

    // optional bool ctrl_is_down = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AbilityDraftRequestAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AbilityDraftRequestAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AbilityDraftRequestAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AbilityDraftRequestAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AbilityDraftRequestAbility)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilityDraftRequestAbility::MergeFrom(const CDOTAUserMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      requested_ability_id_ = from.requested_ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ctrl_is_down_ = from.ctrl_is_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AbilityDraftRequestAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilityDraftRequestAbility::CopyFrom(const CDOTAUserMsg_AbilityDraftRequestAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AbilityDraftRequestAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityDraftRequestAbility::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilityDraftRequestAbility::InternalSwap(CDOTAUserMsg_AbilityDraftRequestAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityDraftRequestAbility, ctrl_is_down_)
      + sizeof(CDOTAUserMsg_AbilityDraftRequestAbility::ctrl_is_down_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AbilityDraftRequestAbility, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AbilityDraftRequestAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_DamageReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DamageReport>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DamageReport)
}
CDOTAUserMsg_DamageReport::CDOTAUserMsg_DamageReport(const CDOTAUserMsg_DamageReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DamageReport)
}

void CDOTAUserMsg_DamageReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(broadcast_));
}

CDOTAUserMsg_DamageReport::~CDOTAUserMsg_DamageReport() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DamageReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_DamageReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_DamageReport::ArenaDtor(void* object) {
  CDOTAUserMsg_DamageReport* _this = reinterpret_cast< CDOTAUserMsg_DamageReport* >(object);
  (void)_this;
}
void CDOTAUserMsg_DamageReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_DamageReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_DamageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DamageReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(broadcast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DamageReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_hero_id(&has_bits);
          target_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_hero_id(&has_bits);
          source_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 damage_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_damage_amount(&has_bits);
          damage_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_DamageReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DamageReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 target_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_hero_id(), target);
  }

  // optional uint32 source_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_hero_id(), target);
  }

  // optional int32 damage_amount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage_amount(), target);
  }

  // optional bool broadcast = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DamageReport)
  return target;
}

size_t CDOTAUserMsg_DamageReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DamageReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 target_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_hero_id());
    }

    // optional uint32 source_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_hero_id());
    }

    // optional int32 damage_amount = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_damage_amount());
    }

    // optional bool broadcast = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_DamageReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DamageReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_DamageReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_DamageReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_DamageReport)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DamageReport::MergeFrom(const CDOTAUserMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DamageReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_hero_id_ = from.target_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_hero_id_ = from.source_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_amount_ = from.damage_amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_DamageReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DamageReport::CopyFrom(const CDOTAUserMsg_DamageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DamageReport::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DamageReport::InternalSwap(CDOTAUserMsg_DamageReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DamageReport, broadcast_)
      + sizeof(CDOTAUserMsg_DamageReport::broadcast_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DamageReport, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DamageReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_SalutePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_SalutePlayer>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_SalutePlayer)
}
CDOTAUserMsg_SalutePlayer::CDOTAUserMsg_SalutePlayer(const CDOTAUserMsg_SalutePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_SalutePlayer)
}

void CDOTAUserMsg_SalutePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
}

CDOTAUserMsg_SalutePlayer::~CDOTAUserMsg_SalutePlayer() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_SalutePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_SalutePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_SalutePlayer::ArenaDtor(void* object) {
  CDOTAUserMsg_SalutePlayer* _this = reinterpret_cast< CDOTAUserMsg_SalutePlayer* >(object);
  (void)_this;
}
void CDOTAUserMsg_SalutePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_SalutePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_SalutePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_SalutePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_SalutePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_SalutePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_SalutePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_SalutePlayer)
  return target;
}

size_t CDOTAUserMsg_SalutePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_SalutePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tip_amount());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_SalutePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SalutePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_SalutePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_SalutePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_SalutePlayer)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SalutePlayer::MergeFrom(const CDOTAUserMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_SalutePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tip_amount_ = from.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SalutePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SalutePlayer::CopyFrom(const CDOTAUserMsg_SalutePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_SalutePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SalutePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SalutePlayer::InternalSwap(CDOTAUserMsg_SalutePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SalutePlayer, event_id_)
      + sizeof(CDOTAUserMsg_SalutePlayer::event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_SalutePlayer, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_SalutePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_TipAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_TipAlert>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_TipAlert)
}
CDOTAUserMsg_TipAlert::CDOTAUserMsg_TipAlert(const CDOTAUserMsg_TipAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tip_text()) {
    tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_text(), 
      GetArena());
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_TipAlert)
}

void CDOTAUserMsg_TipAlert::SharedCtor() {
tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = 0u;
}

CDOTAUserMsg_TipAlert::~CDOTAUserMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_TipAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_TipAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tip_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_TipAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_TipAlert* _this = reinterpret_cast< CDOTAUserMsg_TipAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_TipAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_TipAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tip_text_.ClearNonDefaultToEmpty();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_TipAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tip_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tip_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_TipAlert.tip_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_TipAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_TipAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional string tip_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text().data(), static_cast<int>(this->_internal_tip_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_TipAlert.tip_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tip_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_TipAlert)
  return target;
}

size_t CDOTAUserMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_TipAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tip_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_text());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_TipAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TipAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_TipAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_TipAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_TipAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TipAlert::MergeFrom(const CDOTAUserMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tip_text(from._internal_tip_text());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TipAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TipAlert::CopyFrom(const CDOTAUserMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TipAlert::InternalSwap(CDOTAUserMsg_TipAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tip_text_.Swap(&other->tip_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_TipAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ReplaceQueryUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ReplaceQueryUnit>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ReplaceQueryUnit)
}
CDOTAUserMsg_ReplaceQueryUnit::CDOTAUserMsg_ReplaceQueryUnit(const CDOTAUserMsg_ReplaceQueryUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ReplaceQueryUnit)
}

void CDOTAUserMsg_ReplaceQueryUnit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
}

CDOTAUserMsg_ReplaceQueryUnit::~CDOTAUserMsg_ReplaceQueryUnit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ReplaceQueryUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ReplaceQueryUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ReplaceQueryUnit::ArenaDtor(void* object) {
  CDOTAUserMsg_ReplaceQueryUnit* _this = reinterpret_cast< CDOTAUserMsg_ReplaceQueryUnit* >(object);
  (void)_this;
}
void CDOTAUserMsg_ReplaceQueryUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ReplaceQueryUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ReplaceQueryUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ReplaceQueryUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_entindex_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ReplaceQueryUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_entindex(&has_bits);
          source_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ReplaceQueryUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ReplaceQueryUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 source_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_entindex(), target);
  }

  // optional uint32 target_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ReplaceQueryUnit)
  return target;
}

size_t CDOTAUserMsg_ReplaceQueryUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ReplaceQueryUnit)
  size_t total_size = 0;

  // required uint32 player_id = 1;
  if (_internal_has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 source_entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_entindex());
    }

    // optional uint32 target_entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ReplaceQueryUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ReplaceQueryUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ReplaceQueryUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ReplaceQueryUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ReplaceQueryUnit)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ReplaceQueryUnit::MergeFrom(const CDOTAUserMsg_ReplaceQueryUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_entindex_ = from.source_entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ReplaceQueryUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ReplaceQueryUnit::CopyFrom(const CDOTAUserMsg_ReplaceQueryUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ReplaceQueryUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReplaceQueryUnit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_ReplaceQueryUnit::InternalSwap(CDOTAUserMsg_ReplaceQueryUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ReplaceQueryUnit, target_entindex_)
      + sizeof(CDOTAUserMsg_ReplaceQueryUnit::target_entindex_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ReplaceQueryUnit, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ReplaceQueryUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ESArcanaCombo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ESArcanaCombo>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_combo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ESArcanaCombo)
}
CDOTAUserMsg_ESArcanaCombo::CDOTAUserMsg_ESArcanaCombo(const CDOTAUserMsg_ESArcanaCombo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&arcana_level_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ESArcanaCombo)
}

void CDOTAUserMsg_ESArcanaCombo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arcana_level_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
}

CDOTAUserMsg_ESArcanaCombo::~CDOTAUserMsg_ESArcanaCombo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ESArcanaCombo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ESArcanaCombo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ESArcanaCombo::ArenaDtor(void* object) {
  CDOTAUserMsg_ESArcanaCombo* _this = reinterpret_cast< CDOTAUserMsg_ESArcanaCombo* >(object);
  (void)_this;
}
void CDOTAUserMsg_ESArcanaCombo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ESArcanaCombo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ESArcanaCombo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ESArcanaCombo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&arcana_level_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ESArcanaCombo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 combo_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_combo_count(&has_bits);
          combo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ESArcanaCombo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ESArcanaCombo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 combo_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_combo_count(), target);
  }

  // optional uint32 arcana_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arcana_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ESArcanaCombo)
  return target;
}

size_t CDOTAUserMsg_ESArcanaCombo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ESArcanaCombo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 combo_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_combo_count());
    }

    // optional uint32 arcana_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ESArcanaCombo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ESArcanaCombo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ESArcanaCombo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ESArcanaCombo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ESArcanaCombo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ESArcanaCombo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ESArcanaCombo::MergeFrom(const CDOTAUserMsg_ESArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ESArcanaCombo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      combo_count_ = from.combo_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      arcana_level_ = from.arcana_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ESArcanaCombo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ESArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ESArcanaCombo::CopyFrom(const CDOTAUserMsg_ESArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ESArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ESArcanaCombo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ESArcanaCombo::InternalSwap(CDOTAUserMsg_ESArcanaCombo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaCombo, arcana_level_)
      + sizeof(CDOTAUserMsg_ESArcanaCombo::arcana_level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaCombo, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ESArcanaCombo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ESArcanaComboSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ESArcanaComboSummary>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_combo_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ESArcanaComboSummary)
}
CDOTAUserMsg_ESArcanaComboSummary::CDOTAUserMsg_ESArcanaComboSummary(const CDOTAUserMsg_ESArcanaComboSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_amount_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(damage_amount_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ESArcanaComboSummary)
}

void CDOTAUserMsg_ESArcanaComboSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_amount_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(damage_amount_));
}

CDOTAUserMsg_ESArcanaComboSummary::~CDOTAUserMsg_ESArcanaComboSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ESArcanaComboSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ESArcanaComboSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_ESArcanaComboSummary::ArenaDtor(void* object) {
  CDOTAUserMsg_ESArcanaComboSummary* _this = reinterpret_cast< CDOTAUserMsg_ESArcanaComboSummary* >(object);
  (void)_this;
}
void CDOTAUserMsg_ESArcanaComboSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ESArcanaComboSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ESArcanaComboSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ESArcanaComboSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_amount_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(damage_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ESArcanaComboSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 combo_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_combo_count(&has_bits);
          combo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_damage_amount(&has_bits);
          damage_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ESArcanaComboSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ESArcanaComboSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 combo_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_combo_count(), target);
  }

  // optional uint32 damage_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ESArcanaComboSummary)
  return target;
}

size_t CDOTAUserMsg_ESArcanaComboSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ESArcanaComboSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 combo_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_combo_count());
    }

    // optional uint32 damage_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ESArcanaComboSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ESArcanaComboSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ESArcanaComboSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ESArcanaComboSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ESArcanaComboSummary)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ESArcanaComboSummary::MergeFrom(const CDOTAUserMsg_ESArcanaComboSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      combo_count_ = from.combo_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      damage_amount_ = from.damage_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ESArcanaComboSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ESArcanaComboSummary::CopyFrom(const CDOTAUserMsg_ESArcanaComboSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ESArcanaComboSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ESArcanaComboSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ESArcanaComboSummary::InternalSwap(CDOTAUserMsg_ESArcanaComboSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaComboSummary, damage_amount_)
      + sizeof(CDOTAUserMsg_ESArcanaComboSummary::damage_amount_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ESArcanaComboSummary, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ESArcanaComboSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_OMArcanaCombo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OMArcanaCombo>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_multicast_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multicast_chance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OMArcanaCombo)
}
CDOTAUserMsg_OMArcanaCombo::CDOTAUserMsg_OMArcanaCombo(const CDOTAUserMsg_OMArcanaCombo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&multicast_chance_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(multicast_chance_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OMArcanaCombo)
}

void CDOTAUserMsg_OMArcanaCombo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multicast_chance_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(multicast_chance_));
}

CDOTAUserMsg_OMArcanaCombo::~CDOTAUserMsg_OMArcanaCombo() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OMArcanaCombo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_OMArcanaCombo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_OMArcanaCombo::ArenaDtor(void* object) {
  CDOTAUserMsg_OMArcanaCombo* _this = reinterpret_cast< CDOTAUserMsg_OMArcanaCombo* >(object);
  (void)_this;
}
void CDOTAUserMsg_OMArcanaCombo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_OMArcanaCombo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_OMArcanaCombo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OMArcanaCombo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&multicast_chance_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(multicast_chance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OMArcanaCombo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multicast_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_multicast_amount(&has_bits);
          multicast_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 multicast_chance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_multicast_chance(&has_bits);
          multicast_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_OMArcanaCombo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OMArcanaCombo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 multicast_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_multicast_amount(), target);
  }

  // optional uint32 arcana_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arcana_level(), target);
  }

  // optional uint32 multicast_chance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_multicast_chance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OMArcanaCombo)
  return target;
}

size_t CDOTAUserMsg_OMArcanaCombo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OMArcanaCombo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 multicast_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multicast_amount());
    }

    // optional uint32 arcana_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

    // optional uint32 multicast_chance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multicast_chance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_OMArcanaCombo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_OMArcanaCombo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_OMArcanaCombo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_OMArcanaCombo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_OMArcanaCombo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_OMArcanaCombo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OMArcanaCombo::MergeFrom(const CDOTAUserMsg_OMArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OMArcanaCombo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      multicast_amount_ = from.multicast_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      arcana_level_ = from.arcana_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      multicast_chance_ = from.multicast_chance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_OMArcanaCombo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_OMArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OMArcanaCombo::CopyFrom(const CDOTAUserMsg_OMArcanaCombo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OMArcanaCombo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OMArcanaCombo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OMArcanaCombo::InternalSwap(CDOTAUserMsg_OMArcanaCombo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OMArcanaCombo, multicast_chance_)
      + sizeof(CDOTAUserMsg_OMArcanaCombo::multicast_chance_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OMArcanaCombo, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OMArcanaCombo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HighFiveCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HighFiveCompleted>()._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_special_high_five(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HighFiveCompleted)
}
CDOTAUserMsg_HighFiveCompleted::CDOTAUserMsg_HighFiveCompleted(const CDOTAUserMsg_HighFiveCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_1_, &from.player_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_high_five_) -
    reinterpret_cast<char*>(&player_id_1_)) + sizeof(special_high_five_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HighFiveCompleted)
}

void CDOTAUserMsg_HighFiveCompleted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&special_high_five_) -
    reinterpret_cast<char*>(&player_id_1_)) + sizeof(special_high_five_));
}

CDOTAUserMsg_HighFiveCompleted::~CDOTAUserMsg_HighFiveCompleted() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HighFiveCompleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HighFiveCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HighFiveCompleted::ArenaDtor(void* object) {
  CDOTAUserMsg_HighFiveCompleted* _this = reinterpret_cast< CDOTAUserMsg_HighFiveCompleted* >(object);
  (void)_this;
}
void CDOTAUserMsg_HighFiveCompleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HighFiveCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HighFiveCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HighFiveCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&special_high_five_) -
        reinterpret_cast<char*>(&player_id_1_)) + sizeof(special_high_five_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HighFiveCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_id_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool special_high_five = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_special_high_five(&has_bits);
          special_high_five_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HighFiveCompleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HighFiveCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional uint32 player_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  // optional bool special_high_five = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_special_high_five(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HighFiveCompleted)
  return target;
}

size_t CDOTAUserMsg_HighFiveCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HighFiveCompleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id_1());
    }

    // optional uint32 player_id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id_2());
    }

    // optional bool special_high_five = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HighFiveCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HighFiveCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HighFiveCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HighFiveCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HighFiveCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HighFiveCompleted)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HighFiveCompleted::MergeFrom(const CDOTAUserMsg_HighFiveCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HighFiveCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_1_ = from.player_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_2_ = from.player_id_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      special_high_five_ = from.special_high_five_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_HighFiveCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HighFiveCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HighFiveCompleted::CopyFrom(const CDOTAUserMsg_HighFiveCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HighFiveCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HighFiveCompleted::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HighFiveCompleted::InternalSwap(CDOTAUserMsg_HighFiveCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HighFiveCompleted, special_high_five_)
      + sizeof(CDOTAUserMsg_HighFiveCompleted::special_high_five_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HighFiveCompleted, player_id_1_)>(
          reinterpret_cast<char*>(&player_id_1_),
          reinterpret_cast<char*>(&other->player_id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HighFiveCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HighFiveLeftHanging::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HighFiveLeftHanging>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HighFiveLeftHanging)
}
CDOTAUserMsg_HighFiveLeftHanging::CDOTAUserMsg_HighFiveLeftHanging(const CDOTAUserMsg_HighFiveLeftHanging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HighFiveLeftHanging)
}

void CDOTAUserMsg_HighFiveLeftHanging::SharedCtor() {
player_id_ = 0u;
}

CDOTAUserMsg_HighFiveLeftHanging::~CDOTAUserMsg_HighFiveLeftHanging() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HighFiveLeftHanging)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HighFiveLeftHanging::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HighFiveLeftHanging::ArenaDtor(void* object) {
  CDOTAUserMsg_HighFiveLeftHanging* _this = reinterpret_cast< CDOTAUserMsg_HighFiveLeftHanging* >(object);
  (void)_this;
}
void CDOTAUserMsg_HighFiveLeftHanging::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HighFiveLeftHanging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HighFiveLeftHanging::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HighFiveLeftHanging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HighFiveLeftHanging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HighFiveLeftHanging::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HighFiveLeftHanging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HighFiveLeftHanging)
  return target;
}

size_t CDOTAUserMsg_HighFiveLeftHanging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HighFiveLeftHanging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HighFiveLeftHanging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HighFiveLeftHanging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HighFiveLeftHanging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HighFiveLeftHanging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HighFiveLeftHanging)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HighFiveLeftHanging::MergeFrom(const CDOTAUserMsg_HighFiveLeftHanging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAUserMsg_HighFiveLeftHanging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HighFiveLeftHanging::CopyFrom(const CDOTAUserMsg_HighFiveLeftHanging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HighFiveLeftHanging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HighFiveLeftHanging::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HighFiveLeftHanging::InternalSwap(CDOTAUserMsg_HighFiveLeftHanging* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HighFiveLeftHanging::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ShovelUnearth::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ShovelUnearth>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_all_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_locstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ShovelUnearth)
}
CDOTAUserMsg_ShovelUnearth::CDOTAUserMsg_ShovelUnearth(const CDOTAUserMsg_ShovelUnearth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  locstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locstring()) {
    locstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_locstring(), 
      GetArena());
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ShovelUnearth)
}

void CDOTAUserMsg_ShovelUnearth::SharedCtor() {
locstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(quantity_));
}

CDOTAUserMsg_ShovelUnearth::~CDOTAUserMsg_ShovelUnearth() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ShovelUnearth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ShovelUnearth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  locstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ShovelUnearth::ArenaDtor(void* object) {
  CDOTAUserMsg_ShovelUnearth* _this = reinterpret_cast< CDOTAUserMsg_ShovelUnearth* >(object);
  (void)_this;
}
void CDOTAUserMsg_ShovelUnearth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ShovelUnearth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ShovelUnearth::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ShovelUnearth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    locstring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ShovelUnearth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool all_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_all_chat(&has_bits);
          all_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locstring = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_locstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ShovelUnearth.locstring");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ShovelUnearth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ShovelUnearth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional bool all_chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all_chat(), target);
  }

  // optional string locstring = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locstring().data(), static_cast<int>(this->_internal_locstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ShovelUnearth.locstring");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_locstring(), target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ShovelUnearth)
  return target;
}

size_t CDOTAUserMsg_ShovelUnearth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ShovelUnearth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string locstring = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locstring());
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional bool all_chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 quantity = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ShovelUnearth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ShovelUnearth)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ShovelUnearth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ShovelUnearth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ShovelUnearth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ShovelUnearth)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShovelUnearth::MergeFrom(const CDOTAUserMsg_ShovelUnearth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ShovelUnearth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_locstring(from._internal_locstring());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      all_chat_ = from.all_chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ShovelUnearth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ShovelUnearth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShovelUnearth::CopyFrom(const CDOTAUserMsg_ShovelUnearth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ShovelUnearth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShovelUnearth::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ShovelUnearth::InternalSwap(CDOTAUserMsg_ShovelUnearth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  locstring_.Swap(&other->locstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShovelUnearth, quantity_)
      + sizeof(CDOTAUserMsg_ShovelUnearth::quantity_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ShovelUnearth, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ShovelUnearth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AllStarEvent_PlayerScore::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AllStarEvent_PlayerScore>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score_sans_kda(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
}
CDOTAUserMsg_AllStarEvent_PlayerScore::CDOTAUserMsg_AllStarEvent_PlayerScore(const CDOTAUserMsg_AllStarEvent_PlayerScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_sans_kda_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(score_sans_kda_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_sans_kda_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(score_sans_kda_));
}

CDOTAUserMsg_AllStarEvent_PlayerScore::~CDOTAUserMsg_AllStarEvent_PlayerScore() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AllStarEvent.PlayerScore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::ArenaDtor(void* object) {
  CDOTAUserMsg_AllStarEvent_PlayerScore* _this = reinterpret_cast< CDOTAUserMsg_AllStarEvent_PlayerScore* >(object);
  (void)_this;
}
void CDOTAUserMsg_AllStarEvent_PlayerScore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AllStarEvent_PlayerScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_sans_kda_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(score_sans_kda_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AllStarEvent_PlayerScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score_sans_kda = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score_sans_kda(&has_bits);
          score_sans_kda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AllStarEvent_PlayerScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 score_sans_kda = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score_sans_kda(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AllStarEvent.PlayerScore)
  return target;
}

size_t CDOTAUserMsg_AllStarEvent_PlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional uint32 score_sans_kda = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score_sans_kda());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AllStarEvent_PlayerScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AllStarEvent_PlayerScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AllStarEvent.PlayerScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AllStarEvent.PlayerScore)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::MergeFrom(const CDOTAUserMsg_AllStarEvent_PlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_sans_kda_ = from.score_sans_kda_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::CopyFrom(const CDOTAUserMsg_AllStarEvent_PlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AllStarEvent.PlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AllStarEvent_PlayerScore::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AllStarEvent_PlayerScore::InternalSwap(CDOTAUserMsg_AllStarEvent_PlayerScore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent_PlayerScore, score_sans_kda_)
      + sizeof(CDOTAUserMsg_AllStarEvent_PlayerScore::score_sans_kda_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent_PlayerScore, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AllStarEvent_PlayerScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AllStarEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AllStarEvent>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_point_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_scores_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AllStarEvent)
}
CDOTAUserMsg_AllStarEvent::CDOTAUserMsg_AllStarEvent(const CDOTAUserMsg_AllStarEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_scores_(from.player_scores_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AllStarEvent)
}

void CDOTAUserMsg_AllStarEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
}

CDOTAUserMsg_AllStarEvent::~CDOTAUserMsg_AllStarEvent() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AllStarEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AllStarEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AllStarEvent::ArenaDtor(void* object) {
  CDOTAUserMsg_AllStarEvent* _this = reinterpret_cast< CDOTAUserMsg_AllStarEvent* >(object);
  (void)_this;
}
void CDOTAUserMsg_AllStarEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AllStarEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AllStarEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AllStarEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_scores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AllStarEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 point_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_point_amount(&has_bits);
          point_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AllStarEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AllStarEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 point_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_point_amount(), target);
  }

  // optional uint32 event_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_scores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_player_scores(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AllStarEvent)
  return target;
}

size_t CDOTAUserMsg_AllStarEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AllStarEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_AllStarEvent.PlayerScore player_scores = 5;
  total_size += 1UL * this->_internal_player_scores_size();
  for (const auto& msg : this->player_scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional uint32 point_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point_amount());
    }

    // optional uint32 event_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AllStarEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AllStarEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AllStarEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AllStarEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AllStarEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AllStarEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AllStarEvent::MergeFrom(const CDOTAUserMsg_AllStarEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AllStarEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_scores_.MergeFrom(from.player_scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      point_amount_ = from.point_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AllStarEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AllStarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AllStarEvent::CopyFrom(const CDOTAUserMsg_AllStarEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AllStarEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AllStarEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AllStarEvent::InternalSwap(CDOTAUserMsg_AllStarEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_scores_.InternalSwap(&other->player_scores_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent, event_id_)
      + sizeof(CDOTAUserMsg_AllStarEvent::event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AllStarEvent, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AllStarEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_QueuedOrderRemoved::_Internal {
 public:
};

CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unit_order_sequence_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QueuedOrderRemoved)
}
CDOTAUserMsg_QueuedOrderRemoved::CDOTAUserMsg_QueuedOrderRemoved(const CDOTAUserMsg_QueuedOrderRemoved& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unit_order_sequence_(from.unit_order_sequence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QueuedOrderRemoved)
}

void CDOTAUserMsg_QueuedOrderRemoved::SharedCtor() {
}

CDOTAUserMsg_QueuedOrderRemoved::~CDOTAUserMsg_QueuedOrderRemoved() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QueuedOrderRemoved)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_QueuedOrderRemoved::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_QueuedOrderRemoved::ArenaDtor(void* object) {
  CDOTAUserMsg_QueuedOrderRemoved* _this = reinterpret_cast< CDOTAUserMsg_QueuedOrderRemoved* >(object);
  (void)_this;
}
void CDOTAUserMsg_QueuedOrderRemoved::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_QueuedOrderRemoved::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_QueuedOrderRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QueuedOrderRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_order_sequence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QueuedOrderRemoved::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 unit_order_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unit_order_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unit_order_sequence(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_QueuedOrderRemoved::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QueuedOrderRemoved)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unit_order_sequence = 1;
  for (int i = 0, n = this->_internal_unit_order_sequence_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit_order_sequence(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QueuedOrderRemoved)
  return target;
}

size_t CDOTAUserMsg_QueuedOrderRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QueuedOrderRemoved)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 unit_order_sequence = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unit_order_sequence_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unit_order_sequence_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_QueuedOrderRemoved::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QueuedOrderRemoved* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_QueuedOrderRemoved>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_QueuedOrderRemoved)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_QueuedOrderRemoved)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QueuedOrderRemoved::MergeFrom(const CDOTAUserMsg_QueuedOrderRemoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_order_sequence_.MergeFrom(from.unit_order_sequence_);
}

void CDOTAUserMsg_QueuedOrderRemoved::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QueuedOrderRemoved::CopyFrom(const CDOTAUserMsg_QueuedOrderRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QueuedOrderRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QueuedOrderRemoved::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QueuedOrderRemoved::InternalSwap(CDOTAUserMsg_QueuedOrderRemoved* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_order_sequence_.InternalSwap(&other->unit_order_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QueuedOrderRemoved::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_DebugChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_DebugChallenge>()._has_bits_);
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_var_0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_var_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_max_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_DebugChallenge)
}
CDOTAUserMsg_DebugChallenge::CDOTAUserMsg_DebugChallenge(const CDOTAUserMsg_DebugChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&challenge_type_, &from.challenge_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_max_rank_) -
    reinterpret_cast<char*>(&challenge_type_)) + sizeof(challenge_max_rank_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_DebugChallenge)
}

void CDOTAUserMsg_DebugChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&challenge_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_max_rank_) -
    reinterpret_cast<char*>(&challenge_type_)) + sizeof(challenge_max_rank_));
}

CDOTAUserMsg_DebugChallenge::~CDOTAUserMsg_DebugChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_DebugChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_DebugChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_DebugChallenge::ArenaDtor(void* object) {
  CDOTAUserMsg_DebugChallenge* _this = reinterpret_cast< CDOTAUserMsg_DebugChallenge* >(object);
  (void)_this;
}
void CDOTAUserMsg_DebugChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_DebugChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_DebugChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_DebugChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&challenge_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_max_rank_) -
        reinterpret_cast<char*>(&challenge_type_)) + sizeof(challenge_max_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_DebugChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 challenge_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_challenge_type(&has_bits);
          challenge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 challenge_query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_challenge_query_id(&has_bits);
          challenge_query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 instance_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_var_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_var_0(&has_bits);
          challenge_var_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_var_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_challenge_var_1(&has_bits);
          challenge_var_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_max_rank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_max_rank(&has_bits);
          challenge_max_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_DebugChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_DebugChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 challenge_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_challenge_type(), target);
  }

  // required uint32 challenge_query_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_query_id(), target);
  }

  // required uint32 event_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_id(), target);
  }

  // optional uint32 instance_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_instance_id(), target);
  }

  // optional uint32 challenge_var_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_var_0(), target);
  }

  // optional uint32 challenge_var_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_var_1(), target);
  }

  // optional uint32 challenge_max_rank = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_max_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_DebugChallenge)
  return target;
}

size_t CDOTAUserMsg_DebugChallenge::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAUserMsg_DebugChallenge)
  size_t total_size = 0;

  if (_internal_has_challenge_type()) {
    // required uint32 challenge_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_challenge_type());
  }

  if (_internal_has_challenge_query_id()) {
    // required uint32 challenge_query_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_challenge_query_id());
  }

  if (_internal_has_event_id()) {
    // required uint32 event_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  return total_size;
}
size_t CDOTAUserMsg_DebugChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_DebugChallenge)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 challenge_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_challenge_type());

    // required uint32 challenge_query_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_challenge_query_id());

    // required uint32 event_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional uint32 instance_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_instance_id());
    }

    // optional uint32 challenge_var_0 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_var_0());
    }

    // optional uint32 challenge_var_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_var_1());
    }

    // optional uint32 challenge_max_rank = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_max_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_DebugChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_DebugChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DebugChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_DebugChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_DebugChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_DebugChallenge)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DebugChallenge::MergeFrom(const CDOTAUserMsg_DebugChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_DebugChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      challenge_type_ = from.challenge_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_query_id_ = from.challenge_query_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_var_0_ = from.challenge_var_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_var_1_ = from.challenge_var_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_max_rank_ = from.challenge_max_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_DebugChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_DebugChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DebugChallenge::CopyFrom(const CDOTAUserMsg_DebugChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_DebugChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DebugChallenge::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAUserMsg_DebugChallenge::InternalSwap(CDOTAUserMsg_DebugChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DebugChallenge, challenge_max_rank_)
      + sizeof(CDOTAUserMsg_DebugChallenge::challenge_max_rank_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_DebugChallenge, challenge_type_)>(
          reinterpret_cast<char*>(&challenge_type_),
          reinterpret_cast<char*>(&other->challenge_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_DebugChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_FoundNeutralItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_FoundNeutralItem>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tier_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_FoundNeutralItem)
}
CDOTAUserMsg_FoundNeutralItem::CDOTAUserMsg_FoundNeutralItem(const CDOTAUserMsg_FoundNeutralItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tier_item_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(tier_item_count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_FoundNeutralItem)
}

void CDOTAUserMsg_FoundNeutralItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tier_item_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(tier_item_count_));
}

CDOTAUserMsg_FoundNeutralItem::~CDOTAUserMsg_FoundNeutralItem() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_FoundNeutralItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_FoundNeutralItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_FoundNeutralItem::ArenaDtor(void* object) {
  CDOTAUserMsg_FoundNeutralItem* _this = reinterpret_cast< CDOTAUserMsg_FoundNeutralItem* >(object);
  (void)_this;
}
void CDOTAUserMsg_FoundNeutralItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_FoundNeutralItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_FoundNeutralItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_FoundNeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tier_item_count_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(tier_item_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_FoundNeutralItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_tier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_tier(&has_bits);
          item_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tier_item_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tier_item_count(&has_bits);
          tier_item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_FoundNeutralItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_FoundNeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 item_ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_ability_id(), target);
  }

  // optional uint32 item_tier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_tier(), target);
  }

  // optional uint32 tier_item_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tier_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_FoundNeutralItem)
  return target;
}

size_t CDOTAUserMsg_FoundNeutralItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_FoundNeutralItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 item_ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

    // optional uint32 item_tier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_tier());
    }

    // optional uint32 tier_item_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tier_item_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_FoundNeutralItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_FoundNeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_FoundNeutralItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_FoundNeutralItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_FoundNeutralItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_FoundNeutralItem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_FoundNeutralItem::MergeFrom(const CDOTAUserMsg_FoundNeutralItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_FoundNeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_tier_ = from.item_tier_;
    }
    if (cached_has_bits & 0x00000008u) {
      tier_item_count_ = from.tier_item_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_FoundNeutralItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_FoundNeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_FoundNeutralItem::CopyFrom(const CDOTAUserMsg_FoundNeutralItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_FoundNeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_FoundNeutralItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_FoundNeutralItem::InternalSwap(CDOTAUserMsg_FoundNeutralItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FoundNeutralItem, tier_item_count_)
      + sizeof(CDOTAUserMsg_FoundNeutralItem::tier_item_count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_FoundNeutralItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_FoundNeutralItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_OutpostCaptured::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OutpostCaptured>()._has_bits_);
  static void set_has_outpost_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OutpostCaptured)
}
CDOTAUserMsg_OutpostCaptured::CDOTAUserMsg_OutpostCaptured(const CDOTAUserMsg_OutpostCaptured& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&outpost_entindex_, &from.outpost_entindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&outpost_entindex_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OutpostCaptured)
}

void CDOTAUserMsg_OutpostCaptured::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outpost_entindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&outpost_entindex_)) + sizeof(team_id_));
}

CDOTAUserMsg_OutpostCaptured::~CDOTAUserMsg_OutpostCaptured() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OutpostCaptured)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_OutpostCaptured::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_OutpostCaptured::ArenaDtor(void* object) {
  CDOTAUserMsg_OutpostCaptured* _this = reinterpret_cast< CDOTAUserMsg_OutpostCaptured* >(object);
  (void)_this;
}
void CDOTAUserMsg_OutpostCaptured::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_OutpostCaptured::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_OutpostCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OutpostCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&outpost_entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&outpost_entindex_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OutpostCaptured::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 outpost_entindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_outpost_entindex(&has_bits);
          outpost_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_OutpostCaptured::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OutpostCaptured)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 outpost_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_outpost_entindex(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OutpostCaptured)
  return target;
}

size_t CDOTAUserMsg_OutpostCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OutpostCaptured)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 outpost_entindex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outpost_entindex());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_OutpostCaptured::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_OutpostCaptured)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_OutpostCaptured* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_OutpostCaptured>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_OutpostCaptured)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_OutpostCaptured)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OutpostCaptured::MergeFrom(const CDOTAUserMsg_OutpostCaptured& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OutpostCaptured)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      outpost_entindex_ = from.outpost_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_OutpostCaptured::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_OutpostCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OutpostCaptured::CopyFrom(const CDOTAUserMsg_OutpostCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OutpostCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OutpostCaptured::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OutpostCaptured::InternalSwap(CDOTAUserMsg_OutpostCaptured* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostCaptured, team_id_)
      + sizeof(CDOTAUserMsg_OutpostCaptured::team_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostCaptured, outpost_entindex_)>(
          reinterpret_cast<char*>(&outpost_entindex_),
          reinterpret_cast<char*>(&other->outpost_entindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OutpostCaptured::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_OutpostGrantedXP::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_OutpostGrantedXP>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_OutpostGrantedXP)
}
CDOTAUserMsg_OutpostGrantedXP::CDOTAUserMsg_OutpostGrantedXP(const CDOTAUserMsg_OutpostGrantedXP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&xp_amount_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(xp_amount_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_OutpostGrantedXP)
}

void CDOTAUserMsg_OutpostGrantedXP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&xp_amount_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(xp_amount_));
}

CDOTAUserMsg_OutpostGrantedXP::~CDOTAUserMsg_OutpostGrantedXP() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_OutpostGrantedXP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_OutpostGrantedXP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_OutpostGrantedXP::ArenaDtor(void* object) {
  CDOTAUserMsg_OutpostGrantedXP* _this = reinterpret_cast< CDOTAUserMsg_OutpostGrantedXP* >(object);
  (void)_this;
}
void CDOTAUserMsg_OutpostGrantedXP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_OutpostGrantedXP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_OutpostGrantedXP::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_OutpostGrantedXP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&xp_amount_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(xp_amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_OutpostGrantedXP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xp_amount(&has_bits);
          xp_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_OutpostGrantedXP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_OutpostGrantedXP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 xp_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_OutpostGrantedXP)
  return target;
}

size_t CDOTAUserMsg_OutpostGrantedXP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_OutpostGrantedXP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 xp_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_amount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_OutpostGrantedXP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_OutpostGrantedXP)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_OutpostGrantedXP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_OutpostGrantedXP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_OutpostGrantedXP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_OutpostGrantedXP)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OutpostGrantedXP::MergeFrom(const CDOTAUserMsg_OutpostGrantedXP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_OutpostGrantedXP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_amount_ = from.xp_amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_OutpostGrantedXP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_OutpostGrantedXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OutpostGrantedXP::CopyFrom(const CDOTAUserMsg_OutpostGrantedXP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_OutpostGrantedXP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OutpostGrantedXP::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_OutpostGrantedXP::InternalSwap(CDOTAUserMsg_OutpostGrantedXP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostGrantedXP, xp_amount_)
      + sizeof(CDOTAUserMsg_OutpostGrantedXP::xp_amount_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_OutpostGrantedXP, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_OutpostGrantedXP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MoveCameraToUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_MoveCameraToUnit>()._has_bits_);
  static void set_has_unit_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MoveCameraToUnit)
}
CDOTAUserMsg_MoveCameraToUnit::CDOTAUserMsg_MoveCameraToUnit(const CDOTAUserMsg_MoveCameraToUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_ehandle_ = from.unit_ehandle_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MoveCameraToUnit)
}

void CDOTAUserMsg_MoveCameraToUnit::SharedCtor() {
unit_ehandle_ = 0;
}

CDOTAUserMsg_MoveCameraToUnit::~CDOTAUserMsg_MoveCameraToUnit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MoveCameraToUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MoveCameraToUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MoveCameraToUnit::ArenaDtor(void* object) {
  CDOTAUserMsg_MoveCameraToUnit* _this = reinterpret_cast< CDOTAUserMsg_MoveCameraToUnit* >(object);
  (void)_this;
}
void CDOTAUserMsg_MoveCameraToUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MoveCameraToUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MoveCameraToUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MoveCameraToUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MoveCameraToUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 unit_ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit_ehandle(&has_bits);
          unit_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MoveCameraToUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MoveCameraToUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit_ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MoveCameraToUnit)
  return target;
}

size_t CDOTAUserMsg_MoveCameraToUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MoveCameraToUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 unit_ehandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_ehandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MoveCameraToUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MoveCameraToUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MoveCameraToUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MoveCameraToUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MoveCameraToUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MoveCameraToUnit)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MoveCameraToUnit::MergeFrom(const CDOTAUserMsg_MoveCameraToUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MoveCameraToUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit_ehandle()) {
    _internal_set_unit_ehandle(from._internal_unit_ehandle());
  }
}

void CDOTAUserMsg_MoveCameraToUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MoveCameraToUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MoveCameraToUnit::CopyFrom(const CDOTAUserMsg_MoveCameraToUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MoveCameraToUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MoveCameraToUnit::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MoveCameraToUnit::InternalSwap(CDOTAUserMsg_MoveCameraToUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unit_ehandle_, other->unit_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MoveCameraToUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PauseMinigameData_DataBit::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_PauseMinigameData_DataBit>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PauseMinigameData.DataBit)
}
CDOTAUserMsg_PauseMinigameData_DataBit::CDOTAUserMsg_PauseMinigameData_DataBit(const CDOTAUserMsg_PauseMinigameData_DataBit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_extra_) -
    reinterpret_cast<char*>(&index_)) + sizeof(data_extra_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PauseMinigameData.DataBit)
}

void CDOTAUserMsg_PauseMinigameData_DataBit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_extra_) -
    reinterpret_cast<char*>(&index_)) + sizeof(data_extra_));
}

CDOTAUserMsg_PauseMinigameData_DataBit::~CDOTAUserMsg_PauseMinigameData_DataBit() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PauseMinigameData.DataBit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PauseMinigameData_DataBit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::ArenaDtor(void* object) {
  CDOTAUserMsg_PauseMinigameData_DataBit* _this = reinterpret_cast< CDOTAUserMsg_PauseMinigameData_DataBit* >(object);
  (void)_this;
}
void CDOTAUserMsg_PauseMinigameData_DataBit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PauseMinigameData_DataBit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_extra_) -
        reinterpret_cast<char*>(&index_)) + sizeof(data_extra_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PauseMinigameData_DataBit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 data_extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_data_extra(&has_bits);
          data_extra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PauseMinigameData_DataBit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int64 data_extra = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_data_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PauseMinigameData.DataBit)
  return target;
}

size_t CDOTAUserMsg_PauseMinigameData_DataBit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data());
    }

    // optional int64 data_extra = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_data_extra());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PauseMinigameData_DataBit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PauseMinigameData_DataBit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PauseMinigameData_DataBit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PauseMinigameData.DataBit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PauseMinigameData.DataBit)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PauseMinigameData_DataBit::MergeFrom(const CDOTAUserMsg_PauseMinigameData_DataBit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_extra_ = from.data_extra_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PauseMinigameData_DataBit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PauseMinigameData_DataBit::CopyFrom(const CDOTAUserMsg_PauseMinigameData_DataBit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PauseMinigameData.DataBit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PauseMinigameData_DataBit::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PauseMinigameData_DataBit::InternalSwap(CDOTAUserMsg_PauseMinigameData_DataBit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PauseMinigameData_DataBit, data_extra_)
      + sizeof(CDOTAUserMsg_PauseMinigameData_DataBit::data_extra_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_PauseMinigameData_DataBit, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PauseMinigameData_DataBit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_PauseMinigameData::_Internal {
 public:
};

CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_bits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_PauseMinigameData)
}
CDOTAUserMsg_PauseMinigameData::CDOTAUserMsg_PauseMinigameData(const CDOTAUserMsg_PauseMinigameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_bits_(from.data_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_PauseMinigameData)
}

void CDOTAUserMsg_PauseMinigameData::SharedCtor() {
}

CDOTAUserMsg_PauseMinigameData::~CDOTAUserMsg_PauseMinigameData() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_PauseMinigameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_PauseMinigameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_PauseMinigameData::ArenaDtor(void* object) {
  CDOTAUserMsg_PauseMinigameData* _this = reinterpret_cast< CDOTAUserMsg_PauseMinigameData* >(object);
  (void)_this;
}
void CDOTAUserMsg_PauseMinigameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_PauseMinigameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_PauseMinigameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_PauseMinigameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_PauseMinigameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_bits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_PauseMinigameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_PauseMinigameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_bits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_bits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_PauseMinigameData)
  return target;
}

size_t CDOTAUserMsg_PauseMinigameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_PauseMinigameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_PauseMinigameData.DataBit data_bits = 1;
  total_size += 1UL * this->_internal_data_bits_size();
  for (const auto& msg : this->data_bits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_PauseMinigameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_PauseMinigameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PauseMinigameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_PauseMinigameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_PauseMinigameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_PauseMinigameData)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PauseMinigameData::MergeFrom(const CDOTAUserMsg_PauseMinigameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_PauseMinigameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_bits_.MergeFrom(from.data_bits_);
}

void CDOTAUserMsg_PauseMinigameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_PauseMinigameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PauseMinigameData::CopyFrom(const CDOTAUserMsg_PauseMinigameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_PauseMinigameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PauseMinigameData::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PauseMinigameData::InternalSwap(CDOTAUserMsg_PauseMinigameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_bits_.InternalSwap(&other->data_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_PauseMinigameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_VersusScene_PlayerBehavior>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::VersusScene_PlayActivity& play_activity(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_play_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::VersusScene_ChatWheel& chat_wheel(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_chat_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::VersusScene_PlaybackRate& playback_rate(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg);
  static void set_has_playback_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::VersusScene_PlayActivity&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::play_activity(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->play_activity_;
}
const ::VersusScene_ChatWheel&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::chat_wheel(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->chat_wheel_;
}
const ::VersusScene_PlaybackRate&
CDOTAUserMsg_VersusScene_PlayerBehavior::_Internal::playback_rate(const CDOTAUserMsg_VersusScene_PlayerBehavior* msg) {
  return *msg->playback_rate_;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_play_activity() {
  if (play_activity_ != nullptr) play_activity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_chat_wheel() {
  if (chat_wheel_ != nullptr) chat_wheel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::clear_playback_rate() {
  if (playback_rate_ != nullptr) playback_rate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
}
CDOTAUserMsg_VersusScene_PlayerBehavior::CDOTAUserMsg_VersusScene_PlayerBehavior(const CDOTAUserMsg_VersusScene_PlayerBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_play_activity()) {
    play_activity_ = new ::VersusScene_PlayActivity(*from.play_activity_);
  } else {
    play_activity_ = nullptr;
  }
  if (from._internal_has_chat_wheel()) {
    chat_wheel_ = new ::VersusScene_ChatWheel(*from.chat_wheel_);
  } else {
    chat_wheel_ = nullptr;
  }
  if (from._internal_has_playback_rate()) {
    playback_rate_ = new ::VersusScene_PlaybackRate(*from.playback_rate_);
  } else {
    playback_rate_ = nullptr;
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(behavior_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&play_activity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&play_activity_)) + sizeof(player_id_));
behavior_ = 1;
}

CDOTAUserMsg_VersusScene_PlayerBehavior::~CDOTAUserMsg_VersusScene_PlayerBehavior() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_VersusScene_PlayerBehavior)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete play_activity_;
  if (this != internal_default_instance()) delete chat_wheel_;
  if (this != internal_default_instance()) delete playback_rate_;
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::ArenaDtor(void* object) {
  CDOTAUserMsg_VersusScene_PlayerBehavior* _this = reinterpret_cast< CDOTAUserMsg_VersusScene_PlayerBehavior* >(object);
  (void)_this;
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_VersusScene_PlayerBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(play_activity_ != nullptr);
      play_activity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chat_wheel_ != nullptr);
      chat_wheel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playback_rate_ != nullptr);
      playback_rate_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    player_id_ = 0u;
    behavior_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_VersusScene_PlayerBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAVersusScenePlayerBehavior_IsValid(val))) {
            _internal_set_behavior(static_cast<::EDOTAVersusScenePlayerBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_PlayActivity play_activity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_play_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_ChatWheel chat_wheel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VersusScene_PlaybackRate playback_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_playback_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_VersusScene_PlayerBehavior::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_behavior(), target);
  }

  // optional .VersusScene_PlayActivity play_activity = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::play_activity(this), target, stream);
  }

  // optional .VersusScene_ChatWheel chat_wheel = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chat_wheel(this), target, stream);
  }

  // optional .VersusScene_PlaybackRate playback_rate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::playback_rate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_VersusScene_PlayerBehavior)
  return target;
}

size_t CDOTAUserMsg_VersusScene_PlayerBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .VersusScene_PlayActivity play_activity = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *play_activity_);
    }

    // optional .VersusScene_ChatWheel chat_wheel = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chat_wheel_);
    }

    // optional .VersusScene_PlaybackRate playback_rate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playback_rate_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional .EDOTAVersusScenePlayerBehavior behavior = 2 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VersusScene_PlayerBehavior* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_VersusScene_PlayerBehavior>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_VersusScene_PlayerBehavior)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_VersusScene_PlayerBehavior)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::MergeFrom(const CDOTAUserMsg_VersusScene_PlayerBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_play_activity()->::VersusScene_PlayActivity::MergeFrom(from._internal_play_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chat_wheel()->::VersusScene_ChatWheel::MergeFrom(from._internal_chat_wheel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_playback_rate()->::VersusScene_PlaybackRate::MergeFrom(from._internal_playback_rate());
    }
    if (cached_has_bits & 0x00000008u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      behavior_ = from.behavior_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::CopyFrom(const CDOTAUserMsg_VersusScene_PlayerBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_VersusScene_PlayerBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VersusScene_PlayerBehavior::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VersusScene_PlayerBehavior::InternalSwap(CDOTAUserMsg_VersusScene_PlayerBehavior* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VersusScene_PlayerBehavior, player_id_)
      + sizeof(CDOTAUserMsg_VersusScene_PlayerBehavior::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_VersusScene_PlayerBehavior, play_activity_)>(
          reinterpret_cast<char*>(&play_activity_),
          reinterpret_cast<char*>(&other->play_activity_));
  swap(behavior_, other->behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_VersusScene_PlayerBehavior::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_QoP_ArcanaSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_QoP_ArcanaSummary>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_players_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_players_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_QoP_ArcanaSummary)
}
CDOTAUserMsg_QoP_ArcanaSummary::CDOTAUserMsg_QoP_ArcanaSummary(const CDOTAUserMsg_QoP_ArcanaSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_killed_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(players_killed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_QoP_ArcanaSummary)
}

void CDOTAUserMsg_QoP_ArcanaSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&players_killed_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(players_killed_));
}

CDOTAUserMsg_QoP_ArcanaSummary::~CDOTAUserMsg_QoP_ArcanaSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_QoP_ArcanaSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_QoP_ArcanaSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_QoP_ArcanaSummary::ArenaDtor(void* object) {
  CDOTAUserMsg_QoP_ArcanaSummary* _this = reinterpret_cast< CDOTAUserMsg_QoP_ArcanaSummary* >(object);
  (void)_this;
}
void CDOTAUserMsg_QoP_ArcanaSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_QoP_ArcanaSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_QoP_ArcanaSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_QoP_ArcanaSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_killed_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(players_killed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_QoP_ArcanaSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_hit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_players_hit(&has_bits);
          players_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_killed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_players_killed(&has_bits);
          players_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_QoP_ArcanaSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_QoP_ArcanaSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 arcana_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arcana_level(), target);
  }

  // optional uint32 players_hit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_players_hit(), target);
  }

  // optional uint32 players_killed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_players_killed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_QoP_ArcanaSummary)
  return target;
}

size_t CDOTAUserMsg_QoP_ArcanaSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_QoP_ArcanaSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 arcana_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

    // optional uint32 players_hit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_hit());
    }

    // optional uint32 players_killed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_killed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_QoP_ArcanaSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QoP_ArcanaSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_QoP_ArcanaSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_QoP_ArcanaSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_QoP_ArcanaSummary)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QoP_ArcanaSummary::MergeFrom(const CDOTAUserMsg_QoP_ArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      arcana_level_ = from.arcana_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      players_hit_ = from.players_hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      players_killed_ = from.players_killed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_QoP_ArcanaSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QoP_ArcanaSummary::CopyFrom(const CDOTAUserMsg_QoP_ArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_QoP_ArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QoP_ArcanaSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QoP_ArcanaSummary::InternalSwap(CDOTAUserMsg_QoP_ArcanaSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QoP_ArcanaSummary, players_killed_)
      + sizeof(CDOTAUserMsg_QoP_ArcanaSummary::players_killed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_QoP_ArcanaSummary, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_QoP_ArcanaSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HotPotato_Created::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HotPotato_Created>()._has_bits_);
  static void set_has_player_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HotPotato_Created)
}
CDOTAUserMsg_HotPotato_Created::CDOTAUserMsg_HotPotato_Created(const CDOTAUserMsg_HotPotato_Created& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_1_, &from.player_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_2_) -
    reinterpret_cast<char*>(&player_id_1_)) + sizeof(player_id_2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HotPotato_Created)
}

void CDOTAUserMsg_HotPotato_Created::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_2_) -
    reinterpret_cast<char*>(&player_id_1_)) + sizeof(player_id_2_));
}

CDOTAUserMsg_HotPotato_Created::~CDOTAUserMsg_HotPotato_Created() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HotPotato_Created)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HotPotato_Created::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HotPotato_Created::ArenaDtor(void* object) {
  CDOTAUserMsg_HotPotato_Created* _this = reinterpret_cast< CDOTAUserMsg_HotPotato_Created* >(object);
  (void)_this;
}
void CDOTAUserMsg_HotPotato_Created::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HotPotato_Created::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HotPotato_Created::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HotPotato_Created)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_2_) -
        reinterpret_cast<char*>(&player_id_1_)) + sizeof(player_id_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HotPotato_Created::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id_1(&has_bits);
          player_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_id_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id_2(&has_bits);
          player_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HotPotato_Created::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HotPotato_Created)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id_1(), target);
  }

  // optional uint32 player_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HotPotato_Created)
  return target;
}

size_t CDOTAUserMsg_HotPotato_Created::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HotPotato_Created)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id_1());
    }

    // optional uint32 player_id_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HotPotato_Created::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HotPotato_Created)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HotPotato_Created* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HotPotato_Created>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HotPotato_Created)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HotPotato_Created)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HotPotato_Created::MergeFrom(const CDOTAUserMsg_HotPotato_Created& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HotPotato_Created)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_1_ = from.player_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_2_ = from.player_id_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_HotPotato_Created::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HotPotato_Created)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HotPotato_Created::CopyFrom(const CDOTAUserMsg_HotPotato_Created& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HotPotato_Created)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HotPotato_Created::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HotPotato_Created::InternalSwap(CDOTAUserMsg_HotPotato_Created* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HotPotato_Created, player_id_2_)
      + sizeof(CDOTAUserMsg_HotPotato_Created::player_id_2_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_HotPotato_Created, player_id_1_)>(
          reinterpret_cast<char*>(&player_id_1_),
          reinterpret_cast<char*>(&other->player_id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HotPotato_Created::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_HotPotato_Exploded::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_HotPotato_Exploded>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_HotPotato_Exploded)
}
CDOTAUserMsg_HotPotato_Exploded::CDOTAUserMsg_HotPotato_Exploded(const CDOTAUserMsg_HotPotato_Exploded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_HotPotato_Exploded)
}

void CDOTAUserMsg_HotPotato_Exploded::SharedCtor() {
player_id_ = 0u;
}

CDOTAUserMsg_HotPotato_Exploded::~CDOTAUserMsg_HotPotato_Exploded() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_HotPotato_Exploded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_HotPotato_Exploded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_HotPotato_Exploded::ArenaDtor(void* object) {
  CDOTAUserMsg_HotPotato_Exploded* _this = reinterpret_cast< CDOTAUserMsg_HotPotato_Exploded* >(object);
  (void)_this;
}
void CDOTAUserMsg_HotPotato_Exploded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_HotPotato_Exploded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_HotPotato_Exploded::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_HotPotato_Exploded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_HotPotato_Exploded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_HotPotato_Exploded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_HotPotato_Exploded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_HotPotato_Exploded)
  return target;
}

size_t CDOTAUserMsg_HotPotato_Exploded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_HotPotato_Exploded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_HotPotato_Exploded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_HotPotato_Exploded)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HotPotato_Exploded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_HotPotato_Exploded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_HotPotato_Exploded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_HotPotato_Exploded)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HotPotato_Exploded::MergeFrom(const CDOTAUserMsg_HotPotato_Exploded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_HotPotato_Exploded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_id()) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void CDOTAUserMsg_HotPotato_Exploded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_HotPotato_Exploded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HotPotato_Exploded::CopyFrom(const CDOTAUserMsg_HotPotato_Exploded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_HotPotato_Exploded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HotPotato_Exploded::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HotPotato_Exploded::InternalSwap(CDOTAUserMsg_HotPotato_Exploded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_HotPotato_Exploded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_WK_Arcana_Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WK_Arcana_Progress>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WK_Arcana_Progress)
}
CDOTAUserMsg_WK_Arcana_Progress::CDOTAUserMsg_WK_Arcana_Progress(const CDOTAUserMsg_WK_Arcana_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WK_Arcana_Progress)
}

void CDOTAUserMsg_WK_Arcana_Progress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(hero_id_));
}

CDOTAUserMsg_WK_Arcana_Progress::~CDOTAUserMsg_WK_Arcana_Progress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WK_Arcana_Progress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_WK_Arcana_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_WK_Arcana_Progress::ArenaDtor(void* object) {
  CDOTAUserMsg_WK_Arcana_Progress* _this = reinterpret_cast< CDOTAUserMsg_WK_Arcana_Progress* >(object);
  (void)_this;
}
void CDOTAUserMsg_WK_Arcana_Progress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_WK_Arcana_Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_WK_Arcana_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WK_Arcana_Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WK_Arcana_Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_WK_Arcana_Progress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WK_Arcana_Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 arcana_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_arcana_level(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WK_Arcana_Progress)
  return target;
}

size_t CDOTAUserMsg_WK_Arcana_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WK_Arcana_Progress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 arcana_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_WK_Arcana_Progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WK_Arcana_Progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_WK_Arcana_Progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_WK_Arcana_Progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_WK_Arcana_Progress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WK_Arcana_Progress::MergeFrom(const CDOTAUserMsg_WK_Arcana_Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      arcana_level_ = from.arcana_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WK_Arcana_Progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WK_Arcana_Progress::CopyFrom(const CDOTAUserMsg_WK_Arcana_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WK_Arcana_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WK_Arcana_Progress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WK_Arcana_Progress::InternalSwap(CDOTAUserMsg_WK_Arcana_Progress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WK_Arcana_Progress, hero_id_)
      + sizeof(CDOTAUserMsg_WK_Arcana_Progress::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WK_Arcana_Progress, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WK_Arcana_Progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
}
CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress(const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(progress_));
}

CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::~CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::ArenaDtor(void* object) {
  CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* _this = reinterpret_cast< CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* >(object);
  (void)_this;
}
void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&progress_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  return target;
}

size_t CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 progress = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::MergeFrom(const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::CopyFrom(const CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::InternalSwap(CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, progress_)
      + sizeof(CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::progress_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_GuildChallenge_Progress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_GuildChallenge_Progress>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_progress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_GuildChallenge_Progress)
}
CDOTAUserMsg_GuildChallenge_Progress::CDOTAUserMsg_GuildChallenge_Progress(const CDOTAUserMsg_GuildChallenge_Progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_progress_(from.player_progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(complete_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_GuildChallenge_Progress)
}

void CDOTAUserMsg_GuildChallenge_Progress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&complete_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(complete_));
}

CDOTAUserMsg_GuildChallenge_Progress::~CDOTAUserMsg_GuildChallenge_Progress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_GuildChallenge_Progress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_GuildChallenge_Progress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_GuildChallenge_Progress::ArenaDtor(void* object) {
  CDOTAUserMsg_GuildChallenge_Progress* _this = reinterpret_cast< CDOTAUserMsg_GuildChallenge_Progress* >(object);
  (void)_this;
}
void CDOTAUserMsg_GuildChallenge_Progress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_GuildChallenge_Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_GuildChallenge_Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_GuildChallenge_Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_progress_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&complete_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(complete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_GuildChallenge_Progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CDOTAUserMsg_GuildChallenge_Progress_EChallengeType_IsValid(val))) {
            _internal_set_challenge_type(static_cast<::CDOTAUserMsg_GuildChallenge_Progress_EChallengeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool complete = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_complete(&has_bits);
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_GuildChallenge_Progress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_GuildChallenge_Progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_progress(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_challenge_type(), target);
  }

  // optional uint32 challenge_progress_at_start = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_at_start(), target);
  }

  // optional bool complete = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_complete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_GuildChallenge_Progress)
  return target;
}

size_t CDOTAUserMsg_GuildChallenge_Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_GuildChallenge_Progress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAUserMsg_GuildChallenge_Progress.PlayerProgress player_progress = 1;
  total_size += 1UL * this->_internal_player_progress_size();
  for (const auto& msg : this->player_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 guild_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional .CDOTAUserMsg_GuildChallenge_Progress.EChallengeType challenge_type = 5 [default = k_EChallengeType_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_challenge_type());
    }

    // optional uint32 challenge_progress_at_start = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_progress_at_start());
    }

    // optional bool complete = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_GuildChallenge_Progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GuildChallenge_Progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_GuildChallenge_Progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_GuildChallenge_Progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_GuildChallenge_Progress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GuildChallenge_Progress::MergeFrom(const CDOTAUserMsg_GuildChallenge_Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_progress_.MergeFrom(from.player_progress_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_type_ = from.challenge_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_progress_at_start_ = from.challenge_progress_at_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      complete_ = from.complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GuildChallenge_Progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GuildChallenge_Progress::CopyFrom(const CDOTAUserMsg_GuildChallenge_Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_GuildChallenge_Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GuildChallenge_Progress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GuildChallenge_Progress::InternalSwap(CDOTAUserMsg_GuildChallenge_Progress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_progress_.InternalSwap(&other->player_progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress, complete_)
      + sizeof(CDOTAUserMsg_GuildChallenge_Progress::complete_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_GuildChallenge_Progress, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_GuildChallenge_Progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_WRArcanaProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WRArcanaProgress>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arrows_landed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_dealt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_max_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WRArcanaProgress)
}
CDOTAUserMsg_WRArcanaProgress::CDOTAUserMsg_WRArcanaProgress(const CDOTAUserMsg_WRArcanaProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&arcana_level_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WRArcanaProgress)
}

void CDOTAUserMsg_WRArcanaProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arcana_level_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
}

CDOTAUserMsg_WRArcanaProgress::~CDOTAUserMsg_WRArcanaProgress() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WRArcanaProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_WRArcanaProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_WRArcanaProgress::ArenaDtor(void* object) {
  CDOTAUserMsg_WRArcanaProgress* _this = reinterpret_cast< CDOTAUserMsg_WRArcanaProgress* >(object);
  (void)_this;
}
void CDOTAUserMsg_WRArcanaProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_WRArcanaProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_WRArcanaProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WRArcanaProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&arcana_level_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(arcana_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WRArcanaProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_ehandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arrows_landed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_arrows_landed(&has_bits);
          arrows_landed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_dealt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_damage_dealt(&has_bits);
          damage_dealt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_hp(&has_bits);
          target_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_max_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_max_hp(&has_bits);
          target_max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_WRArcanaProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WRArcanaProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 target_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional uint32 arrows_landed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arrows_landed(), target);
  }

  // optional uint32 damage_dealt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_damage_dealt(), target);
  }

  // optional uint32 target_hp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hp(), target);
  }

  // optional uint32 target_max_hp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_max_hp(), target);
  }

  // optional uint32 arcana_level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_arcana_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WRArcanaProgress)
  return target;
}

size_t CDOTAUserMsg_WRArcanaProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WRArcanaProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 target_ehandle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_ehandle());
    }

    // optional uint32 arrows_landed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arrows_landed());
    }

    // optional uint32 damage_dealt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_dealt());
    }

    // optional uint32 target_hp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_hp());
    }

    // optional uint32 target_max_hp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_max_hp());
    }

    // optional uint32 arcana_level = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_WRArcanaProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_WRArcanaProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WRArcanaProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_WRArcanaProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_WRArcanaProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_WRArcanaProgress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WRArcanaProgress::MergeFrom(const CDOTAUserMsg_WRArcanaProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WRArcanaProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ehandle_ = from.target_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      arrows_landed_ = from.arrows_landed_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_dealt_ = from.damage_dealt_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_hp_ = from.target_hp_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_max_hp_ = from.target_max_hp_;
    }
    if (cached_has_bits & 0x00000040u) {
      arcana_level_ = from.arcana_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WRArcanaProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_WRArcanaProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WRArcanaProgress::CopyFrom(const CDOTAUserMsg_WRArcanaProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WRArcanaProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WRArcanaProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WRArcanaProgress::InternalSwap(CDOTAUserMsg_WRArcanaProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaProgress, arcana_level_)
      + sizeof(CDOTAUserMsg_WRArcanaProgress::arcana_level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaProgress, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WRArcanaProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_WRArcanaSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_WRArcanaSummary>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_arrows_landed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_dealt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_max_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_arcana_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_WRArcanaSummary)
}
CDOTAUserMsg_WRArcanaSummary::CDOTAUserMsg_WRArcanaSummary(const CDOTAUserMsg_WRArcanaSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_WRArcanaSummary)
}

void CDOTAUserMsg_WRArcanaSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(success_));
}

CDOTAUserMsg_WRArcanaSummary::~CDOTAUserMsg_WRArcanaSummary() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_WRArcanaSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_WRArcanaSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_WRArcanaSummary::ArenaDtor(void* object) {
  CDOTAUserMsg_WRArcanaSummary* _this = reinterpret_cast< CDOTAUserMsg_WRArcanaSummary* >(object);
  (void)_this;
}
void CDOTAUserMsg_WRArcanaSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_WRArcanaSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_WRArcanaSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_WRArcanaSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_WRArcanaSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_ehandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_ehandle(&has_bits);
          target_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arrows_landed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_arrows_landed(&has_bits);
          arrows_landed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_dealt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_damage_dealt(&has_bits);
          damage_dealt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_hp(&has_bits);
          target_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_max_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_max_hp(&has_bits);
          target_max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 arcana_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_arcana_level(&has_bits);
          arcana_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_WRArcanaSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_WRArcanaSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional uint32 target_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_ehandle(), target);
  }

  // optional uint32 arrows_landed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arrows_landed(), target);
  }

  // optional uint32 damage_dealt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_damage_dealt(), target);
  }

  // optional uint32 target_hp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hp(), target);
  }

  // optional uint32 target_max_hp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_max_hp(), target);
  }

  // optional uint32 arcana_level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_arcana_level(), target);
  }

  // optional bool success = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_WRArcanaSummary)
  return target;
}

size_t CDOTAUserMsg_WRArcanaSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_WRArcanaSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ehandle());
    }

    // optional uint32 target_ehandle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_ehandle());
    }

    // optional uint32 arrows_landed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arrows_landed());
    }

    // optional uint32 damage_dealt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_dealt());
    }

    // optional uint32 target_hp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_hp());
    }

    // optional uint32 target_max_hp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_max_hp());
    }

    // optional uint32 arcana_level = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_arcana_level());
    }

    // optional bool success = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_WRArcanaSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_WRArcanaSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WRArcanaSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_WRArcanaSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_WRArcanaSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_WRArcanaSummary)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WRArcanaSummary::MergeFrom(const CDOTAUserMsg_WRArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_WRArcanaSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ehandle_ = from.target_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      arrows_landed_ = from.arrows_landed_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_dealt_ = from.damage_dealt_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_hp_ = from.target_hp_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_max_hp_ = from.target_max_hp_;
    }
    if (cached_has_bits & 0x00000040u) {
      arcana_level_ = from.arcana_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WRArcanaSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_WRArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WRArcanaSummary::CopyFrom(const CDOTAUserMsg_WRArcanaSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_WRArcanaSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WRArcanaSummary::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WRArcanaSummary::InternalSwap(CDOTAUserMsg_WRArcanaSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaSummary, success_)
      + sizeof(CDOTAUserMsg_WRArcanaSummary::success_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_WRArcanaSummary, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_WRArcanaSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_EmptyItemSlotAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_EmptyItemSlotAlert>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cooldown_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_EmptyItemSlotAlert)
}
CDOTAUserMsg_EmptyItemSlotAlert::CDOTAUserMsg_EmptyItemSlotAlert(const CDOTAUserMsg_EmptyItemSlotAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_seconds_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_EmptyItemSlotAlert)
}

void CDOTAUserMsg_EmptyItemSlotAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_seconds_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
}

CDOTAUserMsg_EmptyItemSlotAlert::~CDOTAUserMsg_EmptyItemSlotAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_EmptyItemSlotAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_EmptyItemSlotAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_EmptyItemSlotAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_EmptyItemSlotAlert* _this = reinterpret_cast< CDOTAUserMsg_EmptyItemSlotAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_EmptyItemSlotAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_EmptyItemSlotAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_EmptyItemSlotAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_EmptyItemSlotAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_seconds_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(cooldown_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_EmptyItemSlotAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot_index(&has_bits);
          slot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cooldown_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cooldown_seconds(&has_bits);
          cooldown_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_EmptyItemSlotAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_EmptyItemSlotAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional int32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional int32 slot_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot_index(), target);
  }

  // optional int32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cooldown_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_EmptyItemSlotAlert)
  return target;
}

size_t CDOTAUserMsg_EmptyItemSlotAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_EmptyItemSlotAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_id());
    }

    // optional int32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_player_id());
    }

    // optional int32 slot_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot_index());
    }

    // optional int32 cooldown_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cooldown_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_EmptyItemSlotAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_EmptyItemSlotAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_EmptyItemSlotAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_EmptyItemSlotAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_EmptyItemSlotAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_EmptyItemSlotAlert::MergeFrom(const CDOTAUserMsg_EmptyItemSlotAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_index_ = from.slot_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_seconds_ = from.cooldown_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_EmptyItemSlotAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_EmptyItemSlotAlert::CopyFrom(const CDOTAUserMsg_EmptyItemSlotAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_EmptyItemSlotAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EmptyItemSlotAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EmptyItemSlotAlert::InternalSwap(CDOTAUserMsg_EmptyItemSlotAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyItemSlotAlert, cooldown_seconds_)
      + sizeof(CDOTAUserMsg_EmptyItemSlotAlert::cooldown_seconds_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_EmptyItemSlotAlert, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_EmptyItemSlotAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_AghsStatusAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_AghsStatusAlert>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alert_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_scepter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_AghsStatusAlert)
}
CDOTAUserMsg_AghsStatusAlert::CDOTAUserMsg_AghsStatusAlert(const CDOTAUserMsg_AghsStatusAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_shard_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(has_shard_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_AghsStatusAlert)
}

void CDOTAUserMsg_AghsStatusAlert::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_shard_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(has_shard_));
}

CDOTAUserMsg_AghsStatusAlert::~CDOTAUserMsg_AghsStatusAlert() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_AghsStatusAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_AghsStatusAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_AghsStatusAlert::ArenaDtor(void* object) {
  CDOTAUserMsg_AghsStatusAlert* _this = reinterpret_cast< CDOTAUserMsg_AghsStatusAlert* >(object);
  (void)_this;
}
void CDOTAUserMsg_AghsStatusAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_AghsStatusAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_AghsStatusAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_AghsStatusAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_shard_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(has_shard_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_AghsStatusAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_player_id(&has_bits);
          target_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_entindex(&has_bits);
          target_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 alert_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_alert_type(&has_bits);
          alert_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_scepter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_scepter(&has_bits);
          has_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_shard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_shard(&has_bits);
          has_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_AghsStatusAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_AghsStatusAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional uint32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_player_id(), target);
  }

  // optional uint32 target_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_entindex(), target);
  }

  // optional uint32 alert_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_alert_type(), target);
  }

  // optional bool has_scepter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_scepter(), target);
  }

  // optional bool has_shard = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_has_shard(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_AghsStatusAlert)
  return target;
}

size_t CDOTAUserMsg_AghsStatusAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_AghsStatusAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 source_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_player_id());
    }

    // optional uint32 target_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_player_id());
    }

    // optional uint32 target_entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entindex());
    }

    // optional uint32 alert_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_alert_type());
    }

    // optional bool has_scepter = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_shard = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_AghsStatusAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_AghsStatusAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AghsStatusAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_AghsStatusAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_AghsStatusAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_AghsStatusAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AghsStatusAlert::MergeFrom(const CDOTAUserMsg_AghsStatusAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_AghsStatusAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      alert_type_ = from.alert_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_scepter_ = from.has_scepter_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_shard_ = from.has_shard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AghsStatusAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_AghsStatusAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AghsStatusAlert::CopyFrom(const CDOTAUserMsg_AghsStatusAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_AghsStatusAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AghsStatusAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AghsStatusAlert::InternalSwap(CDOTAUserMsg_AghsStatusAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AghsStatusAlert, has_shard_)
      + sizeof(CDOTAUserMsg_AghsStatusAlert::has_shard_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_AghsStatusAlert, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_AghsStatusAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_MutedPlayers::_Internal {
 public:
};

CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_muted_player_ids_(arena),
  voice_muted_player_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_MutedPlayers)
}
CDOTAUserMsg_MutedPlayers::CDOTAUserMsg_MutedPlayers(const CDOTAUserMsg_MutedPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_muted_player_ids_(from.text_muted_player_ids_),
      voice_muted_player_ids_(from.voice_muted_player_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_MutedPlayers)
}

void CDOTAUserMsg_MutedPlayers::SharedCtor() {
}

CDOTAUserMsg_MutedPlayers::~CDOTAUserMsg_MutedPlayers() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_MutedPlayers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_MutedPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAUserMsg_MutedPlayers::ArenaDtor(void* object) {
  CDOTAUserMsg_MutedPlayers* _this = reinterpret_cast< CDOTAUserMsg_MutedPlayers* >(object);
  (void)_this;
}
void CDOTAUserMsg_MutedPlayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_MutedPlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_MutedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_MutedPlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_muted_player_ids_.Clear();
  voice_muted_player_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_MutedPlayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 text_muted_player_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_text_muted_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_text_muted_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 voice_muted_player_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_voice_muted_player_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_voice_muted_player_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_MutedPlayers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_MutedPlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 text_muted_player_ids = 1;
  for (int i = 0, n = this->_internal_text_muted_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_text_muted_player_ids(i), target);
  }

  // repeated int32 voice_muted_player_ids = 2;
  for (int i = 0, n = this->_internal_voice_muted_player_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_voice_muted_player_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_MutedPlayers)
  return target;
}

size_t CDOTAUserMsg_MutedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_MutedPlayers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 text_muted_player_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->text_muted_player_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_text_muted_player_ids_size());
    total_size += data_size;
  }

  // repeated int32 voice_muted_player_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->voice_muted_player_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_voice_muted_player_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_MutedPlayers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_MutedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MutedPlayers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_MutedPlayers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_MutedPlayers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_MutedPlayers)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MutedPlayers::MergeFrom(const CDOTAUserMsg_MutedPlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_MutedPlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_muted_player_ids_.MergeFrom(from.text_muted_player_ids_);
  voice_muted_player_ids_.MergeFrom(from.voice_muted_player_ids_);
}

void CDOTAUserMsg_MutedPlayers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_MutedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MutedPlayers::CopyFrom(const CDOTAUserMsg_MutedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_MutedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MutedPlayers::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MutedPlayers::InternalSwap(CDOTAUserMsg_MutedPlayers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_muted_player_ids_.InternalSwap(&other->text_muted_player_ids_);
  voice_muted_player_ids_.InternalSwap(&other->voice_muted_player_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_MutedPlayers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ContextualTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ContextualTip>()._has_bits_);
  static void set_has_tip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_int_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_int_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_float_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_float_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_string_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_string_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_text_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tip_annotation_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_panorama_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  referenced_abilities_(arena),
  referenced_units_(arena),
  panorama_classes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ContextualTip)
}
CDOTAUserMsg_ContextualTip::CDOTAUserMsg_ContextualTip(const CDOTAUserMsg_ContextualTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      referenced_abilities_(from.referenced_abilities_),
      referenced_units_(from.referenced_units_),
      panorama_classes_(from.panorama_classes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_param()) {
    string_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_param(), 
      GetArena());
  }
  string_param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_param2()) {
    string_param2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_param2(), 
      GetArena());
  }
  tip_text_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tip_text_override()) {
    tip_text_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_text_override(), 
      GetArena());
  }
  tip_annotation_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tip_annotation_override()) {
    tip_annotation_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_annotation_override(), 
      GetArena());
  }
  panorama_snippet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_panorama_snippet()) {
    panorama_snippet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_panorama_snippet(), 
      GetArena());
  }
  ::memcpy(&tip_id_, &from.tip_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_param2_) -
    reinterpret_cast<char*>(&tip_id_)) + sizeof(float_param2_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ContextualTip)
}

void CDOTAUserMsg_ContextualTip::SharedCtor() {
string_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
string_param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tip_text_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tip_annotation_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
panorama_snippet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tip_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float_param2_) -
    reinterpret_cast<char*>(&tip_id_)) + sizeof(float_param2_));
}

CDOTAUserMsg_ContextualTip::~CDOTAUserMsg_ContextualTip() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ContextualTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ContextualTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_text_override_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tip_annotation_override_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  panorama_snippet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ContextualTip::ArenaDtor(void* object) {
  CDOTAUserMsg_ContextualTip* _this = reinterpret_cast< CDOTAUserMsg_ContextualTip* >(object);
  (void)_this;
}
void CDOTAUserMsg_ContextualTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ContextualTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ContextualTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ContextualTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  referenced_abilities_.Clear();
  referenced_units_.Clear();
  panorama_classes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      string_param_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string_param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      tip_text_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tip_annotation_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      panorama_snippet_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&tip_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variant_) -
        reinterpret_cast<char*>(&tip_id_)) + sizeof(variant_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&int_param_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_param2_) -
        reinterpret_cast<char*>(&int_param_)) + sizeof(float_param2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ContextualTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 tip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tip_id(&has_bits);
          tip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string referenced_abilities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_referenced_abilities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.referenced_abilities");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string referenced_units = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_referenced_units();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.referenced_units");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string panorama_classes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_panorama_classes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.panorama_classes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool force_annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_force_annotation(&has_bits);
          force_annotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_variant(&has_bits);
          variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_int_param(&has_bits);
          int_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int_param2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_int_param2(&has_bits);
          int_param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float float_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_float_param(&has_bits);
          float_param_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float float_param2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_float_param2(&has_bits);
          float_param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string string_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_string_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.string_param");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_param2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_string_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.string_param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tip_text_override = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_tip_text_override();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.tip_text_override");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tip_annotation_override = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_tip_annotation_override();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.tip_annotation_override");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string panorama_snippet = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_panorama_snippet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ContextualTip.panorama_snippet");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ContextualTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ContextualTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tip_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tip_id(), target);
  }

  // repeated string referenced_abilities = 2;
  for (int i = 0, n = this->_internal_referenced_abilities_size(); i < n; i++) {
    const auto& s = this->_internal_referenced_abilities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.referenced_abilities");
    target = stream->WriteString(2, s, target);
  }

  // repeated string referenced_units = 3;
  for (int i = 0, n = this->_internal_referenced_units_size(); i < n; i++) {
    const auto& s = this->_internal_referenced_units(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.referenced_units");
    target = stream->WriteString(3, s, target);
  }

  // repeated string panorama_classes = 4;
  for (int i = 0, n = this->_internal_panorama_classes_size(); i < n; i++) {
    const auto& s = this->_internal_panorama_classes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.panorama_classes");
    target = stream->WriteString(4, s, target);
  }

  // optional bool force_annotation = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_force_annotation(), target);
  }

  // optional int32 variant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_variant(), target);
  }

  // optional int32 int_param = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_int_param(), target);
  }

  // optional int32 int_param2 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_int_param2(), target);
  }

  // optional float float_param = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_float_param(), target);
  }

  // optional float float_param2 = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_float_param2(), target);
  }

  // optional string string_param = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_param().data(), static_cast<int>(this->_internal_string_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.string_param");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_string_param(), target);
  }

  // optional string string_param2 = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_param2().data(), static_cast<int>(this->_internal_string_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.string_param2");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string_param2(), target);
  }

  // optional string tip_text_override = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text_override().data(), static_cast<int>(this->_internal_tip_text_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.tip_text_override");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tip_text_override(), target);
  }

  // optional string tip_annotation_override = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_annotation_override().data(), static_cast<int>(this->_internal_tip_annotation_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.tip_annotation_override");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_tip_annotation_override(), target);
  }

  // optional string panorama_snippet = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_panorama_snippet().data(), static_cast<int>(this->_internal_panorama_snippet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ContextualTip.panorama_snippet");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_panorama_snippet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ContextualTip)
  return target;
}

size_t CDOTAUserMsg_ContextualTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ContextualTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string referenced_abilities = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(referenced_abilities_.size());
  for (int i = 0, n = referenced_abilities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      referenced_abilities_.Get(i));
  }

  // repeated string referenced_units = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(referenced_units_.size());
  for (int i = 0, n = referenced_units_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      referenced_units_.Get(i));
  }

  // repeated string panorama_classes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(panorama_classes_.size());
  for (int i = 0, n = panorama_classes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      panorama_classes_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_param = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_param());
    }

    // optional string string_param2 = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_param2());
    }

    // optional string tip_text_override = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_text_override());
    }

    // optional string tip_annotation_override = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tip_annotation_override());
    }

    // optional string panorama_snippet = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_panorama_snippet());
    }

    // optional int32 tip_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tip_id());
    }

    // optional bool force_annotation = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 variant = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_variant());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 int_param = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_param());
    }

    // optional int32 int_param2 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_param2());
    }

    // optional float float_param = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float float_param2 = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ContextualTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ContextualTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ContextualTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ContextualTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ContextualTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ContextualTip)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ContextualTip::MergeFrom(const CDOTAUserMsg_ContextualTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ContextualTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  referenced_abilities_.MergeFrom(from.referenced_abilities_);
  referenced_units_.MergeFrom(from.referenced_units_);
  panorama_classes_.MergeFrom(from.panorama_classes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_param(from._internal_string_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string_param2(from._internal_string_param2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_tip_text_override(from._internal_tip_text_override());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_tip_annotation_override(from._internal_tip_annotation_override());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_panorama_snippet(from._internal_panorama_snippet());
    }
    if (cached_has_bits & 0x00000020u) {
      tip_id_ = from.tip_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      force_annotation_ = from.force_annotation_;
    }
    if (cached_has_bits & 0x00000080u) {
      variant_ = from.variant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      int_param_ = from.int_param_;
    }
    if (cached_has_bits & 0x00000200u) {
      int_param2_ = from.int_param2_;
    }
    if (cached_has_bits & 0x00000400u) {
      float_param_ = from.float_param_;
    }
    if (cached_has_bits & 0x00000800u) {
      float_param2_ = from.float_param2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ContextualTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ContextualTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ContextualTip::CopyFrom(const CDOTAUserMsg_ContextualTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ContextualTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ContextualTip::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ContextualTip::InternalSwap(CDOTAUserMsg_ContextualTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  referenced_abilities_.InternalSwap(&other->referenced_abilities_);
  referenced_units_.InternalSwap(&other->referenced_units_);
  panorama_classes_.InternalSwap(&other->panorama_classes_);
  string_param_.Swap(&other->string_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_param2_.Swap(&other->string_param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_text_override_.Swap(&other->tip_text_override_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tip_annotation_override_.Swap(&other->tip_annotation_override_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  panorama_snippet_.Swap(&other->panorama_snippet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ContextualTip, float_param2_)
      + sizeof(CDOTAUserMsg_ContextualTip::float_param2_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ContextualTip, tip_id_)>(
          reinterpret_cast<char*>(&tip_id_),
          reinterpret_cast<char*>(&other->tip_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ContextualTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAUserMsg_ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_ChatMessage>()._has_bits_);
  static void set_has_source_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_ChatMessage)
}
CDOTAUserMsg_ChatMessage::CDOTAUserMsg_ChatMessage(const CDOTAUserMsg_ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_text()) {
    message_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_text(), 
      GetArena());
  }
  ::memcpy(&source_player_id_, &from.source_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_ChatMessage)
}

void CDOTAUserMsg_ChatMessage::SharedCtor() {
message_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&source_player_id_)) + sizeof(channel_type_));
}

CDOTAUserMsg_ChatMessage::~CDOTAUserMsg_ChatMessage() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_ChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAUserMsg_ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ChatMessage::ArenaDtor(void* object) {
  CDOTAUserMsg_ChatMessage* _this = reinterpret_cast< CDOTAUserMsg_ChatMessage* >(object);
  (void)_this;
}
void CDOTAUserMsg_ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&source_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_type_) -
        reinterpret_cast<char*>(&source_player_id_)) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_player_id(&has_bits);
          source_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_type(&has_bits);
          channel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAUserMsg_ChatMessage.message_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAUserMsg_ChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_ChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source_player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_type(), target);
  }

  // optional string message_text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_text().data(), static_cast<int>(this->_internal_message_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAUserMsg_ChatMessage.message_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_ChatMessage)
  return target;
}

size_t CDOTAUserMsg_ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_ChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message_text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_text());
    }

    // optional int32 source_player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_player_id());
    }

    // optional uint32 channel_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAUserMsg_ChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAUserMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAUserMsg_ChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAUserMsg_ChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAUserMsg_ChatMessage)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatMessage::MergeFrom(const CDOTAUserMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_text(from._internal_message_text());
    }
    if (cached_has_bits & 0x00000002u) {
      source_player_id_ = from.source_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAUserMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatMessage::CopyFrom(const CDOTAUserMsg_ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatMessage::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatMessage::InternalSwap(CDOTAUserMsg_ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_text_.Swap(&other->message_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatMessage, channel_type_)
      + sizeof(CDOTAUserMsg_ChatMessage::channel_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_ChatMessage, source_player_id_)>(
          reinterpret_cast<char*>(&source_player_id_),
          reinterpret_cast<char*>(&other->source_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_ChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AIDebugLine* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AIDebugLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AIDebugLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_Ping* Arena::CreateMaybeMessage< ::CDOTAUserMsg_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SwapVerify* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SwapVerify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SwapVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BotChat* Arena::CreateMaybeMessage< ::CDOTAUserMsg_BotChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BotChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CombatHeroPositions* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CombatHeroPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CombatHeroPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CombatLogBulkData* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CombatLogBulkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CombatLogBulkData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo_Attacker* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo_Attacker >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniKillCamInfo* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniKillCamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniKillCamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlobalLightColor* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlobalLightColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlobalLightColor >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlobalLightDirection* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlobalLightDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlobalLightDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_LocationPing* Arena::CreateMaybeMessage< ::CDOTAUserMsg_LocationPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_LocationPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PingConfirmation* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PingConfirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PingConfirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EnemyItemAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_EnemyItemAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EnemyItemAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ModifierAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ModifierAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ModifierAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HPManaAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HPManaAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HPManaAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GlyphAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GlyphAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GlyphAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RadarAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_RadarAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RadarAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WillPurchaseAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_WillPurchaseAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WillPurchaseAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EmptyTeleportAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_EmptyTeleportAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EmptyTeleportAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MarsArenaOfBloodAttack* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MarsArenaOfBloodAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MarsArenaOfBloodAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAEntityMsg_InvokerSpellCast* Arena::CreateMaybeMessage< ::CDOTAEntityMsg_InvokerSpellCast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAEntityMsg_InvokerSpellCast >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BuyBackStateAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_BuyBackStateAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BuyBackStateAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QuickBuyAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_QuickBuyAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QuickBuyAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CourierKilledAlert_LostItem* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CourierKilledAlert_LostItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CourierKilledAlert_LostItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CourierKilledAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CourierKilledAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CourierKilledAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MinimapEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MinimapEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MinimapEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MapLine* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MinimapDebugPoint* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MinimapDebugPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MinimapDebugPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CreateLinearProjectile* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CreateLinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CreateLinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DestroyLinearProjectile* Arena::CreateMaybeMessage< ::CDOTAUserMsg_DestroyLinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DestroyLinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DodgeTrackingProjectiles* Arena::CreateMaybeMessage< ::CDOTAUserMsg_DodgeTrackingProjectiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DodgeTrackingProjectiles >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpectatorPlayerClick* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpectatorPlayerClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpectatorPlayerClick >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpectatorPlayerUnitOrders* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpectatorPlayerUnitOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpectatorPlayerUnitOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_NevermoreRequiem* Arena::CreateMaybeMessage< ::CDOTAUserMsg_NevermoreRequiem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_NevermoreRequiem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_InvalidCommand* Arena::CreateMaybeMessage< ::CDOTAUserMsg_InvalidCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_InvalidCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HudError* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HudError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HudError >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SharedCooldown* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SharedCooldown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SharedCooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SetNextAutobuyItem* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SetNextAutobuyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SetNextAutobuyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HalloweenDrops* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HalloweenDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HalloweenDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PredictionResult_Prediction* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PredictionResult_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PredictionResult_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PredictionResult* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAResponseQuerySerialized_Fact* Arena::CreateMaybeMessage< ::CDOTAResponseQuerySerialized_Fact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAResponseQuerySerialized_Fact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAResponseQuerySerialized* Arena::CreateMaybeMessage< ::CDOTAResponseQuerySerialized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAResponseQuerySerialized >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTASpeechMatchOnClient* Arena::CreateMaybeMessage< ::CDOTASpeechMatchOnClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTASpeechMatchOnClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_Interval* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_Speech* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_Speech >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_Speech >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_SpeechMute* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_SpeechMute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_SpeechMute >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_AddGesture* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_AddGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_AddGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_RemoveGesture* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_RemoveGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_RemoveGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_BloodImpact* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_BloodImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_BloodImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent_FadeGesture* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent_FadeGesture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent_FadeGesture >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UnitEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UnitEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UnitEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemPurchased* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemPurchased >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemPurchased >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemSold* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemSold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemSold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ItemFound* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ItemFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ItemFound >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OverheadEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_OverheadEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OverheadEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialTipInfo* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialTipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialTipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialFinish* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialMinimapPosition* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialMinimapPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialMinimapPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendGenericToolTip* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendGenericToolTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendGenericToolTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WorldLine* Arena::CreateMaybeMessage< ::CDOTAUserMsg_WorldLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WorldLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatWheel* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ReceivedXmasGift* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ReceivedXmasGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ReceivedXmasGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShowSurvey* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShowSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShowSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UpdateSharedContent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UpdateSharedContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UpdateSharedContent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialRequestExp* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialRequestExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialRequestExp >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialFade* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialFade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialFade >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TutorialPingMinimap* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TutorialPingMinimap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TutorialPingMinimap >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GamerulesStateChanged* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GamerulesStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GamerulesStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AddQuestLogEntry* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AddQuestLogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AddQuestLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendStatPopup* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendStatPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendStatPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DismissAllStatPopups* Arena::CreateMaybeMessage< ::CDOTAUserMsg_DismissAllStatPopups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DismissAllStatPopups >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendRoshanSpectatorPhase* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendRoshanSpectatorPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendRoshanSpectatorPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendRoshanPopup* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendRoshanPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendRoshanPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SendFinalGold* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SendFinalGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SendFinalGold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomMsg* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ClientLoadGridNav* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ClientLoadGridNav >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ClientLoadGridNav >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_Projectile* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_Projectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_Projectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_ProjectileLoc* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_ProjectileLoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_ProjectileLoc >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_DestroyProjectile* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_DestroyProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_DestroyProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_DotaBloodImpact* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_DotaBloodImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_DotaBloodImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilityPing* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilityPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilityPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_UnitAnimation* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_UnitAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_UnitAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TE_UnitAnimationEnd* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TE_UnitAnimationEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TE_UnitAnimationEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShowGenericPopup* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShowGenericPopup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShowGenericPopup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteStart* Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteUpdate* Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VoteEnd* Arena::CreateMaybeMessage< ::CDOTAUserMsg_VoteEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VoteEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BoosterStatePlayer* Arena::CreateMaybeMessage< ::CDOTAUserMsg_BoosterStatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BoosterStatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BoosterState* Arena::CreateMaybeMessage< ::CDOTAUserMsg_BoosterState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BoosterState >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PlayerMMR* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PlayerMMR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PlayerMMR >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilitySteal* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilitySteal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilitySteal >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroLookup* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroPositionInfo* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroPositionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroPositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsHeroMinuteDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsHeroMinuteDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsHeroMinuteDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsTeamMinuteDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsTeamMinuteDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsTeamMinuteDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsPlayerKillShare* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsPlayerKillShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsPlayerKillShare >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsKillDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsKillDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsKillDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_StatsMatchDetails* Arena::CreateMaybeMessage< ::CDOTAUserMsg_StatsMatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_StatsMatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MiniTaunt* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MiniTaunt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MiniTaunt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SpeechBubble* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SpeechBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SpeechBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHeaderMessage* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHeaderMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHeroAbilityStat* Arena::CreateMaybeMessage< ::CMsgHeroAbilityStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHeroAbilityStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCombatAnalyzerPlayerStat* Arena::CreateMaybeMessage< ::CMsgCombatAnalyzerPlayerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCombatAnalyzerPlayerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCombatAnalyzerStats* Arena::CreateMaybeMessage< ::CMsgCombatAnalyzerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCombatAnalyzerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_BeastChat* Arena::CreateMaybeMessage< ::CDOTAUserMsg_BeastChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_BeastChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Create* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Create >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Create >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Modify* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Modify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Modify >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CustomHudElement_Destroy* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CustomHudElement_Destroy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CustomHudElement_Destroy >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CompendiumStatePlayer* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CompendiumStatePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CompendiumStatePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CompendiumState* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CompendiumState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CompendiumState >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ProjectionAbility* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ProjectionAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ProjectionAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ProjectionEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ProjectionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ProjectionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_XPAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_XPAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_XPAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TalentTreeAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TalentTreeAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TalentTreeAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_UpdateQuestProgress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_UpdateQuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_UpdateQuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QuestStatus* Arena::CreateMaybeMessage< ::CDOTAUserMsg_QuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SuggestHeroPick* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SuggestHeroPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SuggestHeroPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SuggestHeroRole* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SuggestHeroRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SuggestHeroRole >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_KillcamDamageTaken* Arena::CreateMaybeMessage< ::CDOTAUserMsg_KillcamDamageTaken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_KillcamDamageTaken >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SelectPenaltyGold* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SelectPenaltyGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SelectPenaltyGold >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_RollDiceResult* Arena::CreateMaybeMessage< ::CDOTAUserMsg_RollDiceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_RollDiceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_FlipCoinResult* Arena::CreateMaybeMessage< ::CDOTAUserMsg_FlipCoinResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_FlipCoinResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMessage_RequestItemSuggestions* Arena::CreateMaybeMessage< ::CDOTAUserMessage_RequestItemSuggestions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMessage_RequestItemSuggestions >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMessage_TeamCaptainChanged* Arena::CreateMaybeMessage< ::CDOTAUserMessage_TeamCaptainChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMessage_TeamCaptainChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatWheelCooldown* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatWheelCooldown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatWheelCooldown >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HeroRelicProgress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HeroRelicProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HeroRelicProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AbilityDraftRequestAbility* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AbilityDraftRequestAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AbilityDraftRequestAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DamageReport* Arena::CreateMaybeMessage< ::CDOTAUserMsg_DamageReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DamageReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_SalutePlayer* Arena::CreateMaybeMessage< ::CDOTAUserMsg_SalutePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_SalutePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_TipAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_TipAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ReplaceQueryUnit* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ReplaceQueryUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ReplaceQueryUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ESArcanaCombo* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ESArcanaCombo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ESArcanaCombo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ESArcanaComboSummary* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ESArcanaComboSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ESArcanaComboSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OMArcanaCombo* Arena::CreateMaybeMessage< ::CDOTAUserMsg_OMArcanaCombo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OMArcanaCombo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HighFiveCompleted* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HighFiveCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HighFiveCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HighFiveLeftHanging* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HighFiveLeftHanging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HighFiveLeftHanging >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ShovelUnearth* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ShovelUnearth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ShovelUnearth >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AllStarEvent_PlayerScore* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AllStarEvent_PlayerScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AllStarEvent_PlayerScore >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AllStarEvent* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AllStarEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AllStarEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QueuedOrderRemoved* Arena::CreateMaybeMessage< ::CDOTAUserMsg_QueuedOrderRemoved >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QueuedOrderRemoved >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_DebugChallenge* Arena::CreateMaybeMessage< ::CDOTAUserMsg_DebugChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_DebugChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_FoundNeutralItem* Arena::CreateMaybeMessage< ::CDOTAUserMsg_FoundNeutralItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_FoundNeutralItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OutpostCaptured* Arena::CreateMaybeMessage< ::CDOTAUserMsg_OutpostCaptured >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OutpostCaptured >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_OutpostGrantedXP* Arena::CreateMaybeMessage< ::CDOTAUserMsg_OutpostGrantedXP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_OutpostGrantedXP >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MoveCameraToUnit* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MoveCameraToUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MoveCameraToUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PauseMinigameData_DataBit* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PauseMinigameData_DataBit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PauseMinigameData_DataBit >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_PauseMinigameData* Arena::CreateMaybeMessage< ::CDOTAUserMsg_PauseMinigameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_PauseMinigameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_VersusScene_PlayerBehavior* Arena::CreateMaybeMessage< ::CDOTAUserMsg_VersusScene_PlayerBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_VersusScene_PlayerBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_QoP_ArcanaSummary* Arena::CreateMaybeMessage< ::CDOTAUserMsg_QoP_ArcanaSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_QoP_ArcanaSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HotPotato_Created* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HotPotato_Created >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HotPotato_Created >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_HotPotato_Exploded* Arena::CreateMaybeMessage< ::CDOTAUserMsg_HotPotato_Exploded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_HotPotato_Exploded >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WK_Arcana_Progress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_WK_Arcana_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WK_Arcana_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GuildChallenge_Progress_PlayerProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_GuildChallenge_Progress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_GuildChallenge_Progress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_GuildChallenge_Progress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WRArcanaProgress* Arena::CreateMaybeMessage< ::CDOTAUserMsg_WRArcanaProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WRArcanaProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_WRArcanaSummary* Arena::CreateMaybeMessage< ::CDOTAUserMsg_WRArcanaSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_WRArcanaSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_EmptyItemSlotAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_EmptyItemSlotAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_EmptyItemSlotAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_AghsStatusAlert* Arena::CreateMaybeMessage< ::CDOTAUserMsg_AghsStatusAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_AghsStatusAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_MutedPlayers* Arena::CreateMaybeMessage< ::CDOTAUserMsg_MutedPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_MutedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ContextualTip* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ContextualTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ContextualTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_ChatMessage* Arena::CreateMaybeMessage< ::CDOTAUserMsg_ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
