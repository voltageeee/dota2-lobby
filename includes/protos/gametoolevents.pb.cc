// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gametoolevents.proto

#include "gametoolevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ChangeMapToolEvent::ChangeMapToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChangeMapToolEventDefaultTypeInternal {
  constexpr ChangeMapToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeMapToolEventDefaultTypeInternal() {}
  union {
    ChangeMapToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeMapToolEventDefaultTypeInternal _ChangeMapToolEvent_default_instance_;
constexpr TraceRayServerToolEvent::TraceRayServerToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct TraceRayServerToolEventDefaultTypeInternal {
  constexpr TraceRayServerToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TraceRayServerToolEventDefaultTypeInternal() {}
  union {
    TraceRayServerToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TraceRayServerToolEventDefaultTypeInternal _TraceRayServerToolEvent_default_instance_;
constexpr ToolTraceRayResult::ToolTraceRayResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : impact_(nullptr)
  , normal_(nullptr)
  , hit_(false)
  , distance_(0)
  , fraction_(0)
  , ehandle_(0){}
struct ToolTraceRayResultDefaultTypeInternal {
  constexpr ToolTraceRayResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolTraceRayResultDefaultTypeInternal() {}
  union {
    ToolTraceRayResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolTraceRayResultDefaultTypeInternal _ToolTraceRayResult_default_instance_;
constexpr SpawnEntityToolEvent::SpawnEntityToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_keyvalues_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientsideentity_(false){}
struct SpawnEntityToolEventDefaultTypeInternal {
  constexpr SpawnEntityToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpawnEntityToolEventDefaultTypeInternal() {}
  union {
    SpawnEntityToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpawnEntityToolEventDefaultTypeInternal _SpawnEntityToolEvent_default_instance_;
constexpr SpawnEntityToolEventResult::SpawnEntityToolEventResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0){}
struct SpawnEntityToolEventResultDefaultTypeInternal {
  constexpr SpawnEntityToolEventResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpawnEntityToolEventResultDefaultTypeInternal() {}
  union {
    SpawnEntityToolEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpawnEntityToolEventResultDefaultTypeInternal _SpawnEntityToolEventResult_default_instance_;
constexpr DestroyEntityToolEvent::DestroyEntityToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0){}
struct DestroyEntityToolEventDefaultTypeInternal {
  constexpr DestroyEntityToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DestroyEntityToolEventDefaultTypeInternal() {}
  union {
    DestroyEntityToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DestroyEntityToolEventDefaultTypeInternal _DestroyEntityToolEvent_default_instance_;
constexpr DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DestroyAllEntitiesToolEventDefaultTypeInternal {
  constexpr DestroyAllEntitiesToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DestroyAllEntitiesToolEventDefaultTypeInternal() {}
  union {
    DestroyAllEntitiesToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DestroyAllEntitiesToolEventDefaultTypeInternal _DestroyAllEntitiesToolEvent_default_instance_;
constexpr RestartMapToolEvent::RestartMapToolEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RestartMapToolEventDefaultTypeInternal {
  constexpr RestartMapToolEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestartMapToolEventDefaultTypeInternal() {}
  union {
    RestartMapToolEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestartMapToolEventDefaultTypeInternal _RestartMapToolEvent_default_instance_;
constexpr ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0)
  , clientsideentity_(false){}
struct ToolEvent_GetEntityInfoDefaultTypeInternal {
  constexpr ToolEvent_GetEntityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInfoDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_GetEntityInfoDefaultTypeInternal _ToolEvent_GetEntityInfo_default_instance_;
constexpr ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cppclass_(nullptr)
  , classname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_(nullptr)
  , mins_(nullptr)
  , maxs_(nullptr){}
struct ToolEvent_GetEntityInfoResultDefaultTypeInternal {
  constexpr ToolEvent_GetEntityInfoResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInfoResultDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInfoResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_GetEntityInfoResultDefaultTypeInternal _ToolEvent_GetEntityInfoResult_default_instance_;
constexpr ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ehandle_(0)
  , clientsideentity_(false){}
struct ToolEvent_GetEntityInputsDefaultTypeInternal {
  constexpr ToolEvent_GetEntityInputsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInputsDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInputs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_GetEntityInputsDefaultTypeInternal _ToolEvent_GetEntityInputs_default_instance_;
constexpr ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_list_(){}
struct ToolEvent_GetEntityInputsResultDefaultTypeInternal {
  constexpr ToolEvent_GetEntityInputsResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_GetEntityInputsResultDefaultTypeInternal() {}
  union {
    ToolEvent_GetEntityInputsResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_GetEntityInputsResultDefaultTypeInternal _ToolEvent_GetEntityInputsResult_default_instance_;
constexpr ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ehandle_(0)
  , clientsideentity_(false){}
struct ToolEvent_FireEntityInputDefaultTypeInternal {
  constexpr ToolEvent_FireEntityInputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_FireEntityInputDefaultTypeInternal() {}
  union {
    ToolEvent_FireEntityInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_FireEntityInputDefaultTypeInternal _ToolEvent_FireEntityInput_default_instance_;
constexpr ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isrecording_(false){}
struct ToolEvent_SFMRecordingStateChangedDefaultTypeInternal {
  constexpr ToolEvent_SFMRecordingStateChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_SFMRecordingStateChangedDefaultTypeInternal() {}
  union {
    ToolEvent_SFMRecordingStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_SFMRecordingStateChangedDefaultTypeInternal _ToolEvent_SFMRecordingStateChanged_default_instance_;
constexpr ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isactive_(false){}
struct ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal {
  constexpr ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal() {}
  union {
    ToolEvent_SFMToolActiveStateChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal _ToolEvent_SFMToolActiveStateChanged_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gametoolevents_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gametoolevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gametoolevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gametoolevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChangeMapToolEvent, mapname_),
  0,
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, start_),
  PROTOBUF_FIELD_OFFSET(::TraceRayServerToolEvent, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, hit_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, impact_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, normal_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, distance_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, fraction_),
  PROTOBUF_FIELD_OFFSET(::ToolTraceRayResult, ehandle_),
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, entity_keyvalues_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEvent, clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpawnEntityToolEventResult, ehandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DestroyEntityToolEvent, ehandle_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DestroyAllEntitiesToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RestartMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfo, clientsideentity_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, cppclass_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, classname_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, name_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, origin_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, mins_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInfoResult, maxs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputs, clientsideentity_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_GetEntityInputsResult, input_list_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, ehandle_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, clientsideentity_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, input_name_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_FireEntityInput, input_param_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMRecordingStateChanged, isrecording_),
  0,
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ToolEvent_SFMToolActiveStateChanged, isactive_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::ChangeMapToolEvent)},
  { 7, 14, sizeof(::TraceRayServerToolEvent)},
  { 16, 27, sizeof(::ToolTraceRayResult)},
  { 33, 40, sizeof(::SpawnEntityToolEvent)},
  { 42, 48, sizeof(::SpawnEntityToolEventResult)},
  { 49, 55, sizeof(::DestroyEntityToolEvent)},
  { 56, -1, sizeof(::DestroyAllEntitiesToolEvent)},
  { 61, -1, sizeof(::RestartMapToolEvent)},
  { 66, 73, sizeof(::ToolEvent_GetEntityInfo)},
  { 75, 86, sizeof(::ToolEvent_GetEntityInfoResult)},
  { 92, 99, sizeof(::ToolEvent_GetEntityInputs)},
  { 101, -1, sizeof(::ToolEvent_GetEntityInputsResult)},
  { 107, 116, sizeof(::ToolEvent_FireEntityInput)},
  { 120, 126, sizeof(::ToolEvent_SFMRecordingStateChanged)},
  { 127, 133, sizeof(::ToolEvent_SFMToolActiveStateChanged)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChangeMapToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TraceRayServerToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolTraceRayResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpawnEntityToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SpawnEntityToolEventResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DestroyEntityToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DestroyAllEntitiesToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RestartMapToolEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_GetEntityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_GetEntityInfoResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_GetEntityInputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_GetEntityInputsResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_FireEntityInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_SFMRecordingStateChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ToolEvent_SFMToolActiveStateChanged_default_instance_),
};

const char descriptor_table_protodef_gametoolevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024gametoolevents.proto\032\026networkbasetypes"
  ".proto\"%\n\022ChangeMapToolEvent\022\017\n\007mapname\030"
  "\001 \001(\t\"O\n\027TraceRayServerToolEvent\022\032\n\005star"
  "t\030\001 \001(\0132\013.CMsgVector\022\030\n\003end\030\002 \001(\0132\013.CMsg"
  "Vector\"\220\001\n\022ToolTraceRayResult\022\013\n\003hit\030\001 \001"
  "(\010\022\033\n\006impact\030\002 \001(\0132\013.CMsgVector\022\033\n\006norma"
  "l\030\003 \001(\0132\013.CMsgVector\022\020\n\010distance\030\004 \001(\002\022\020"
  "\n\010fraction\030\005 \001(\002\022\017\n\007ehandle\030\006 \001(\005\"J\n\024Spa"
  "wnEntityToolEvent\022\030\n\020entity_keyvalues\030\001 "
  "\001(\014\022\030\n\020clientsideentity\030\002 \001(\010\"-\n\032SpawnEn"
  "tityToolEventResult\022\017\n\007ehandle\030\001 \001(\005\")\n\026"
  "DestroyEntityToolEvent\022\017\n\007ehandle\030\001 \001(\005\""
  "\035\n\033DestroyAllEntitiesToolEvent\"\025\n\023Restar"
  "tMapToolEvent\"D\n\027ToolEvent_GetEntityInfo"
  "\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020clientsideentity\030\002 "
  "\001(\010\"\257\001\n\035ToolEvent_GetEntityInfoResult\022\032\n"
  "\010cppclass\030\001 \001(\t:\010shithead\022\021\n\tclassname\030\002"
  " \001(\t\022\014\n\004name\030\003 \001(\t\022\033\n\006origin\030\004 \001(\0132\013.CMs"
  "gVector\022\031\n\004mins\030\005 \001(\0132\013.CMsgVector\022\031\n\004ma"
  "xs\030\006 \001(\0132\013.CMsgVector\"F\n\031ToolEvent_GetEn"
  "tityInputs\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020clientsid"
  "eentity\030\002 \001(\010\"5\n\037ToolEvent_GetEntityInpu"
  "tsResult\022\022\n\ninput_list\030\001 \003(\t\"o\n\031ToolEven"
  "t_FireEntityInput\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020cl"
  "ientsideentity\030\002 \001(\010\022\022\n\ninput_name\030\003 \001(\t"
  "\022\023\n\013input_param\030\004 \001(\t\"9\n\"ToolEvent_SFMRe"
  "cordingStateChanged\022\023\n\013isrecording\030\001 \001(\010"
  "\"7\n#ToolEvent_SFMToolActiveStateChanged\022"
  "\020\n\010isactive\030\001 \001(\010B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gametoolevents_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gametoolevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gametoolevents_2eproto = {
  false, false, 1142, descriptor_table_protodef_gametoolevents_2eproto, "gametoolevents.proto", 
  &descriptor_table_gametoolevents_2eproto_once, descriptor_table_gametoolevents_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_gametoolevents_2eproto::offsets,
  file_level_metadata_gametoolevents_2eproto, file_level_enum_descriptors_gametoolevents_2eproto, file_level_service_descriptors_gametoolevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_gametoolevents_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gametoolevents_2eproto);
  return descriptor_table_gametoolevents_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gametoolevents_2eproto(&descriptor_table_gametoolevents_2eproto);

// ===================================================================

class ChangeMapToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeMapToolEvent>()._has_bits_);
  static void set_has_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChangeMapToolEvent::ChangeMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChangeMapToolEvent)
}
ChangeMapToolEvent::ChangeMapToolEvent(const ChangeMapToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mapname()) {
    mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ChangeMapToolEvent)
}

void ChangeMapToolEvent::SharedCtor() {
mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeMapToolEvent::~ChangeMapToolEvent() {
  // @@protoc_insertion_point(destructor:ChangeMapToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeMapToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeMapToolEvent::ArenaDtor(void* object) {
  ChangeMapToolEvent* _this = reinterpret_cast< ChangeMapToolEvent* >(object);
  (void)_this;
}
void ChangeMapToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeMapToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangeMapToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mapname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeMapToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mapname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChangeMapToolEvent.mapname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeMapToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeMapToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChangeMapToolEvent.mapname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeMapToolEvent)
  return target;
}

size_t ChangeMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChangeMapToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mapname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeMapToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMapToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeMapToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChangeMapToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChangeMapToolEvent)
    MergeFrom(*source);
  }
}

void ChangeMapToolEvent::MergeFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapname()) {
    _internal_set_mapname(from._internal_mapname());
  }
}

void ChangeMapToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapToolEvent::CopyFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapToolEvent::IsInitialized() const {
  return true;
}

void ChangeMapToolEvent::InternalSwap(ChangeMapToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mapname_.Swap(&other->mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeMapToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TraceRayServerToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TraceRayServerToolEvent>()._has_bits_);
  static const ::CMsgVector& start(const TraceRayServerToolEvent* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& end(const TraceRayServerToolEvent* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
TraceRayServerToolEvent::_Internal::start(const TraceRayServerToolEvent* msg) {
  return *msg->start_;
}
const ::CMsgVector&
TraceRayServerToolEvent::_Internal::end(const TraceRayServerToolEvent* msg) {
  return *msg->end_;
}
void TraceRayServerToolEvent::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TraceRayServerToolEvent::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TraceRayServerToolEvent::TraceRayServerToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TraceRayServerToolEvent)
}
TraceRayServerToolEvent::TraceRayServerToolEvent(const TraceRayServerToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::CMsgVector(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::CMsgVector(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TraceRayServerToolEvent)
}

void TraceRayServerToolEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TraceRayServerToolEvent::~TraceRayServerToolEvent() {
  // @@protoc_insertion_point(destructor:TraceRayServerToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceRayServerToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void TraceRayServerToolEvent::ArenaDtor(void* object) {
  TraceRayServerToolEvent* _this = reinterpret_cast< TraceRayServerToolEvent* >(object);
  (void)_this;
}
void TraceRayServerToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceRayServerToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TraceRayServerToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TraceRayServerToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceRayServerToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceRayServerToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TraceRayServerToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TraceRayServerToolEvent)
  return target;
}

size_t TraceRayServerToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TraceRayServerToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .CMsgVector end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceRayServerToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceRayServerToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceRayServerToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TraceRayServerToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TraceRayServerToolEvent)
    MergeFrom(*source);
  }
}

void TraceRayServerToolEvent::MergeFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::CMsgVector::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::CMsgVector::MergeFrom(from._internal_end());
    }
  }
}

void TraceRayServerToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceRayServerToolEvent::CopyFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRayServerToolEvent::IsInitialized() const {
  return true;
}

void TraceRayServerToolEvent::InternalSwap(TraceRayServerToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceRayServerToolEvent, end_)
      + sizeof(TraceRayServerToolEvent::end_)
      - PROTOBUF_FIELD_OFFSET(TraceRayServerToolEvent, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceRayServerToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolTraceRayResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolTraceRayResult>()._has_bits_);
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& impact(const ToolTraceRayResult* msg);
  static void set_has_impact(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& normal(const ToolTraceRayResult* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
ToolTraceRayResult::_Internal::impact(const ToolTraceRayResult* msg) {
  return *msg->impact_;
}
const ::CMsgVector&
ToolTraceRayResult::_Internal::normal(const ToolTraceRayResult* msg) {
  return *msg->normal_;
}
void ToolTraceRayResult::clear_impact() {
  if (impact_ != nullptr) impact_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ToolTraceRayResult::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ToolTraceRayResult::ToolTraceRayResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolTraceRayResult)
}
ToolTraceRayResult::ToolTraceRayResult(const ToolTraceRayResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_impact()) {
    impact_ = new ::CMsgVector(*from.impact_);
  } else {
    impact_ = nullptr;
  }
  if (from._internal_has_normal()) {
    normal_ = new ::CMsgVector(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  ::memcpy(&hit_, &from.hit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ehandle_) -
    reinterpret_cast<char*>(&hit_)) + sizeof(ehandle_));
  // @@protoc_insertion_point(copy_constructor:ToolTraceRayResult)
}

void ToolTraceRayResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&impact_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ehandle_) -
    reinterpret_cast<char*>(&impact_)) + sizeof(ehandle_));
}

ToolTraceRayResult::~ToolTraceRayResult() {
  // @@protoc_insertion_point(destructor:ToolTraceRayResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolTraceRayResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete impact_;
  if (this != internal_default_instance()) delete normal_;
}

void ToolTraceRayResult::ArenaDtor(void* object) {
  ToolTraceRayResult* _this = reinterpret_cast< ToolTraceRayResult* >(object);
  (void)_this;
}
void ToolTraceRayResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolTraceRayResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolTraceRayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolTraceRayResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(impact_ != nullptr);
      impact_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&hit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ehandle_) -
        reinterpret_cast<char*>(&hit_)) + sizeof(ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolTraceRayResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool hit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hit(&has_bits);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector impact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_fraction(&has_bits);
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 ehandle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolTraceRayResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolTraceRayResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hit(), target);
  }

  // optional .CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::impact(this), target, stream);
  }

  // optional .CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::normal(this), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fraction(), target);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolTraceRayResult)
  return target;
}

size_t ToolTraceRayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolTraceRayResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector impact = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *impact_);
    }

    // optional .CMsgVector normal = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional bool hit = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float fraction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 ehandle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ehandle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolTraceRayResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolTraceRayResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolTraceRayResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolTraceRayResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolTraceRayResult)
    MergeFrom(*source);
  }
}

void ToolTraceRayResult::MergeFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_impact()->::CMsgVector::MergeFrom(from._internal_impact());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_normal()->::CMsgVector::MergeFrom(from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      fraction_ = from.fraction_;
    }
    if (cached_has_bits & 0x00000020u) {
      ehandle_ = from.ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolTraceRayResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolTraceRayResult::CopyFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolTraceRayResult::IsInitialized() const {
  return true;
}

void ToolTraceRayResult::InternalSwap(ToolTraceRayResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolTraceRayResult, ehandle_)
      + sizeof(ToolTraceRayResult::ehandle_)
      - PROTOBUF_FIELD_OFFSET(ToolTraceRayResult, impact_)>(
          reinterpret_cast<char*>(&impact_),
          reinterpret_cast<char*>(&other->impact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolTraceRayResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpawnEntityToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SpawnEntityToolEvent>()._has_bits_);
  static void set_has_entity_keyvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpawnEntityToolEvent::SpawnEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpawnEntityToolEvent)
}
SpawnEntityToolEvent::SpawnEntityToolEvent(const SpawnEntityToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_keyvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_keyvalues()) {
    entity_keyvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_keyvalues(), 
      GetArena());
  }
  clientsideentity_ = from.clientsideentity_;
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEvent)
}

void SpawnEntityToolEvent::SharedCtor() {
entity_keyvalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientsideentity_ = false;
}

SpawnEntityToolEvent::~SpawnEntityToolEvent() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpawnEntityToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_keyvalues_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpawnEntityToolEvent::ArenaDtor(void* object) {
  SpawnEntityToolEvent* _this = reinterpret_cast< SpawnEntityToolEvent* >(object);
  (void)_this;
}
void SpawnEntityToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpawnEntityToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpawnEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SpawnEntityToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    entity_keyvalues_.ClearNonDefaultToEmpty();
  }
  clientsideentity_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnEntityToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes entity_keyvalues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity_keyvalues();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpawnEntityToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entity_keyvalues(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEvent)
  return target;
}

size_t SpawnEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpawnEntityToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes entity_keyvalues = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_entity_keyvalues());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpawnEntityToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpawnEntityToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpawnEntityToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpawnEntityToolEvent)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEvent::MergeFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entity_keyvalues(from._internal_entity_keyvalues());
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpawnEntityToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEvent::CopyFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEvent::IsInitialized() const {
  return true;
}

void SpawnEntityToolEvent::InternalSwap(SpawnEntityToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_keyvalues_.Swap(&other->entity_keyvalues_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clientsideentity_, other->clientsideentity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnEntityToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpawnEntityToolEventResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SpawnEntityToolEventResult>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SpawnEntityToolEventResult::SpawnEntityToolEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SpawnEntityToolEventResult)
}
SpawnEntityToolEventResult::SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:SpawnEntityToolEventResult)
}

void SpawnEntityToolEventResult::SharedCtor() {
ehandle_ = 0;
}

SpawnEntityToolEventResult::~SpawnEntityToolEventResult() {
  // @@protoc_insertion_point(destructor:SpawnEntityToolEventResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpawnEntityToolEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpawnEntityToolEventResult::ArenaDtor(void* object) {
  SpawnEntityToolEventResult* _this = reinterpret_cast< SpawnEntityToolEventResult* >(object);
  (void)_this;
}
void SpawnEntityToolEventResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpawnEntityToolEventResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpawnEntityToolEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SpawnEntityToolEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnEntityToolEventResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpawnEntityToolEventResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpawnEntityToolEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpawnEntityToolEventResult)
  return target;
}

size_t SpawnEntityToolEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpawnEntityToolEventResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ehandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpawnEntityToolEventResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEventResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpawnEntityToolEventResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpawnEntityToolEventResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpawnEntityToolEventResult)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEventResult::MergeFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ehandle()) {
    _internal_set_ehandle(from._internal_ehandle());
  }
}

void SpawnEntityToolEventResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEventResult::CopyFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEventResult::IsInitialized() const {
  return true;
}

void SpawnEntityToolEventResult::InternalSwap(SpawnEntityToolEventResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnEntityToolEventResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DestroyEntityToolEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyEntityToolEvent>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestroyEntityToolEvent::DestroyEntityToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DestroyEntityToolEvent)
}
DestroyEntityToolEvent::DestroyEntityToolEvent(const DestroyEntityToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:DestroyEntityToolEvent)
}

void DestroyEntityToolEvent::SharedCtor() {
ehandle_ = 0;
}

DestroyEntityToolEvent::~DestroyEntityToolEvent() {
  // @@protoc_insertion_point(destructor:DestroyEntityToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DestroyEntityToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DestroyEntityToolEvent::ArenaDtor(void* object) {
  DestroyEntityToolEvent* _this = reinterpret_cast< DestroyEntityToolEvent* >(object);
  (void)_this;
}
void DestroyEntityToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroyEntityToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DestroyEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:DestroyEntityToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyEntityToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyEntityToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DestroyEntityToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DestroyEntityToolEvent)
  return target;
}

size_t DestroyEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DestroyEntityToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ehandle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ehandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyEntityToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyEntityToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyEntityToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DestroyEntityToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DestroyEntityToolEvent)
    MergeFrom(*source);
  }
}

void DestroyEntityToolEvent::MergeFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ehandle()) {
    _internal_set_ehandle(from._internal_ehandle());
  }
}

void DestroyEntityToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyEntityToolEvent::CopyFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEntityToolEvent::IsInitialized() const {
  return true;
}

void DestroyEntityToolEvent::InternalSwap(DestroyEntityToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ehandle_, other->ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyEntityToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DestroyAllEntitiesToolEvent::_Internal {
 public:
};

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DestroyAllEntitiesToolEvent)
}
DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DestroyAllEntitiesToolEvent)
}

void DestroyAllEntitiesToolEvent::SharedCtor() {
}

DestroyAllEntitiesToolEvent::~DestroyAllEntitiesToolEvent() {
  // @@protoc_insertion_point(destructor:DestroyAllEntitiesToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DestroyAllEntitiesToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DestroyAllEntitiesToolEvent::ArenaDtor(void* object) {
  DestroyAllEntitiesToolEvent* _this = reinterpret_cast< DestroyAllEntitiesToolEvent* >(object);
  (void)_this;
}
void DestroyAllEntitiesToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DestroyAllEntitiesToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DestroyAllEntitiesToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:DestroyAllEntitiesToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyAllEntitiesToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestroyAllEntitiesToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DestroyAllEntitiesToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DestroyAllEntitiesToolEvent)
  return target;
}

size_t DestroyAllEntitiesToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DestroyAllEntitiesToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyAllEntitiesToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyAllEntitiesToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestroyAllEntitiesToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DestroyAllEntitiesToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DestroyAllEntitiesToolEvent)
    MergeFrom(*source);
  }
}

void DestroyAllEntitiesToolEvent::MergeFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DestroyAllEntitiesToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyAllEntitiesToolEvent::CopyFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyAllEntitiesToolEvent::IsInitialized() const {
  return true;
}

void DestroyAllEntitiesToolEvent::InternalSwap(DestroyAllEntitiesToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyAllEntitiesToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RestartMapToolEvent::_Internal {
 public:
};

RestartMapToolEvent::RestartMapToolEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RestartMapToolEvent)
}
RestartMapToolEvent::RestartMapToolEvent(const RestartMapToolEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RestartMapToolEvent)
}

void RestartMapToolEvent::SharedCtor() {
}

RestartMapToolEvent::~RestartMapToolEvent() {
  // @@protoc_insertion_point(destructor:RestartMapToolEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestartMapToolEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RestartMapToolEvent::ArenaDtor(void* object) {
  RestartMapToolEvent* _this = reinterpret_cast< RestartMapToolEvent* >(object);
  (void)_this;
}
void RestartMapToolEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartMapToolEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestartMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:RestartMapToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartMapToolEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartMapToolEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RestartMapToolEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RestartMapToolEvent)
  return target;
}

size_t RestartMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RestartMapToolEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartMapToolEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartMapToolEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartMapToolEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RestartMapToolEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RestartMapToolEvent)
    MergeFrom(*source);
  }
}

void RestartMapToolEvent::MergeFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RestartMapToolEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMapToolEvent::CopyFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMapToolEvent::IsInitialized() const {
  return true;
}

void RestartMapToolEvent::InternalSwap(RestartMapToolEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartMapToolEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_GetEntityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInfo>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInfo)
}
ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfo)
}

void ToolEvent_GetEntityInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInfo::~ToolEvent_GetEntityInfo() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_GetEntityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToolEvent_GetEntityInfo::ArenaDtor(void* object) {
  ToolEvent_GetEntityInfo* _this = reinterpret_cast< ToolEvent_GetEntityInfo* >(object);
  (void)_this;
}
void ToolEvent_GetEntityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_GetEntityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_GetEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_GetEntityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfo)
  return target;
}

size_t ToolEvent_GetEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_GetEntityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_GetEntityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_GetEntityInfo)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfo::MergeFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfo::CopyFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfo::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfo::InternalSwap(ToolEvent_GetEntityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfo, clientsideentity_)
      + sizeof(ToolEvent_GetEntityInfo::clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfo, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_GetEntityInfoResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInfoResult>()._has_bits_);
  static void set_has_cppclass(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_classname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& origin(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& mins(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_mins(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& maxs(const ToolEvent_GetEntityInfoResult* msg);
  static void set_has_maxs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::origin(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->origin_;
}
const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::mins(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->mins_;
}
const ::CMsgVector&
ToolEvent_GetEntityInfoResult::_Internal::maxs(const ToolEvent_GetEntityInfoResult* msg) {
  return *msg->maxs_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_{{{"shithead", 8}}, {nullptr}};
void ToolEvent_GetEntityInfoResult::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ToolEvent_GetEntityInfoResult::clear_mins() {
  if (mins_ != nullptr) mins_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ToolEvent_GetEntityInfoResult::clear_maxs() {
  if (maxs_ != nullptr) maxs_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInfoResult)
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cppclass_.UnsafeSetDefault(nullptr);
  if (from._internal_has_cppclass()) {
    cppclass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_cppclass(), 
      GetArena());
  }
  classname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_classname()) {
    classname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_classname(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_mins()) {
    mins_ = new ::CMsgVector(*from.mins_);
  } else {
    mins_ = nullptr;
  }
  if (from._internal_has_maxs()) {
    maxs_ = new ::CMsgVector(*from.maxs_);
  } else {
    maxs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInfoResult)
}

void ToolEvent_GetEntityInfoResult::SharedCtor() {
cppclass_.UnsafeSetDefault(nullptr);
classname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maxs_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(maxs_));
}

ToolEvent_GetEntityInfoResult::~ToolEvent_GetEntityInfoResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInfoResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_GetEntityInfoResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cppclass_.DestroyNoArena(nullptr);
  classname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete mins_;
  if (this != internal_default_instance()) delete maxs_;
}

void ToolEvent_GetEntityInfoResult::ArenaDtor(void* object) {
  ToolEvent_GetEntityInfoResult* _this = reinterpret_cast< ToolEvent_GetEntityInfoResult* >(object);
  (void)_this;
}
void ToolEvent_GetEntityInfoResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_GetEntityInfoResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_GetEntityInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInfoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      cppclass_.ClearToDefault(::ToolEvent_GetEntityInfoResult::_i_give_permission_to_break_this_code_default_cppclass_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      classname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(mins_ != nullptr);
      mins_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(maxs_ != nullptr);
      maxs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInfoResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cppclass();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.cppclass");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string classname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_classname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.classname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_GetEntityInfoResult.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector mins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector maxs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_GetEntityInfoResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInfoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cppclass().data(), static_cast<int>(this->_internal_cppclass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.cppclass");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cppclass(), target);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_classname().data(), static_cast<int>(this->_internal_classname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.classname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_classname(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInfoResult.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional .CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::origin(this), target, stream);
  }

  // optional .CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mins(this), target, stream);
  }

  // optional .CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::maxs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInfoResult)
  return target;
}

size_t ToolEvent_GetEntityInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInfoResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cppclass = 1 [default = "shithead"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cppclass());
    }

    // optional string classname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_classname());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CMsgVector origin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .CMsgVector mins = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mins_);
    }

    // optional .CMsgVector maxs = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxs_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfoResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_GetEntityInfoResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_GetEntityInfoResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_GetEntityInfoResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cppclass(from._internal_cppclass());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_classname(from._internal_classname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_origin()->::CMsgVector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_mins()->::CMsgVector::MergeFrom(from._internal_mins());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_maxs()->::CMsgVector::MergeFrom(from._internal_maxs());
    }
  }
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfoResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfoResult::InternalSwap(ToolEvent_GetEntityInfoResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cppclass_.Swap(&other->cppclass_, nullptr, GetArena());
  classname_.Swap(&other->classname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, maxs_)
      + sizeof(ToolEvent_GetEntityInfoResult::maxs_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInfoResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_GetEntityInputs::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_GetEntityInputs>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInputs)
}
ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputs)
}

void ToolEvent_GetEntityInputs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInputs::~ToolEvent_GetEntityInputs() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_GetEntityInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToolEvent_GetEntityInputs::ArenaDtor(void* object) {
  ToolEvent_GetEntityInputs* _this = reinterpret_cast< ToolEvent_GetEntityInputs* >(object);
  (void)_this;
}
void ToolEvent_GetEntityInputs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_GetEntityInputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_GetEntityInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_GetEntityInputs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputs)
  return target;
}

size_t ToolEvent_GetEntityInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInputs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInputs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_GetEntityInputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_GetEntityInputs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_GetEntityInputs)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputs::MergeFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInputs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputs::CopyFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputs::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputs::InternalSwap(ToolEvent_GetEntityInputs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInputs, clientsideentity_)
      + sizeof(ToolEvent_GetEntityInputs::clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_GetEntityInputs, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInputs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_GetEntityInputsResult::_Internal {
 public:
};

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_GetEntityInputsResult)
}
ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_list_(from.input_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ToolEvent_GetEntityInputsResult)
}

void ToolEvent_GetEntityInputsResult::SharedCtor() {
}

ToolEvent_GetEntityInputsResult::~ToolEvent_GetEntityInputsResult() {
  // @@protoc_insertion_point(destructor:ToolEvent_GetEntityInputsResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_GetEntityInputsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToolEvent_GetEntityInputsResult::ArenaDtor(void* object) {
  ToolEvent_GetEntityInputsResult* _this = reinterpret_cast< ToolEvent_GetEntityInputsResult* >(object);
  (void)_this;
}
void ToolEvent_GetEntityInputsResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_GetEntityInputsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_GetEntityInputsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_GetEntityInputsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_GetEntityInputsResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string input_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_GetEntityInputsResult.input_list");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_GetEntityInputsResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_GetEntityInputsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->_internal_input_list_size(); i < n; i++) {
    const auto& s = this->_internal_input_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_GetEntityInputsResult.input_list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_GetEntityInputsResult)
  return target;
}

size_t ToolEvent_GetEntityInputsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_GetEntityInputsResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_list_.size());
  for (int i = 0, n = input_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputsResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_GetEntityInputsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_GetEntityInputsResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_GetEntityInputsResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_list_.MergeFrom(from.input_list_);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputsResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputsResult::InternalSwap(ToolEvent_GetEntityInputsResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_list_.InternalSwap(&other->input_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_GetEntityInputsResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_FireEntityInput::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_FireEntityInput>()._has_bits_);
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clientsideentity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_FireEntityInput)
}
ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input_name()) {
    input_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_name(), 
      GetArena());
  }
  input_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input_param()) {
    input_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_param(), 
      GetArena());
  }
  ::memcpy(&ehandle_, &from.ehandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:ToolEvent_FireEntityInput)
}

void ToolEvent_FireEntityInput::SharedCtor() {
input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ehandle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
}

ToolEvent_FireEntityInput::~ToolEvent_FireEntityInput() {
  // @@protoc_insertion_point(destructor:ToolEvent_FireEntityInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_FireEntityInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ToolEvent_FireEntityInput::ArenaDtor(void* object) {
  ToolEvent_FireEntityInput* _this = reinterpret_cast< ToolEvent_FireEntityInput* >(object);
  (void)_this;
}
void ToolEvent_FireEntityInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_FireEntityInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_FireEntityInput::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_FireEntityInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      input_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      input_param_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&ehandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clientsideentity_) -
        reinterpret_cast<char*>(&ehandle_)) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_FireEntityInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ehandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ehandle(&has_bits);
          ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clientsideentity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clientsideentity(&has_bits);
          clientsideentity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_FireEntityInput.input_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string input_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_input_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ToolEvent_FireEntityInput.input_param");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_FireEntityInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_FireEntityInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clientsideentity(), target);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_name().data(), static_cast<int>(this->_internal_input_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_FireEntityInput.input_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_name(), target);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_input_param().data(), static_cast<int>(this->_internal_input_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ToolEvent_FireEntityInput.input_param");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_input_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_FireEntityInput)
  return target;
}

size_t ToolEvent_FireEntityInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_FireEntityInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string input_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_name());
    }

    // optional string input_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_param());
    }

    // optional int32 ehandle = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ehandle());
    }

    // optional bool clientsideentity = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_FireEntityInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_FireEntityInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_FireEntityInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_FireEntityInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_FireEntityInput)
    MergeFrom(*source);
  }
}

void ToolEvent_FireEntityInput::MergeFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_input_name(from._internal_input_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_input_param(from._internal_input_param());
    }
    if (cached_has_bits & 0x00000004u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_FireEntityInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_FireEntityInput::CopyFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_FireEntityInput::IsInitialized() const {
  return true;
}

void ToolEvent_FireEntityInput::InternalSwap(ToolEvent_FireEntityInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_name_.Swap(&other->input_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_param_.Swap(&other->input_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ToolEvent_FireEntityInput, clientsideentity_)
      + sizeof(ToolEvent_FireEntityInput::clientsideentity_)
      - PROTOBUF_FIELD_OFFSET(ToolEvent_FireEntityInput, ehandle_)>(
          reinterpret_cast<char*>(&ehandle_),
          reinterpret_cast<char*>(&other->ehandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_FireEntityInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_SFMRecordingStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_SFMRecordingStateChanged>()._has_bits_);
  static void set_has_isrecording(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_SFMRecordingStateChanged)
}
ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isrecording_ = from.isrecording_;
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMRecordingStateChanged)
}

void ToolEvent_SFMRecordingStateChanged::SharedCtor() {
isrecording_ = false;
}

ToolEvent_SFMRecordingStateChanged::~ToolEvent_SFMRecordingStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMRecordingStateChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_SFMRecordingStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToolEvent_SFMRecordingStateChanged::ArenaDtor(void* object) {
  ToolEvent_SFMRecordingStateChanged* _this = reinterpret_cast< ToolEvent_SFMRecordingStateChanged* >(object);
  (void)_this;
}
void ToolEvent_SFMRecordingStateChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_SFMRecordingStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_SFMRecordingStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_SFMRecordingStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isrecording_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_SFMRecordingStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isrecording = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isrecording(&has_bits);
          isrecording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_SFMRecordingStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMRecordingStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isrecording(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMRecordingStateChanged)
  return target;
}

size_t ToolEvent_SFMRecordingStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_SFMRecordingStateChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isrecording = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMRecordingStateChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_SFMRecordingStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_SFMRecordingStateChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_SFMRecordingStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isrecording()) {
    _internal_set_isrecording(from._internal_isrecording());
  }
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMRecordingStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMRecordingStateChanged::InternalSwap(ToolEvent_SFMRecordingStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isrecording_, other->isrecording_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_SFMRecordingStateChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ToolEvent_SFMToolActiveStateChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<ToolEvent_SFMToolActiveStateChanged>()._has_bits_);
  static void set_has_isactive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ToolEvent_SFMToolActiveStateChanged)
}
ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  isactive_ = from.isactive_;
  // @@protoc_insertion_point(copy_constructor:ToolEvent_SFMToolActiveStateChanged)
}

void ToolEvent_SFMToolActiveStateChanged::SharedCtor() {
isactive_ = false;
}

ToolEvent_SFMToolActiveStateChanged::~ToolEvent_SFMToolActiveStateChanged() {
  // @@protoc_insertion_point(destructor:ToolEvent_SFMToolActiveStateChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToolEvent_SFMToolActiveStateChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToolEvent_SFMToolActiveStateChanged::ArenaDtor(void* object) {
  ToolEvent_SFMToolActiveStateChanged* _this = reinterpret_cast< ToolEvent_SFMToolActiveStateChanged* >(object);
  (void)_this;
}
void ToolEvent_SFMToolActiveStateChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToolEvent_SFMToolActiveStateChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToolEvent_SFMToolActiveStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:ToolEvent_SFMToolActiveStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isactive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToolEvent_SFMToolActiveStateChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isactive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isactive(&has_bits);
          isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolEvent_SFMToolActiveStateChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ToolEvent_SFMToolActiveStateChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ToolEvent_SFMToolActiveStateChanged)
  return target;
}

size_t ToolEvent_SFMToolActiveStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ToolEvent_SFMToolActiveStateChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isactive = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMToolActiveStateChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolEvent_SFMToolActiveStateChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ToolEvent_SFMToolActiveStateChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ToolEvent_SFMToolActiveStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isactive()) {
    _internal_set_isactive(from._internal_isactive());
  }
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMToolActiveStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMToolActiveStateChanged::InternalSwap(ToolEvent_SFMToolActiveStateChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isactive_, other->isactive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolEvent_SFMToolActiveStateChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChangeMapToolEvent* Arena::CreateMaybeMessage< ::ChangeMapToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChangeMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::TraceRayServerToolEvent* Arena::CreateMaybeMessage< ::TraceRayServerToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TraceRayServerToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolTraceRayResult* Arena::CreateMaybeMessage< ::ToolTraceRayResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolTraceRayResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SpawnEntityToolEvent* Arena::CreateMaybeMessage< ::SpawnEntityToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpawnEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::SpawnEntityToolEventResult* Arena::CreateMaybeMessage< ::SpawnEntityToolEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SpawnEntityToolEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DestroyEntityToolEvent* Arena::CreateMaybeMessage< ::DestroyEntityToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DestroyEntityToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::DestroyAllEntitiesToolEvent* Arena::CreateMaybeMessage< ::DestroyAllEntitiesToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DestroyAllEntitiesToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::RestartMapToolEvent* Arena::CreateMaybeMessage< ::RestartMapToolEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RestartMapToolEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInfo* Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInfoResult* Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInfoResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInfoResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInputs* Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_GetEntityInputsResult* Arena::CreateMaybeMessage< ::ToolEvent_GetEntityInputsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_GetEntityInputsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_FireEntityInput* Arena::CreateMaybeMessage< ::ToolEvent_FireEntityInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_FireEntityInput >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_SFMRecordingStateChanged* Arena::CreateMaybeMessage< ::ToolEvent_SFMRecordingStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_SFMRecordingStateChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::ToolEvent_SFMToolActiveStateChanged* Arena::CreateMaybeMessage< ::ToolEvent_SFMToolActiveStateChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ToolEvent_SFMToolActiveStateChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
