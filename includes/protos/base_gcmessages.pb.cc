// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_gcmessages.proto

#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_id_(0u)
  , quantity_(0u)
  , cost_in_local_currency_(0u)
  , purchase_type_(0u)
  , source_reference_id_(PROTOBUF_ULONGLONG(0)){}
struct CGCStorePurchaseInit_LineItemDefaultTypeInternal {
  constexpr CGCStorePurchaseInit_LineItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCStorePurchaseInit_LineItemDefaultTypeInternal() {}
  union {
    CGCStorePurchaseInit_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCStorePurchaseInit_LineItemDefaultTypeInternal _CGCStorePurchaseInit_LineItem_default_instance_;
constexpr CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_items_()
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(0)
  , currency_(0){}
struct CMsgGCStorePurchaseInitDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseInitDefaultTypeInternal _CMsgGCStorePurchaseInit_default_instance_;
constexpr CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txn_id_(PROTOBUF_ULONGLONG(0))
  , result_(0){}
struct CMsgGCStorePurchaseInitResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseInitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseInitResponseDefaultTypeInternal _CMsgGCStorePurchaseInitResponse_default_instance_;
constexpr CMsgSystemBroadcast::CMsgSystemBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgSystemBroadcastDefaultTypeInternal {
  constexpr CMsgSystemBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSystemBroadcastDefaultTypeInternal() {}
  union {
    CMsgSystemBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSystemBroadcastDefaultTypeInternal _CMsgSystemBroadcast_default_instance_;
constexpr CMsgClientPingData::CMsgClientPingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relay_codes_()
  , _relay_codes_cached_byte_size_()
  , relay_pings_()
  , _relay_pings_cached_byte_size_()
  , region_codes_()
  , _region_codes_cached_byte_size_()
  , region_pings_()
  , _region_pings_cached_byte_size_()
  , region_ping_failed_bitmask_(0u){}
struct CMsgClientPingDataDefaultTypeInternal {
  constexpr CMsgClientPingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientPingDataDefaultTypeInternal() {}
  union {
    CMsgClientPingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientPingDataDefaultTypeInternal _CMsgClientPingData_default_instance_;
constexpr CMsgInviteToParty::CMsgInviteToParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_data_(nullptr)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , client_version_(0u)
  , team_id_(0u)
  , as_coach_(false){}
struct CMsgInviteToPartyDefaultTypeInternal {
  constexpr CMsgInviteToPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInviteToPartyDefaultTypeInternal() {}
  union {
    CMsgInviteToParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInviteToPartyDefaultTypeInternal _CMsgInviteToParty_default_instance_;
constexpr CMsgInviteToLobby::CMsgInviteToLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0))
  , client_version_(0u){}
struct CMsgInviteToLobbyDefaultTypeInternal {
  constexpr CMsgInviteToLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInviteToLobbyDefaultTypeInternal() {}
  union {
    CMsgInviteToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInviteToLobbyDefaultTypeInternal _CMsgInviteToLobby_default_instance_;
constexpr CMsgInvitationCreated::CMsgInvitationCreated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(PROTOBUF_ULONGLONG(0))
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , user_offline_(false){}
struct CMsgInvitationCreatedDefaultTypeInternal {
  constexpr CMsgInvitationCreatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInvitationCreatedDefaultTypeInternal() {}
  union {
    CMsgInvitationCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInvitationCreatedDefaultTypeInternal _CMsgInvitationCreated_default_instance_;
constexpr CMsgPartyInviteResponse::CMsgPartyInviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_data_(nullptr)
  , party_id_(PROTOBUF_ULONGLONG(0))
  , accept_(false)
  , client_version_(0u){}
struct CMsgPartyInviteResponseDefaultTypeInternal {
  constexpr CMsgPartyInviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyInviteResponseDefaultTypeInternal() {}
  union {
    CMsgPartyInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyInviteResponseDefaultTypeInternal _CMsgPartyInviteResponse_default_instance_;
constexpr CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(PROTOBUF_ULONGLONG(0))
  , accept_(false)
  , client_version_(0u)
  , custom_game_crc_(PROTOBUF_ULONGLONG(0))
  , custom_game_timestamp_(0u){}
struct CMsgLobbyInviteResponseDefaultTypeInternal {
  constexpr CMsgLobbyInviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyInviteResponseDefaultTypeInternal() {}
  union {
    CMsgLobbyInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyInviteResponseDefaultTypeInternal _CMsgLobbyInviteResponse_default_instance_;
constexpr CMsgKickFromParty::CMsgKickFromParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgKickFromPartyDefaultTypeInternal {
  constexpr CMsgKickFromPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKickFromPartyDefaultTypeInternal() {}
  union {
    CMsgKickFromParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKickFromPartyDefaultTypeInternal _CMsgKickFromParty_default_instance_;
constexpr CMsgLeaveParty::CMsgLeaveParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgLeavePartyDefaultTypeInternal {
  constexpr CMsgLeavePartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeavePartyDefaultTypeInternal() {}
  union {
    CMsgLeaveParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeavePartyDefaultTypeInternal _CMsgLeaveParty_default_instance_;
constexpr CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)

  , latest_timestamp_from_steam_(0u){}
struct CMsgCustomGameInstallStatusDefaultTypeInternal {
  constexpr CMsgCustomGameInstallStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCustomGameInstallStatusDefaultTypeInternal() {}
  union {
    CMsgCustomGameInstallStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCustomGameInstallStatusDefaultTypeInternal _CMsgCustomGameInstallStatus_default_instance_;
constexpr CMsgServerAvailable::CMsgServerAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_game_install_status_(nullptr){}
struct CMsgServerAvailableDefaultTypeInternal {
  constexpr CMsgServerAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerAvailableDefaultTypeInternal() {}
  union {
    CMsgServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerAvailableDefaultTypeInternal _CMsgServerAvailable_default_instance_;
constexpr CMsgLANServerAvailable::CMsgLANServerAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgLANServerAvailableDefaultTypeInternal {
  constexpr CMsgLANServerAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLANServerAvailableDefaultTypeInternal() {}
  union {
    CMsgLANServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLANServerAvailableDefaultTypeInternal _CMsgLANServerAvailable_default_instance_;
constexpr CSOEconGameAccountClient::CSOEconGameAccountClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_backpack_slots_(0u)
  , trial_account_(false)
  , need_to_choose_most_helpful_friend_(false)
  , in_coaches_list_(false)
  , made_first_purchase_(false)
  , trade_ban_expiration_(0u)
  , duel_ban_expiration_(0u)
  , eligible_for_online_play_(true){}
struct CSOEconGameAccountClientDefaultTypeInternal {
  constexpr CSOEconGameAccountClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconGameAccountClientDefaultTypeInternal() {}
  union {
    CSOEconGameAccountClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconGameAccountClientDefaultTypeInternal _CSOEconGameAccountClient_default_instance_;
constexpr CSOItemCriteriaCondition::CSOItemCriteriaCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , op_(0)
  , required_(false)
  , float_value_(0){}
struct CSOItemCriteriaConditionDefaultTypeInternal {
  constexpr CSOItemCriteriaConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemCriteriaConditionDefaultTypeInternal() {}
  union {
    CSOItemCriteriaCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemCriteriaConditionDefaultTypeInternal _CSOItemCriteriaCondition_default_instance_;
constexpr CSOItemCriteria::CSOItemCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conditions_()
  , item_level_(0u)
  , item_quality_(0)
  , initial_inventory_(0u)
  , initial_quantity_(0u)
  , item_level_set_(false)
  , item_quality_set_(false)
  , ignore_enabled_flag_(false)
  , recent_only_(false){}
struct CSOItemCriteriaDefaultTypeInternal {
  constexpr CSOItemCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemCriteriaDefaultTypeInternal() {}
  union {
    CSOItemCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemCriteriaDefaultTypeInternal _CSOItemCriteria_default_instance_;
constexpr CSOItemRecipe::CSOItemRecipe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_items_criteria_()
  , output_items_criteria_()
  , input_item_dupe_counts_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , n_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_inputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_outputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , requires_all_same_class_(false)
  , requires_all_same_slot_(false)
  , class_usage_for_output_(0)
  , slot_usage_for_output_(0)
  , set_for_output_(0){}
struct CSOItemRecipeDefaultTypeInternal {
  constexpr CSOItemRecipeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemRecipeDefaultTypeInternal() {}
  union {
    CSOItemRecipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemRecipeDefaultTypeInternal _CSOItemRecipe_default_instance_;
constexpr CMsgApplyStrangePart::CMsgApplyStrangePart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strange_part_item_id_(PROTOBUF_ULONGLONG(0))
  , item_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgApplyStrangePartDefaultTypeInternal {
  constexpr CMsgApplyStrangePartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyStrangePartDefaultTypeInternal() {}
  union {
    CMsgApplyStrangePart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyStrangePartDefaultTypeInternal _CMsgApplyStrangePart_default_instance_;
constexpr CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upgrade_item_id_(PROTOBUF_ULONGLONG(0))
  , pennant_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgApplyPennantUpgradeDefaultTypeInternal {
  constexpr CMsgApplyPennantUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyPennantUpgradeDefaultTypeInternal() {}
  union {
    CMsgApplyPennantUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyPennantUpgradeDefaultTypeInternal _CMsgApplyPennantUpgrade_default_instance_;
constexpr CMsgApplyEggEssence::CMsgApplyEggEssence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : essence_item_id_(PROTOBUF_ULONGLONG(0))
  , egg_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgApplyEggEssenceDefaultTypeInternal {
  constexpr CMsgApplyEggEssenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyEggEssenceDefaultTypeInternal() {}
  union {
    CMsgApplyEggEssence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyEggEssenceDefaultTypeInternal _CMsgApplyEggEssence_default_instance_;
constexpr CSOEconItemAttribute::CSOEconItemAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , value_(0u){}
struct CSOEconItemAttributeDefaultTypeInternal {
  constexpr CSOEconItemAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemAttributeDefaultTypeInternal() {}
  union {
    CSOEconItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
constexpr CSOEconItemEquipped::CSOEconItemEquipped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_class_(0u)
  , new_slot_(0u){}
struct CSOEconItemEquippedDefaultTypeInternal {
  constexpr CSOEconItemEquippedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEquippedDefaultTypeInternal() {}
  union {
    CSOEconItemEquipped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
constexpr CSOEconItem::CSOEconItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_()
  , equipped_state_()
  , interior_item_(nullptr)
  , id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , flags_(0u)
  , origin_(0u)
  , style_(0u)
  , original_id_(PROTOBUF_ULONGLONG(0))
  , quality_(4u)
  , quantity_(1u)
  , level_(1u){}
struct CSOEconItemDefaultTypeInternal {
  constexpr CSOEconItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDefaultTypeInternal() {}
  union {
    CSOEconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
constexpr CMsgSortItems::CMsgSortItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sort_type_(0u){}
struct CMsgSortItemsDefaultTypeInternal {
  constexpr CMsgSortItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSortItemsDefaultTypeInternal() {}
  union {
    CMsgSortItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSortItemsDefaultTypeInternal _CMsgSortItems_default_instance_;
constexpr CSOEconClaimCode::CSOEconClaimCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , code_type_(0u)
  , time_acquired_(0u){}
struct CSOEconClaimCodeDefaultTypeInternal {
  constexpr CSOEconClaimCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconClaimCodeDefaultTypeInternal() {}
  union {
    CSOEconClaimCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconClaimCodeDefaultTypeInternal _CSOEconClaimCode_default_instance_;
constexpr CMsgUpdateItemSchema::CMsgUpdateItemSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_game_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , items_game_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_schema_version_(0u){}
struct CMsgUpdateItemSchemaDefaultTypeInternal {
  constexpr CMsgUpdateItemSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUpdateItemSchemaDefaultTypeInternal() {}
  union {
    CMsgUpdateItemSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUpdateItemSchemaDefaultTypeInternal _CMsgUpdateItemSchema_default_instance_;
constexpr CMsgGCError::CMsgGCError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCErrorDefaultTypeInternal {
  constexpr CMsgGCErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCErrorDefaultTypeInternal() {}
  union {
    CMsgGCError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCErrorDefaultTypeInternal _CMsgGCError_default_instance_;
constexpr CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRequestInventoryRefreshDefaultTypeInternal {
  constexpr CMsgRequestInventoryRefreshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestInventoryRefreshDefaultTypeInternal() {}
  union {
    CMsgRequestInventoryRefresh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestInventoryRefreshDefaultTypeInternal _CMsgRequestInventoryRefresh_default_instance_;
constexpr CMsgConVarValue::CMsgConVarValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgConVarValueDefaultTypeInternal {
  constexpr CMsgConVarValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConVarValueDefaultTypeInternal() {}
  union {
    CMsgConVarValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConVarValueDefaultTypeInternal _CMsgConVarValue_default_instance_;
constexpr CMsgReplicateConVars::CMsgReplicateConVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convars_(){}
struct CMsgReplicateConVarsDefaultTypeInternal {
  constexpr CMsgReplicateConVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReplicateConVarsDefaultTypeInternal() {}
  union {
    CMsgReplicateConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReplicateConVarsDefaultTypeInternal _CMsgReplicateConVars_default_instance_;
constexpr CMsgItemAcknowledged::CMsgItemAcknowledged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , quality_(0u)
  , rarity_(0u)
  , origin_(0u){}
struct CMsgItemAcknowledgedDefaultTypeInternal {
  constexpr CMsgItemAcknowledgedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemAcknowledgedDefaultTypeInternal() {}
  union {
    CMsgItemAcknowledged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemAcknowledgedDefaultTypeInternal _CMsgItemAcknowledged_default_instance_;
constexpr CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , position_(0u){}
struct CMsgSetItemPositions_ItemPositionDefaultTypeInternal {
  constexpr CMsgSetItemPositions_ItemPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetItemPositions_ItemPositionDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions_ItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetItemPositions_ItemPositionDefaultTypeInternal _CMsgSetItemPositions_ItemPosition_default_instance_;
constexpr CMsgSetItemPositions::CMsgSetItemPositions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_positions_(){}
struct CMsgSetItemPositionsDefaultTypeInternal {
  constexpr CMsgSetItemPositionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetItemPositionsDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetItemPositionsDefaultTypeInternal _CMsgSetItemPositions_default_instance_;
constexpr CMsgGCNameItemNotification::CMsgGCNameItemNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_custom_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_steamid_(PROTOBUF_ULONGLONG(0))
  , item_def_index_(0u){}
struct CMsgGCNameItemNotificationDefaultTypeInternal {
  constexpr CMsgGCNameItemNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNameItemNotificationDefaultTypeInternal() {}
  union {
    CMsgGCNameItemNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNameItemNotificationDefaultTypeInternal _CMsgGCNameItemNotification_default_instance_;
constexpr CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_substring_keys_()
  , body_substring_values_()
  , notification_title_localization_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_body_localization_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCClientDisplayNotificationDefaultTypeInternal {
  constexpr CMsgGCClientDisplayNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientDisplayNotificationDefaultTypeInternal() {}
  union {
    CMsgGCClientDisplayNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientDisplayNotificationDefaultTypeInternal _CMsgGCClientDisplayNotification_default_instance_;
constexpr CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCShowItemsPickedUpDefaultTypeInternal {
  constexpr CMsgGCShowItemsPickedUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCShowItemsPickedUpDefaultTypeInternal() {}
  union {
    CMsgGCShowItemsPickedUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCShowItemsPickedUpDefaultTypeInternal _CMsgGCShowItemsPickedUp_default_instance_;
constexpr CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killer_account_id_(0u)
  , num_kills_(0u)
  , item_def_(0u)
  , level_type_(0u){}
struct CMsgGCIncrementKillCountResponseDefaultTypeInternal {
  constexpr CMsgGCIncrementKillCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCIncrementKillCountResponseDefaultTypeInternal() {}
  union {
    CMsgGCIncrementKillCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCIncrementKillCountResponseDefaultTypeInternal _CMsgGCIncrementKillCountResponse_default_instance_;
constexpr CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , expiration_date_(0u)
  , bonus_(0)
  , bonus_count_(0u)
  , item_id_(PROTOBUF_ULONGLONG(0))
  , def_index_(0u)
  , seconds_left_(0u)
  , booster_type_(0u){}
struct CSOEconItemDropRateBonusDefaultTypeInternal {
  constexpr CSOEconItemDropRateBonusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDropRateBonusDefaultTypeInternal() {}
  union {
    CSOEconItemDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDropRateBonusDefaultTypeInternal _CSOEconItemDropRateBonus_default_instance_;
constexpr CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , league_id_(0u)
  , itemindex_(0u)
  , grant_reason_(0u){}
struct CSOEconItemLeagueViewPassDefaultTypeInternal {
  constexpr CSOEconItemLeagueViewPassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemLeagueViewPassDefaultTypeInternal() {}
  union {
    CSOEconItemLeagueViewPass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemLeagueViewPassDefaultTypeInternal _CSOEconItemLeagueViewPass_default_instance_;
constexpr CSOEconItemEventTicket::CSOEconItemEventTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , event_id_(0u)
  , item_id_(PROTOBUF_ULONGLONG(0)){}
struct CSOEconItemEventTicketDefaultTypeInternal {
  constexpr CSOEconItemEventTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEventTicketDefaultTypeInternal() {}
  union {
    CSOEconItemEventTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEventTicketDefaultTypeInternal _CSOEconItemEventTicket_default_instance_;
constexpr CSOEconItemTournamentPassport::CSOEconItemTournamentPassport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , league_id_(0u)
  , item_id_(PROTOBUF_ULONGLONG(0))
  , original_purchaser_id_(0u)
  , passports_bought_(0u)
  , version_(0u)
  , def_index_(0u)
  , reward_flags_(0u){}
struct CSOEconItemTournamentPassportDefaultTypeInternal {
  constexpr CSOEconItemTournamentPassportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemTournamentPassportDefaultTypeInternal() {}
  union {
    CSOEconItemTournamentPassport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemTournamentPassportDefaultTypeInternal _CSOEconItemTournamentPassport_default_instance_;
constexpr CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txn_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCStorePurchaseCancelDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseCancelDefaultTypeInternal _CMsgGCStorePurchaseCancel_default_instance_;
constexpr CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgGCStorePurchaseCancelResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseCancelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseCancelResponseDefaultTypeInternal _CMsgGCStorePurchaseCancelResponse_default_instance_;
constexpr CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txn_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCStorePurchaseFinalizeDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseFinalizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseFinalizeDefaultTypeInternal _CMsgGCStorePurchaseFinalize_default_instance_;
constexpr CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , result_(0u){}
struct CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal _CMsgGCStorePurchaseFinalizeResponse_default_instance_;
constexpr CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(0u){}
struct CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal {
  constexpr CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToGCBannedWordListUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal _CMsgGCToGCBannedWordListUpdated_default_instance_;
constexpr CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uint64_(PROTOBUF_ULONGLONG(0))
  , sdo_type_(0u){}
struct CMsgGCToGCDirtySDOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCDirtySDOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCDirtySDOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCDirtySDOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCDirtySDOCacheDefaultTypeInternal _CMsgGCToGCDirtySDOCache_default_instance_;
constexpr CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uint64_()
  , sdo_type_(0u){}
struct CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCDirtyMultipleSDOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal _CMsgGCToGCDirtyMultipleSDOCache_default_instance_;
constexpr CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_diff_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(0u){}
struct CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal {
  constexpr CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal() {}
  union {
    CMsgGCToGCApplyLocalizationDiff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal _CMsgGCToGCApplyLocalizationDiff_default_instance_;
constexpr CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal {
  constexpr CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCApplyLocalizationDiffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal _CMsgGCToGCApplyLocalizationDiffResponse_default_instance_;
constexpr CMsgGCCollectItem::CMsgGCCollectItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_item_id_(PROTOBUF_ULONGLONG(0))
  , subject_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCCollectItemDefaultTypeInternal {
  constexpr CMsgGCCollectItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCCollectItemDefaultTypeInternal() {}
  union {
    CMsgGCCollectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCCollectItemDefaultTypeInternal _CMsgGCCollectItem_default_instance_;
constexpr CMsgSDONoMemcached::CMsgSDONoMemcached(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgSDONoMemcachedDefaultTypeInternal {
  constexpr CMsgSDONoMemcachedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSDONoMemcachedDefaultTypeInternal() {}
  union {
    CMsgSDONoMemcached _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSDONoMemcachedDefaultTypeInternal _CMsgSDONoMemcached_default_instance_;
constexpr CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal {
  constexpr CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSQLKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal _CMsgGCToGCUpdateSQLKeyValue_default_instance_;
constexpr CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_version_(0u){}
struct CMsgGCServerVersionUpdatedDefaultTypeInternal {
  constexpr CMsgGCServerVersionUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCServerVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCServerVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCServerVersionUpdatedDefaultTypeInternal _CMsgGCServerVersionUpdated_default_instance_;
constexpr CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_version_(0u){}
struct CMsgGCClientVersionUpdatedDefaultTypeInternal {
  constexpr CMsgGCClientVersionUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCClientVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientVersionUpdatedDefaultTypeInternal _CMsgGCClientVersionUpdated_default_instance_;
constexpr CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal {
  constexpr CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal() {}
  union {
    CMsgGCToGCWebAPIAccountChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal _CMsgGCToGCWebAPIAccountChanged_default_instance_;
constexpr CMsgRecipeComponent::CMsgRecipeComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subject_item_id_(PROTOBUF_ULONGLONG(0))
  , attribute_index_(PROTOBUF_ULONGLONG(0)){}
struct CMsgRecipeComponentDefaultTypeInternal {
  constexpr CMsgRecipeComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRecipeComponentDefaultTypeInternal() {}
  union {
    CMsgRecipeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRecipeComponentDefaultTypeInternal _CMsgRecipeComponent_default_instance_;
constexpr CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consumption_components_()
  , tool_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgFulfillDynamicRecipeComponentDefaultTypeInternal {
  constexpr CMsgFulfillDynamicRecipeComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgFulfillDynamicRecipeComponentDefaultTypeInternal() {}
  union {
    CMsgFulfillDynamicRecipeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgFulfillDynamicRecipeComponentDefaultTypeInternal _CMsgFulfillDynamicRecipeComponent_default_instance_;
constexpr CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_currency_(0u){}
struct CMsgGCClientMarketDataRequestDefaultTypeInternal {
  constexpr CMsgGCClientMarketDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientMarketDataRequestDefaultTypeInternal() {}
  union {
    CMsgGCClientMarketDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientMarketDataRequestDefaultTypeInternal _CMsgGCClientMarketDataRequest_default_instance_;
constexpr CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u)
  , item_quality_(0u)
  , item_sell_listings_(0u)
  , price_in_local_currency_(0u){}
struct CMsgGCClientMarketDataEntryDefaultTypeInternal {
  constexpr CMsgGCClientMarketDataEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientMarketDataEntryDefaultTypeInternal() {}
  union {
    CMsgGCClientMarketDataEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientMarketDataEntryDefaultTypeInternal _CMsgGCClientMarketDataEntry_default_instance_;
constexpr CMsgGCClientMarketData::CMsgGCClientMarketData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct CMsgGCClientMarketDataDefaultTypeInternal {
  constexpr CMsgGCClientMarketDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientMarketDataDefaultTypeInternal() {}
  union {
    CMsgGCClientMarketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientMarketDataDefaultTypeInternal _CMsgGCClientMarketData_default_instance_;
constexpr CMsgExtractGems::CMsgExtractGems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tool_item_id_(PROTOBUF_ULONGLONG(0))
  , item_item_id_(PROTOBUF_ULONGLONG(0))
  , item_socket_id_(65535u){}
struct CMsgExtractGemsDefaultTypeInternal {
  constexpr CMsgExtractGemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgExtractGemsDefaultTypeInternal() {}
  union {
    CMsgExtractGems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgExtractGemsDefaultTypeInternal _CMsgExtractGems_default_instance_;
constexpr CMsgExtractGemsResponse::CMsgExtractGemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)
{}
struct CMsgExtractGemsResponseDefaultTypeInternal {
  constexpr CMsgExtractGemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgExtractGemsResponseDefaultTypeInternal() {}
  union {
    CMsgExtractGemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgExtractGemsResponseDefaultTypeInternal _CMsgExtractGemsResponse_default_instance_;
constexpr CMsgAddSocket::CMsgAddSocket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tool_item_id_(PROTOBUF_ULONGLONG(0))
  , item_item_id_(PROTOBUF_ULONGLONG(0))
  , unusual_(false){}
struct CMsgAddSocketDefaultTypeInternal {
  constexpr CMsgAddSocketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddSocketDefaultTypeInternal() {}
  union {
    CMsgAddSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddSocketDefaultTypeInternal _CMsgAddSocket_default_instance_;
constexpr CMsgAddSocketResponse::CMsgAddSocketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_socket_index_()
  , item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)
{}
struct CMsgAddSocketResponseDefaultTypeInternal {
  constexpr CMsgAddSocketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddSocketResponseDefaultTypeInternal() {}
  union {
    CMsgAddSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddSocketResponseDefaultTypeInternal _CMsgAddSocketResponse_default_instance_;
constexpr CMsgAddItemToSocketData::CMsgAddItemToSocketData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gem_item_id_(PROTOBUF_ULONGLONG(0))
  , socket_index_(0u){}
struct CMsgAddItemToSocketDataDefaultTypeInternal {
  constexpr CMsgAddItemToSocketDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketDataDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocketData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddItemToSocketDataDefaultTypeInternal _CMsgAddItemToSocketData_default_instance_;
constexpr CMsgAddItemToSocket::CMsgAddItemToSocket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gems_to_socket_()
  , item_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgAddItemToSocketDefaultTypeInternal {
  constexpr CMsgAddItemToSocketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddItemToSocketDefaultTypeInternal _CMsgAddItemToSocket_default_instance_;
constexpr CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updated_socket_index_()
  , item_item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)
{}
struct CMsgAddItemToSocketResponseDefaultTypeInternal {
  constexpr CMsgAddItemToSocketResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAddItemToSocketResponseDefaultTypeInternal() {}
  union {
    CMsgAddItemToSocketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAddItemToSocketResponseDefaultTypeInternal _CMsgAddItemToSocketResponse_default_instance_;
constexpr CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_item_id_(PROTOBUF_ULONGLONG(0))
  , socket_index_(0u){}
struct CMsgResetStrangeGemCountDefaultTypeInternal {
  constexpr CMsgResetStrangeGemCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgResetStrangeGemCountDefaultTypeInternal() {}
  union {
    CMsgResetStrangeGemCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgResetStrangeGemCountDefaultTypeInternal _CMsgResetStrangeGemCount_default_instance_;
constexpr CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0)
{}
struct CMsgResetStrangeGemCountResponseDefaultTypeInternal {
  constexpr CMsgResetStrangeGemCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgResetStrangeGemCountResponseDefaultTypeInternal() {}
  union {
    CMsgResetStrangeGemCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgResetStrangeGemCountResponseDefaultTypeInternal _CMsgResetStrangeGemCountResponse_default_instance_;
constexpr CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_version_(0u)
  , poll_id_(0u){}
struct CMsgGCToClientPollFileRequestDefaultTypeInternal {
  constexpr CMsgGCToClientPollFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPollFileRequestDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPollFileRequestDefaultTypeInternal _CMsgGCToClientPollFileRequest_default_instance_;
constexpr CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : poll_id_(0u)
  , file_size_(0u){}
struct CMsgGCToClientPollFileResponseDefaultTypeInternal {
  constexpr CMsgGCToClientPollFileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPollFileResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPollFileResponseDefaultTypeInternal _CMsgGCToClientPollFileResponse_default_instance_;
constexpr CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_id_(PROTOBUF_ULONGLONG(0))
  , group_code_(0u){}
struct CMsgGCToGCPerformManualOpDefaultTypeInternal {
  constexpr CMsgGCToGCPerformManualOpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCPerformManualOpDefaultTypeInternal() {}
  union {
    CMsgGCToGCPerformManualOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCPerformManualOpDefaultTypeInternal _CMsgGCToGCPerformManualOp_default_instance_;
constexpr CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false)
  , source_gc_(0u){}
struct CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal {
  constexpr CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal() {}
  union {
    CMsgGCToGCPerformManualOpCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal _CMsgGCToGCPerformManualOpCompleted_default_instance_;
constexpr CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal {
  constexpr CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal() {}
  union {
    CMsgGCToGCReloadServerRegionSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal _CMsgGCToGCReloadServerRegionSettings_default_instance_;
constexpr CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : welcome_messages_(){}
struct CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal {
  constexpr CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal() {}
  union {
    CMsgGCAdditionalWelcomeMsgList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCAdditionalWelcomeMsgListDefaultTypeInternal _CMsgGCAdditionalWelcomeMsgList_default_instance_;
constexpr CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_min_(0u)
  , version_max_(0u)
  , platform_(0)
{}
struct CMsgApplyRemoteConVars_ConVarDefaultTypeInternal {
  constexpr CMsgApplyRemoteConVars_ConVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyRemoteConVars_ConVarDefaultTypeInternal() {}
  union {
    CMsgApplyRemoteConVars_ConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyRemoteConVars_ConVarDefaultTypeInternal _CMsgApplyRemoteConVars_ConVar_default_instance_;
constexpr CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : con_vars_(){}
struct CMsgApplyRemoteConVarsDefaultTypeInternal {
  constexpr CMsgApplyRemoteConVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyRemoteConVarsDefaultTypeInternal _CMsgApplyRemoteConVars_default_instance_;
constexpr CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr){}
struct CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal {
  constexpr CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgGCToClientApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientApplyRemoteConVarsDefaultTypeInternal _CMsgGCToClientApplyRemoteConVars_default_instance_;
constexpr CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr){}
struct CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal {
  constexpr CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal() {}
  union {
    CMsgGCToServerApplyRemoteConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToServerApplyRemoteConVarsDefaultTypeInternal _CMsgGCToServerApplyRemoteConVars_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fgcmessages_2eproto[82];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_5fgcmessages_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, item_def_id_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, cost_in_local_currency_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, source_reference_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, country_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, language_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, line_items_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, txn_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, relay_codes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, relay_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, region_codes_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, region_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientPingData, region_ping_failed_bitmask_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, as_coach_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, ping_data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToLobby, client_version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, user_offline_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, ping_data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyInviteResponse, custom_game_timestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, steam_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameInstallStatus, latest_timestamp_from_steam_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, custom_game_install_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, lobby_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, additional_backpack_slots_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, trial_account_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, eligible_for_online_play_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, in_coaches_list_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, duel_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, made_first_purchase_),
  0,
  1,
  7,
  2,
  3,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, op_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, field_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, required_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, float_value_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, string_value_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_level_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_level_set_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_quality_set_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, initial_inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, initial_quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, ignore_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, conditions_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, recent_only_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, name_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, n_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, desc_inputs_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, desc_outputs_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_b_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_c_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_b_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_c_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, requires_all_same_class_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, requires_all_same_slot_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, class_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, slot_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, set_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, input_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, output_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, input_item_dupe_counts_),
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, strange_part_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, upgrade_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, pennant_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, essence_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, egg_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_class_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, level_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quality_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, origin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, attribute_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, interior_item_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, style_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, original_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, equipped_state_),
  1,
  2,
  3,
  4,
  10,
  11,
  9,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, sort_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, code_type_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, time_acquired_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, items_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, item_schema_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, items_game_url_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, error_text_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestInventoryRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgReplicateConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReplicateConVars, convars_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, rarity_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, origin_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, position_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, item_positions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, player_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, item_name_custom_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, notification_title_localization_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, notification_body_localization_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, body_substring_keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, body_substring_values_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, player_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, num_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, level_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, bonus_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, bonus_count_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, item_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, seconds_left_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, booster_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, league_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, itemindex_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, grant_reason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, event_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, league_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, item_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, original_purchaser_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, passports_bought_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, version_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemTournamentPassport, reward_flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, item_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, key_uint64_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, key_uint64_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiff, language_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiff, packed_diff_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiffResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCApplyLocalizationDiffResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, collection_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, subject_item_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSDONoMemcached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, key_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, server_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, client_version_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCWebAPIAccountChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRecipeComponent, subject_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecipeComponent, attribute_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgFulfillDynamicRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFulfillDynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgFulfillDynamicRecipeComponent, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgFulfillDynamicRecipeComponent, consumption_components_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataRequest, user_currency_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, item_sell_listings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketDataEntry, price_in_local_currency_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientMarketData, entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGems, item_socket_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgExtractGemsResponse, response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocket, unusual_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddSocketResponse, response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, gem_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketData, socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocket, gems_to_socket_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgAddItemToSocketResponse, response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCount, socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgResetStrangeGemCountResponse, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileRequest, poll_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, poll_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollFileResponse, file_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, op_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOp, group_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPerformManualOpCompleted, source_gc_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCReloadServerRegionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAdditionalWelcomeMsgList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAdditionalWelcomeMsgList, welcome_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, value_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, version_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, version_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars_ConVar, platform_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyRemoteConVars, con_vars_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientApplyRemoteConVars, msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerApplyRemoteConVars, msg_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::CGCStorePurchaseInit_LineItem)},
  { 15, 24, sizeof(::CMsgGCStorePurchaseInit)},
  { 28, 35, sizeof(::CMsgGCStorePurchaseInitResponse)},
  { 37, 43, sizeof(::CMsgSystemBroadcast)},
  { 44, 54, sizeof(::CMsgClientPingData)},
  { 59, 69, sizeof(::CMsgInviteToParty)},
  { 74, 81, sizeof(::CMsgInviteToLobby)},
  { 83, 91, sizeof(::CMsgInvitationCreated)},
  { 94, 103, sizeof(::CMsgPartyInviteResponse)},
  { 107, 117, sizeof(::CMsgLobbyInviteResponse)},
  { 122, 128, sizeof(::CMsgKickFromParty)},
  { 129, -1, sizeof(::CMsgLeaveParty)},
  { 134, 142, sizeof(::CMsgCustomGameInstallStatus)},
  { 145, 151, sizeof(::CMsgServerAvailable)},
  { 152, 158, sizeof(::CMsgLANServerAvailable)},
  { 159, 172, sizeof(::CSOEconGameAccountClient)},
  { 180, 190, sizeof(::CSOItemCriteriaCondition)},
  { 195, 209, sizeof(::CSOItemCriteria)},
  { 218, 242, sizeof(::CSOItemRecipe)},
  { 261, 268, sizeof(::CMsgApplyStrangePart)},
  { 270, 277, sizeof(::CMsgApplyPennantUpgrade)},
  { 279, 286, sizeof(::CMsgApplyEggEssence)},
  { 288, 296, sizeof(::CSOEconItemAttribute)},
  { 299, 306, sizeof(::CSOEconItemEquipped)},
  { 308, 327, sizeof(::CSOEconItem)},
  { 341, 347, sizeof(::CMsgSortItems)},
  { 348, 357, sizeof(::CSOEconClaimCode)},
  { 361, 369, sizeof(::CMsgUpdateItemSchema)},
  { 372, 378, sizeof(::CMsgGCError)},
  { 379, -1, sizeof(::CMsgRequestInventoryRefresh)},
  { 384, 391, sizeof(::CMsgConVarValue)},
  { 393, -1, sizeof(::CMsgReplicateConVars)},
  { 399, 410, sizeof(::CMsgItemAcknowledged)},
  { 416, 423, sizeof(::CMsgSetItemPositions_ItemPosition)},
  { 425, -1, sizeof(::CMsgSetItemPositions)},
  { 431, 439, sizeof(::CMsgGCNameItemNotification)},
  { 442, 451, sizeof(::CMsgGCClientDisplayNotification)},
  { 455, 461, sizeof(::CMsgGCShowItemsPickedUp)},
  { 462, 471, sizeof(::CMsgGCIncrementKillCountResponse)},
  { 475, 488, sizeof(::CSOEconItemDropRateBonus)},
  { 496, 505, sizeof(::CSOEconItemLeagueViewPass)},
  { 509, 517, sizeof(::CSOEconItemEventTicket)},
  { 520, 533, sizeof(::CSOEconItemTournamentPassport)},
  { 541, 547, sizeof(::CMsgGCStorePurchaseCancel)},
  { 548, 554, sizeof(::CMsgGCStorePurchaseCancelResponse)},
  { 555, 561, sizeof(::CMsgGCStorePurchaseFinalize)},
  { 562, 569, sizeof(::CMsgGCStorePurchaseFinalizeResponse)},
  { 571, 577, sizeof(::CMsgGCToGCBannedWordListUpdated)},
  { 578, 585, sizeof(::CMsgGCToGCDirtySDOCache)},
  { 587, 594, sizeof(::CMsgGCToGCDirtyMultipleSDOCache)},
  { 596, 603, sizeof(::CMsgGCToGCApplyLocalizationDiff)},
  { 605, 611, sizeof(::CMsgGCToGCApplyLocalizationDiffResponse)},
  { 612, 619, sizeof(::CMsgGCCollectItem)},
  { 621, -1, sizeof(::CMsgSDONoMemcached)},
  { 626, 632, sizeof(::CMsgGCToGCUpdateSQLKeyValue)},
  { 633, 639, sizeof(::CMsgGCServerVersionUpdated)},
  { 640, 646, sizeof(::CMsgGCClientVersionUpdated)},
  { 647, -1, sizeof(::CMsgGCToGCWebAPIAccountChanged)},
  { 652, 659, sizeof(::CMsgRecipeComponent)},
  { 661, 668, sizeof(::CMsgFulfillDynamicRecipeComponent)},
  { 670, 676, sizeof(::CMsgGCClientMarketDataRequest)},
  { 677, 686, sizeof(::CMsgGCClientMarketDataEntry)},
  { 690, -1, sizeof(::CMsgGCClientMarketData)},
  { 696, 704, sizeof(::CMsgExtractGems)},
  { 707, 714, sizeof(::CMsgExtractGemsResponse)},
  { 716, 724, sizeof(::CMsgAddSocket)},
  { 727, 735, sizeof(::CMsgAddSocketResponse)},
  { 738, 745, sizeof(::CMsgAddItemToSocketData)},
  { 747, 754, sizeof(::CMsgAddItemToSocket)},
  { 756, 764, sizeof(::CMsgAddItemToSocketResponse)},
  { 767, 774, sizeof(::CMsgResetStrangeGemCount)},
  { 776, 782, sizeof(::CMsgResetStrangeGemCountResponse)},
  { 783, 791, sizeof(::CMsgGCToClientPollFileRequest)},
  { 794, 801, sizeof(::CMsgGCToClientPollFileResponse)},
  { 803, 810, sizeof(::CMsgGCToGCPerformManualOp)},
  { 812, 819, sizeof(::CMsgGCToGCPerformManualOpCompleted)},
  { 821, -1, sizeof(::CMsgGCToGCReloadServerRegionSettings)},
  { 826, -1, sizeof(::CMsgGCAdditionalWelcomeMsgList)},
  { 832, 842, sizeof(::CMsgApplyRemoteConVars_ConVar)},
  { 847, -1, sizeof(::CMsgApplyRemoteConVars)},
  { 853, 859, sizeof(::CMsgGCToClientApplyRemoteConVars)},
  { 860, 866, sizeof(::CMsgGCToServerApplyRemoteConVars)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCStorePurchaseInit_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseInitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSystemBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientPingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInviteToParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInviteToLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInvitationCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyInviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyInviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKickFromParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaveParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCustomGameInstallStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLANServerAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconGameAccountClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemCriteriaCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemRecipe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyStrangePart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyPennantUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyEggEssence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSortItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconClaimCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUpdateItemSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestInventoryRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConVarValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReplicateConVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemAcknowledged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetItemPositions_ItemPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetItemPositions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNameItemNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientDisplayNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCShowItemsPickedUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCIncrementKillCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemDropRateBonus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemLeagueViewPass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEventTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemTournamentPassport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseCancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseFinalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseFinalizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBannedWordListUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCDirtySDOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCDirtyMultipleSDOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCApplyLocalizationDiff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCApplyLocalizationDiffResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCollectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSDONoMemcached_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUpdateSQLKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCServerVersionUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientVersionUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCWebAPIAccountChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRecipeComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgFulfillDynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientMarketDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientMarketDataEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientMarketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExtractGems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgExtractGemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddSocket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddSocketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddItemToSocketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddItemToSocket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAddItemToSocketResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgResetStrangeGemCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgResetStrangeGemCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPollFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPollFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCPerformManualOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCPerformManualOpCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCReloadServerRegionSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCAdditionalWelcomeMsgList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyRemoteConVars_ConVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyRemoteConVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientApplyRemoteConVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToServerApplyRemoteConVars_default_instance_),
};

const char descriptor_table_protodef_base_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025base_gcmessages.proto\032\023steammessages.p"
  "roto\032\026gcsdk_gcmessages.proto\"\232\001\n\035CGCStor"
  "ePurchaseInit_LineItem\022\023\n\013item_def_id\030\001 "
  "\001(\r\022\020\n\010quantity\030\002 \001(\r\022\036\n\026cost_in_local_c"
  "urrency\030\003 \001(\r\022\025\n\rpurchase_type\030\004 \001(\r\022\033\n\023"
  "source_reference_id\030\005 \001(\004\"\202\001\n\027CMsgGCStor"
  "ePurchaseInit\022\017\n\007country\030\001 \001(\t\022\020\n\010langua"
  "ge\030\002 \001(\005\022\020\n\010currency\030\003 \001(\005\0222\n\nline_items"
  "\030\004 \003(\0132\036.CGCStorePurchaseInit_LineItem\"A"
  "\n\037CMsgGCStorePurchaseInitResponse\022\016\n\006res"
  "ult\030\001 \001(\005\022\016\n\006txn_id\030\002 \001(\004\"&\n\023CMsgSystemB"
  "roadcast\022\017\n\007message\030\001 \001(\t\"\236\001\n\022CMsgClient"
  "PingData\022\027\n\013relay_codes\030\004 \003(\007B\002\020\001\022\027\n\013rel"
  "ay_pings\030\005 \003(\rB\002\020\001\022\030\n\014region_codes\030\010 \003(\r"
  "B\002\020\001\022\030\n\014region_pings\030\t \003(\rB\002\020\001\022\"\n\032region"
  "_ping_failed_bitmask\030\n \001(\r\"\210\001\n\021CMsgInvit"
  "eToParty\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016client_ver"
  "sion\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\022\020\n\010as_coach\030"
  "\004 \001(\010\022&\n\tping_data\030\005 \001(\0132\023.CMsgClientPin"
  "gData\"=\n\021CMsgInviteToLobby\022\020\n\010steam_id\030\001"
  " \001(\006\022\026\n\016client_version\030\002 \001(\r\"Q\n\025CMsgInvi"
  "tationCreated\022\020\n\010group_id\030\001 \001(\004\022\020\n\010steam"
  "_id\030\002 \001(\006\022\024\n\014user_offline\030\003 \001(\010\"{\n\027CMsgP"
  "artyInviteResponse\022\020\n\010party_id\030\001 \001(\004\022\016\n\006"
  "accept\030\002 \001(\010\022\026\n\016client_version\030\003 \001(\r\022&\n\t"
  "ping_data\030\010 \001(\0132\023.CMsgClientPingData\"\213\001\n"
  "\027CMsgLobbyInviteResponse\022\020\n\010lobby_id\030\001 \001"
  "(\006\022\016\n\006accept\030\002 \001(\010\022\026\n\016client_version\030\003 \001"
  "(\r\022\027\n\017custom_game_crc\030\006 \001(\006\022\035\n\025custom_ga"
  "me_timestamp\030\007 \001(\007\"%\n\021CMsgKickFromParty\022"
  "\020\n\010steam_id\030\001 \001(\006\"\020\n\016CMsgLeaveParty\"\242\001\n\033"
  "CMsgCustomGameInstallStatus\022M\n\006status\030\001 "
  "\001(\0162\031.ECustomGameInstallStatus:\"k_ECusto"
  "mGameInstallStatus_Unknown\022\017\n\007message\030\002 "
  "\001(\t\022#\n\033latest_timestamp_from_steam\030\003 \001(\007"
  "\"W\n\023CMsgServerAvailable\022@\n\032custom_game_i"
  "nstall_status\030\001 \001(\0132\034.CMsgCustomGameInst"
  "allStatus\"*\n\026CMsgLANServerAvailable\022\020\n\010l"
  "obby_id\030\001 \001(\006\"\252\002\n\030CSOEconGameAccountClie"
  "nt\022$\n\031additional_backpack_slots\030\001 \001(\r:\0010"
  "\022\034\n\rtrial_account\030\002 \001(\010:\005false\022&\n\030eligib"
  "le_for_online_play\030\003 \001(\010:\004true\022*\n\"need_t"
  "o_choose_most_helpful_friend\030\004 \001(\010\022\027\n\017in"
  "_coaches_list\030\005 \001(\010\022\034\n\024trade_ban_expirat"
  "ion\030\006 \001(\007\022\033\n\023duel_ban_expiration\030\007 \001(\007\022\""
  "\n\023made_first_purchase\030\t \001(\010:\005false\"r\n\030CS"
  "OItemCriteriaCondition\022\n\n\002op\030\001 \001(\005\022\r\n\005fi"
  "eld\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013float_val"
  "ue\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\"\203\002\n\017CSOIt"
  "emCriteria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014item_q"
  "uality\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001(\010\022\030\n\020"
  "item_quality_set\030\004 \001(\010\022\031\n\021initial_invent"
  "ory\030\005 \001(\r\022\030\n\020initial_quantity\030\006 \001(\r\022\033\n\023i"
  "gnore_enabled_flag\030\010 \001(\010\022-\n\nconditions\030\t"
  " \003(\0132\031.CSOItemCriteriaCondition\022\023\n\013recen"
  "t_only\030\n \001(\010\"\325\003\n\rCSOItemRecipe\022\021\n\tdef_in"
  "dex\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003n_a\030\003 \001(\t\022\023\n\013"
  "desc_inputs\030\004 \001(\t\022\024\n\014desc_outputs\030\005 \001(\t\022"
  "\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001(\t\022\014\n\004di_c\030\010 \001("
  "\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n \001(\t\022\014\n\004do_c\030\013 "
  "\001(\t\022\037\n\027requires_all_same_class\030\014 \001(\010\022\036\n\026"
  "requires_all_same_slot\030\r \001(\010\022\036\n\026class_us"
  "age_for_output\030\016 \001(\005\022\035\n\025slot_usage_for_o"
  "utput\030\017 \001(\005\022\026\n\016set_for_output\030\020 \001(\005\022.\n\024i"
  "nput_items_criteria\030\024 \003(\0132\020.CSOItemCrite"
  "ria\022/\n\025output_items_criteria\030\025 \003(\0132\020.CSO"
  "ItemCriteria\022\036\n\026input_item_dupe_counts\030\026"
  " \003(\r\"J\n\024CMsgApplyStrangePart\022\034\n\024strange_"
  "part_item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004"
  "\"K\n\027CMsgApplyPennantUpgrade\022\027\n\017upgrade_i"
  "tem_id\030\001 \001(\004\022\027\n\017pennant_item_id\030\002 \001(\004\"C\n"
  "\023CMsgApplyEggEssence\022\027\n\017essence_item_id\030"
  "\001 \001(\004\022\023\n\013egg_item_id\030\002 \001(\004\"M\n\024CSOEconIte"
  "mAttribute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002"
  " \001(\r\022\023\n\013value_bytes\030\003 \001(\014\":\n\023CSOEconItem"
  "Equipped\022\021\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030"
  "\002 \001(\r\"\332\002\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\nacc"
  "ount_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_"
  "index\030\004 \001(\r\022\023\n\010quantity\030\005 \001(\r:\0011\022\020\n\005leve"
  "l\030\006 \001(\r:\0011\022\022\n\007quality\030\007 \001(\r:\0014\022\020\n\005flags\030"
  "\010 \001(\r:\0010\022\021\n\006origin\030\t \001(\r:\0010\022(\n\tattribute"
  "\030\014 \003(\0132\025.CSOEconItemAttribute\022#\n\rinterio"
  "r_item\030\r \001(\0132\014.CSOEconItem\022\020\n\005style\030\017 \001("
  "\r:\0010\022\026\n\013original_id\030\020 \001(\004:\0010\022,\n\016equipped"
  "_state\030\022 \003(\0132\024.CSOEconItemEquipped\"\"\n\rCM"
  "sgSortItems\022\021\n\tsort_type\030\001 \001(\r\"^\n\020CSOEco"
  "nClaimCode\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tcode_t"
  "ype\030\002 \001(\r\022\025\n\rtime_acquired\030\003 \001(\r\022\014\n\004code"
  "\030\004 \001(\t\"_\n\024CMsgUpdateItemSchema\022\022\n\nitems_"
  "game\030\001 \001(\014\022\033\n\023item_schema_version\030\002 \001(\007\022"
  "\026\n\016items_game_url\030\003 \001(\t\"!\n\013CMsgGCError\022\022"
  "\n\nerror_text\030\001 \001(\t\"\035\n\033CMsgRequestInvento"
  "ryRefresh\".\n\017CMsgConVarValue\022\014\n\004name\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t\"9\n\024CMsgReplicateConVar"
  "s\022!\n\007convars\030\001 \003(\0132\020.CMsgConVarValue\"\201\001\n"
  "\024CMsgItemAcknowledged\022\022\n\naccount_id\030\001 \001("
  "\r\022\021\n\tinventory\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\022"
  "\017\n\007quality\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\016\n\006orig"
  "in\030\006 \001(\r\"\205\001\n\024CMsgSetItemPositions\022:\n\016ite"
  "m_positions\030\001 \003(\0132\".CMsgSetItemPositions"
  ".ItemPosition\0321\n\014ItemPosition\022\017\n\007item_id"
  "\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\"f\n\032CMsgGCNameIt"
  "emNotification\022\026\n\016player_steamid\030\001 \001(\006\022\026"
  "\n\016item_def_index\030\002 \001(\r\022\030\n\020item_name_cust"
  "om\030\003 \001(\t\"\266\001\n\037CMsgGCClientDisplayNotifica"
  "tion\022+\n#notification_title_localization_"
  "key\030\001 \001(\t\022*\n\"notification_body_localizat"
  "ion_key\030\002 \001(\t\022\033\n\023body_substring_keys\030\003 \003"
  "(\t\022\035\n\025body_substring_values\030\004 \003(\t\"1\n\027CMs"
  "gGCShowItemsPickedUp\022\026\n\016player_steamid\030\001"
  " \001(\006\"|\n CMsgGCIncrementKillCountResponse"
  "\022\037\n\021killer_account_id\030\001 \001(\rB\004\200\246\035\001\022\021\n\tnum"
  "_kills\030\002 \001(\r\022\020\n\010item_def\030\003 \001(\r\022\022\n\nlevel_"
  "type\030\004 \001(\r\"\315\001\n\030CSOEconItemDropRateBonus\022"
  "\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\027\n\017expiration_"
  "date\030\002 \001(\007\022\023\n\005bonus\030\003 \001(\002B\004\200\246\035\001\022\023\n\013bonus"
  "_count\030\004 \001(\r\022\017\n\007item_id\030\005 \001(\004\022\021\n\tdef_ind"
  "ex\030\006 \001(\r\022\024\n\014seconds_left\030\007 \001(\r\022\032\n\014booste"
  "r_type\030\010 \001(\rB\004\200\246\035\001\"w\n\031CSOEconItemLeagueV"
  "iewPass\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\027\n\tlea"
  "gue_id\030\002 \001(\rB\004\200\246\035\001\022\021\n\titemindex\030\004 \001(\r\022\024\n"
  "\014grant_reason\030\005 \001(\r\"O\n\026CSOEconItemEventT"
  "icket\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010event_id\030\002 "
  "\001(\r\022\017\n\007item_id\030\003 \001(\004\"\312\001\n\035CSOEconItemTour"
  "namentPassport\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tle"
  "ague_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\004\022\035\n\025origin"
  "al_purchaser_id\030\004 \001(\r\022\030\n\020passports_bough"
  "t\030\005 \001(\r\022\017\n\007version\030\006 \001(\r\022\021\n\tdef_index\030\007 "
  "\001(\r\022\024\n\014reward_flags\030\010 \001(\r\"+\n\031CMsgGCStore"
  "PurchaseCancel\022\016\n\006txn_id\030\001 \001(\004\"3\n!CMsgGC"
  "StorePurchaseCancelResponse\022\016\n\006result\030\001 "
  "\001(\r\"-\n\033CMsgGCStorePurchaseFinalize\022\016\n\006tx"
  "n_id\030\001 \001(\004\"G\n#CMsgGCStorePurchaseFinaliz"
  "eResponse\022\016\n\006result\030\001 \001(\r\022\020\n\010item_ids\030\002 "
  "\003(\004\"3\n\037CMsgGCToGCBannedWordListUpdated\022\020"
  "\n\010group_id\030\001 \001(\r\"\?\n\027CMsgGCToGCDirtySDOCa"
  "che\022\020\n\010sdo_type\030\001 \001(\r\022\022\n\nkey_uint64\030\002 \001("
  "\004\"G\n\037CMsgGCToGCDirtyMultipleSDOCache\022\020\n\010"
  "sdo_type\030\001 \001(\r\022\022\n\nkey_uint64\030\002 \003(\004\"H\n\037CM"
  "sgGCToGCApplyLocalizationDiff\022\020\n\010languag"
  "e\030\001 \001(\r\022\023\n\013packed_diff\030\002 \001(\t\":\n\'CMsgGCTo"
  "GCApplyLocalizationDiffResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\"H\n\021CMsgGCCollectItem\022\032\n\022collect"
  "ion_item_id\030\001 \001(\004\022\027\n\017subject_item_id\030\002 \001"
  "(\004\"\024\n\022CMsgSDONoMemcached\"/\n\033CMsgGCToGCUp"
  "dateSQLKeyValue\022\020\n\010key_name\030\001 \001(\t\"4\n\032CMs"
  "gGCServerVersionUpdated\022\026\n\016server_versio"
  "n\030\001 \001(\r\"4\n\032CMsgGCClientVersionUpdated\022\026\n"
  "\016client_version\030\001 \001(\r\" \n\036CMsgGCToGCWebAP"
  "IAccountChanged\"G\n\023CMsgRecipeComponent\022\027"
  "\n\017subject_item_id\030\001 \001(\004\022\027\n\017attribute_ind"
  "ex\030\002 \001(\004\"o\n!CMsgFulfillDynamicRecipeComp"
  "onent\022\024\n\014tool_item_id\030\001 \001(\004\0224\n\026consumpti"
  "on_components\030\002 \003(\0132\024.CMsgRecipeComponen"
  "t\"6\n\035CMsgGCClientMarketDataRequest\022\025\n\rus"
  "er_currency\030\001 \001(\r\"\210\001\n\033CMsgGCClientMarket"
  "DataEntry\022\026\n\016item_def_index\030\001 \001(\r\022\024\n\014ite"
  "m_quality\030\002 \001(\r\022\032\n\022item_sell_listings\030\003 "
  "\001(\r\022\037\n\027price_in_local_currency\030\004 \001(\r\"G\n\026"
  "CMsgGCClientMarketData\022-\n\007entries\030\001 \003(\0132"
  "\034.CMsgGCClientMarketDataEntry\"\\\n\017CMsgExt"
  "ractGems\022\024\n\014tool_item_id\030\001 \001(\004\022\024\n\014item_i"
  "tem_id\030\002 \001(\004\022\035\n\016item_socket_id\030\003 \001(\r:\00565"
  "535\"\324\002\n\027CMsgExtractGemsResponse\022\017\n\007item_"
  "id\030\001 \001(\004\022P\n\010response\030\002 \001(\0162%.CMsgExtract"
  "GemsResponse.EExtractGems:\027k_ExtractGems"
  "_Succeeded\"\325\001\n\014EExtractGems\022\033\n\027k_Extract"
  "Gems_Succeeded\020\000\022&\n\"k_ExtractGems_Failed"
  "_ToolIsInvalid\020\001\022&\n\"k_ExtractGems_Failed"
  "_ItemIsInvalid\020\002\022,\n(k_ExtractGems_Failed"
  "_ToolCannotRemoveGem\020\003\022*\n&k_ExtractGems_"
  "Failed_FailedToRemoveGem\020\004\"L\n\rCMsgAddSoc"
  "ket\022\024\n\014tool_item_id\030\001 \001(\004\022\024\n\014item_item_i"
  "d\030\002 \001(\004\022\017\n\007unusual\030\003 \001(\010\"\271\002\n\025CMsgAddSock"
  "etResponse\022\017\n\007item_id\030\001 \001(\004\022\034\n\024updated_s"
  "ocket_index\030\002 \003(\r\022J\n\010response\030\003 \001(\0162!.CM"
  "sgAddSocketResponse.EAddSocket:\025k_AddSoc"
  "ket_Succeeded\"\244\001\n\nEAddSocket\022\031\n\025k_AddSoc"
  "ket_Succeeded\020\000\022$\n k_AddSocket_Failed_To"
  "olIsInvalid\020\001\022+\n\'k_AddSocket_Failed_Item"
  "CannotBeSocketed\020\002\022(\n$k_AddSocket_Failed"
  "_FailedToAddSocket\020\003\"D\n\027CMsgAddItemToSoc"
  "ketData\022\023\n\013gem_item_id\030\001 \001(\004\022\024\n\014socket_i"
  "ndex\030\002 \001(\r\"]\n\023CMsgAddItemToSocket\022\024\n\014ite"
  "m_item_id\030\001 \001(\004\0220\n\016gems_to_socket\030\002 \003(\0132"
  "\030.CMsgAddItemToSocketData\"\337\003\n\033CMsgAddIte"
  "mToSocketResponse\022\024\n\014item_item_id\030\001 \001(\004\022"
  "\034\n\024updated_socket_index\030\002 \003(\r\022J\n\010respons"
  "e\030\003 \001(\0162$.CMsgAddItemToSocketResponse.EA"
  "ddGem:\022k_AddGem_Succeeded\"\277\002\n\007EAddGem\022\026\n"
  "\022k_AddGem_Succeeded\020\000\022 \n\034k_AddGem_Failed"
  "_GemIsInvalid\020\001\022!\n\035k_AddGem_Failed_ItemI"
  "sInvalid\020\002\022\"\n\036k_AddGem_Failed_FailedToAd"
  "dGem\020\003\022+\n\'k_AddGem_Failed_InvalidGemType"
  "ForSocket\020\004\022)\n%k_AddGem_Failed_InvalidGe"
  "mTypeForHero\020\005\022)\n%k_AddGem_Failed_Invali"
  "dGemTypeForSlot\020\006\0220\n,k_AddGem_Failed_Soc"
  "ketContainsUnremovableGem\020\007\"F\n\030CMsgReset"
  "StrangeGemCount\022\024\n\014item_item_id\030\001 \001(\004\022\024\n"
  "\014socket_index\030\002 \001(\r\"\276\002\n CMsgResetStrange"
  "GemCountResponse\022S\n\010response\030\001 \001(\0162+.CMs"
  "gResetStrangeGemCountResponse.EResetGem:"
  "\024k_ResetGem_Succeeded\"\304\001\n\tEResetGem\022\030\n\024k"
  "_ResetGem_Succeeded\020\000\022&\n\"k_ResetGem_Fail"
  "ed_FailedToResetGem\020\001\022#\n\037k_ResetGem_Fail"
  "ed_ItemIsInvalid\020\002\022%\n!k_ResetGem_Failed_"
  "InvalidSocketId\020\003\022)\n%k_ResetGem_Failed_S"
  "ocketCannotBeReset\020\004\"[\n\035CMsgGCToClientPo"
  "llFileRequest\022\021\n\tfile_name\030\001 \001(\t\022\026\n\016clie"
  "nt_version\030\002 \001(\r\022\017\n\007poll_id\030\003 \001(\r\"D\n\036CMs"
  "gGCToClientPollFileResponse\022\017\n\007poll_id\030\001"
  " \001(\r\022\021\n\tfile_size\030\002 \001(\r\">\n\031CMsgGCToGCPer"
  "formManualOp\022\r\n\005op_id\030\001 \001(\004\022\022\n\ngroup_cod"
  "e\030\002 \001(\r\"H\n\"CMsgGCToGCPerformManualOpComp"
  "leted\022\017\n\007success\030\001 \001(\010\022\021\n\tsource_gc\030\002 \001("
  "\r\"&\n$CMsgGCToGCReloadServerRegionSetting"
  "s\"K\n\036CMsgGCAdditionalWelcomeMsgList\022)\n\020w"
  "elcome_messages\030\001 \003(\0132\017.CExtraMsgBlock\"\322"
  "\001\n\026CMsgApplyRemoteConVars\0220\n\010con_vars\030\001 "
  "\003(\0132\036.CMsgApplyRemoteConVars.ConVar\032\205\001\n\006"
  "ConVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\023\n\013v"
  "ersion_min\030\003 \001(\r\022\023\n\013version_max\030\004 \001(\r\0224\n"
  "\010platform\030\005 \001(\0162\r.EDACPlatform:\023k_eDACPl"
  "atform_None\"H\n CMsgGCToClientApplyRemote"
  "ConVars\022$\n\003msg\030\001 \001(\0132\027.CMsgApplyRemoteCo"
  "nVars\"H\n CMsgGCToServerApplyRemoteConVar"
  "s\022$\n\003msg\030\001 \001(\0132\027.CMsgApplyRemoteConVars*"
  "\210\006\n\nEGCBaseMsg\022\032\n\025k_EMsgGCSystemMessage\020"
  "\241\037\022\035\n\030k_EMsgGCReplicateConVars\020\242\037\022\032\n\025k_E"
  "MsgGCConVarUpdated\020\243\037\022\032\n\025k_EMsgGCInviteT"
  "oParty\020\225#\022\036\n\031k_EMsgGCInvitationCreated\020\226"
  "#\022 \n\033k_EMsgGCPartyInviteResponse\020\227#\022\032\n\025k"
  "_EMsgGCKickFromParty\020\230#\022\027\n\022k_EMsgGCLeave"
  "Party\020\231#\022\034\n\027k_EMsgGCServerAvailable\020\232#\022\""
  "\n\035k_EMsgGCClientConnectToServer\020\233#\022\033\n\026k_"
  "EMsgGCGameServerInfo\020\234#\022\022\n\rk_EMsgGCError"
  "\020\235#\022\037\n\032k_EMsgGCLANServerAvailable\020\237#\022\032\n\025"
  "k_EMsgGCInviteToLobby\020\240#\022 \n\033k_EMsgGCLobb"
  "yInviteResponse\020\241#\022$\n\037k_EMsgGCToClientPo"
  "llFileRequest\020\242#\022%\n k_EMsgGCToClientPoll"
  "FileResponse\020\243#\022 \n\033k_EMsgGCToGCPerformMa"
  "nualOp\020\244#\022)\n$k_EMsgGCToGCPerformManualOp"
  "Completed\020\245#\022+\n&k_EMsgGCToGCReloadServer"
  "RegionSettings\020\246#\022%\n k_EMsgGCAdditionalW"
  "elcomeMsgList\020\247#\022\'\n\"k_EMsgGCToClientAppl"
  "yRemoteConVars\020\250#\022\'\n\"k_EMsgGCToServerApp"
  "lyRemoteConVars\020\251#*Y\n\027EGCBaseProtoObject"
  "Types\022\036\n\031k_EProtoObjectPartyInvite\020\351\007\022\036\n"
  "\031k_EProtoObjectLobbyInvite\020\352\007*\350\003\n\030ECusto"
  "mGameInstallStatus\022&\n\"k_ECustomGameInsta"
  "llStatus_Unknown\020\000\022$\n k_ECustomGameInsta"
  "llStatus_Ready\020\001\022#\n\037k_ECustomGameInstall"
  "Status_Busy\020\002\022,\n(k_ECustomGameInstallSta"
  "tus_FailedGeneric\020e\0222\n.k_ECustomGameInst"
  "allStatus_FailedInternalError\020f\0227\n3k_ECu"
  "stomGameInstallStatus_RequestedTimestamp"
  "TooOld\020g\0227\n3k_ECustomGameInstallStatus_R"
  "equestedTimestampTooNew\020h\022*\n&k_ECustomGa"
  "meInstallStatus_CRCMismatch\020i\022*\n&k_ECust"
  "omGameInstallStatus_FailedSteam\020j\022-\n)k_E"
  "CustomGameInstallStatus_FailedCanceled\020k"
  "B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fgcmessages_2eproto_deps[2] = {
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fgcmessages_2eproto = {
  false, false, 10447, descriptor_table_protodef_base_5fgcmessages_2eproto, "base_gcmessages.proto", 
  &descriptor_table_base_5fgcmessages_2eproto_once, descriptor_table_base_5fgcmessages_2eproto_deps, 2, 82,
  schemas, file_default_instances, TableStruct_base_5fgcmessages_2eproto::offsets,
  file_level_metadata_base_5fgcmessages_2eproto, file_level_enum_descriptors_base_5fgcmessages_2eproto, file_level_service_descriptors_base_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_base_5fgcmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return descriptor_table_base_5fgcmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_base_5fgcmessages_2eproto(&descriptor_table_base_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgExtractGemsResponse_EExtractGems_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[0];
}
bool CMsgExtractGemsResponse_EExtractGems_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Succeeded;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolIsInvalid;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ItemIsInvalid;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolCannotRemoveGem;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_FailedToRemoveGem;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MIN;
constexpr CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MAX;
constexpr int CMsgExtractGemsResponse::EExtractGems_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgAddSocketResponse_EAddSocket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[1];
}
bool CMsgAddSocketResponse_EAddSocket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Succeeded;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ToolIsInvalid;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ItemCannotBeSocketed;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_FailedToAddSocket;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MIN;
constexpr CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MAX;
constexpr int CMsgAddSocketResponse::EAddSocket_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgAddItemToSocketResponse_EAddGem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[2];
}
bool CMsgAddItemToSocketResponse_EAddGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Succeeded;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_GemIsInvalid;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_ItemIsInvalid;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_FailedToAddGem;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSocket;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForHero;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSlot;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_SocketContainsUnremovableGem;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MIN;
constexpr CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MAX;
constexpr int CMsgAddItemToSocketResponse::EAddGem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgResetStrangeGemCountResponse_EResetGem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[3];
}
bool CMsgResetStrangeGemCountResponse_EResetGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Succeeded;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_FailedToResetGem;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_ItemIsInvalid;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_InvalidSocketId;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_SocketCannotBeReset;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MIN;
constexpr CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MAX;
constexpr int CMsgResetStrangeGemCountResponse::EResetGem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[4];
}
bool EGCBaseMsg_IsValid(int value) {
  switch (value) {
    case 4001:
    case 4002:
    case 4003:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[5];
}
bool EGCBaseProtoObjectTypes_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECustomGameInstallStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[6];
}
bool ECustomGameInstallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CGCStorePurchaseInit_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCStorePurchaseInit_LineItem>()._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost_in_local_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCStorePurchaseInit_LineItem)
}
CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_id_, &from.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_reference_id_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
  // @@protoc_insertion_point(copy_constructor:CGCStorePurchaseInit_LineItem)
}

void CGCStorePurchaseInit_LineItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_reference_id_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  // @@protoc_insertion_point(destructor:CGCStorePurchaseInit_LineItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCStorePurchaseInit_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGCStorePurchaseInit_LineItem::ArenaDtor(void* object) {
  CGCStorePurchaseInit_LineItem* _this = reinterpret_cast< CGCStorePurchaseInit_LineItem* >(object);
  (void)_this;
}
void CGCStorePurchaseInit_LineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCStorePurchaseInit_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCStorePurchaseInit_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_reference_id_) -
        reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCStorePurchaseInit_LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cost_in_local_currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cost_in_local_currency(&has_bits);
          cost_in_local_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purchase_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_purchase_type(&has_bits);
          purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_reference_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_source_reference_id(&has_bits);
          source_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCStorePurchaseInit_LineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCStorePurchaseInit_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cost_in_local_currency(), target);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_purchase_type(), target);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_source_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCStorePurchaseInit_LineItem)
  return target;
}

size_t CGCStorePurchaseInit_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCStorePurchaseInit_LineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 cost_in_local_currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cost_in_local_currency());
    }

    // optional uint32 purchase_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purchase_type());
    }

    // optional uint64 source_reference_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_reference_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCStorePurchaseInit_LineItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCStorePurchaseInit_LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCStorePurchaseInit_LineItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCStorePurchaseInit_LineItem)
    MergeFrom(*source);
  }
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_id_ = from.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_in_local_currency_ = from.cost_in_local_currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_reference_id_ = from.source_reference_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  return true;
}

void CGCStorePurchaseInit_LineItem::InternalSwap(CGCStorePurchaseInit_LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, source_reference_id_)
      + sizeof(CGCStorePurchaseInit_LineItem::source_reference_id_)
      - PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, item_def_id_)>(
          reinterpret_cast<char*>(&item_def_id_),
          reinterpret_cast<char*>(&other->item_def_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseInit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInit>()._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  line_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInit)
}
CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInit)
}

void CMsgGCStorePurchaseInit::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&language_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_)) + sizeof(currency_));
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCStorePurchaseInit::ArenaDtor(void* object) {
  CMsgGCStorePurchaseInit* _this = reinterpret_cast< CMsgGCStorePurchaseInit* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCStorePurchaseInit.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCStorePurchaseInit.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_currency(), target);
  }

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_line_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInit)
  return target;
}

size_t CMsgGCStorePurchaseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  total_size += 1UL * this->_internal_line_items_size();
  for (const auto& msg : this->line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_language());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_currency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseInit)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInit::MergeFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInit::InternalSwap(CMsgGCStorePurchaseInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_items_.InternalSwap(&other->line_items_);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, currency_)
      + sizeof(CMsgGCStorePurchaseInit::currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, language_)>(
          reinterpret_cast<char*>(&language_),
          reinterpret_cast<char*>(&other->language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseInitResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInitResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInitResponse)
}
CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInitResponse)
}

void CMsgGCStorePurchaseInitResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&txn_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseInitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCStorePurchaseInitResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseInitResponse* _this = reinterpret_cast< CMsgGCStorePurchaseInitResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseInitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 txn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseInitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInitResponse)
  return target;
}

size_t CMsgGCStorePurchaseInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 txn_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_txn_id());
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseInitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseInitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseInitResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInitResponse::InternalSwap(CMsgGCStorePurchaseInitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, result_)
      + sizeof(CMsgGCStorePurchaseInitResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, txn_id_)>(
          reinterpret_cast<char*>(&txn_id_),
          reinterpret_cast<char*>(&other->txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSystemBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSystemBroadcast>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSystemBroadcast::CMsgSystemBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSystemBroadcast)
}
CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSystemBroadcast)
}

void CMsgSystemBroadcast::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgSystemBroadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSystemBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSystemBroadcast::ArenaDtor(void* object) {
  CMsgSystemBroadcast* _this = reinterpret_cast< CMsgSystemBroadcast* >(object);
  (void)_this;
}
void CMsgSystemBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSystemBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSystemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSystemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSystemBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSystemBroadcast.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSystemBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSystemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSystemBroadcast.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSystemBroadcast)
  return target;
}

size_t CMsgSystemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSystemBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSystemBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSystemBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSystemBroadcast)
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CMsgSystemBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  return true;
}

void CMsgSystemBroadcast::InternalSwap(CMsgSystemBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSystemBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientPingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientPingData>()._has_bits_);
  static void set_has_region_ping_failed_bitmask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientPingData::CMsgClientPingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relay_codes_(arena),
  relay_pings_(arena),
  region_codes_(arena),
  region_pings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientPingData)
}
CMsgClientPingData::CMsgClientPingData(const CMsgClientPingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      relay_codes_(from.relay_codes_),
      relay_pings_(from.relay_pings_),
      region_codes_(from.region_codes_),
      region_pings_(from.region_pings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientPingData)
}

void CMsgClientPingData::SharedCtor() {
region_ping_failed_bitmask_ = 0u;
}

CMsgClientPingData::~CMsgClientPingData() {
  // @@protoc_insertion_point(destructor:CMsgClientPingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientPingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientPingData::ArenaDtor(void* object) {
  CMsgClientPingData* _this = reinterpret_cast< CMsgClientPingData* >(object);
  (void)_this;
}
void CMsgClientPingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientPingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientPingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientPingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_codes_.Clear();
  relay_pings_.Clear();
  region_codes_.Clear();
  region_pings_.Clear();
  region_ping_failed_bitmask_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientPingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 relay_codes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_relay_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_relay_codes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 relay_pings = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_relay_pings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_relay_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 region_codes = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_region_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 region_pings = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_pings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_region_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_ping_failed_bitmask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_region_ping_failed_bitmask(&has_bits);
          region_ping_failed_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientPingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientPingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->_internal_relay_codes_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_relay_codes(), target);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    int byte_size = _relay_pings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_relay_pings(), byte_size, target);
    }
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    int byte_size = _region_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_region_codes(), byte_size, target);
    }
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    int byte_size = _region_pings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_region_pings(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_region_ping_failed_bitmask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientPingData)
  return target;
}

size_t CMsgClientPingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientPingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_relay_codes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relay_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->relay_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relay_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->region_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _region_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->region_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _region_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 region_ping_failed_bitmask = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region_ping_failed_bitmask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientPingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientPingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientPingData)
    MergeFrom(*source);
  }
}

void CMsgClientPingData::MergeFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_codes_.MergeFrom(from.relay_codes_);
  relay_pings_.MergeFrom(from.relay_pings_);
  region_codes_.MergeFrom(from.region_codes_);
  region_pings_.MergeFrom(from.region_pings_);
  if (from._internal_has_region_ping_failed_bitmask()) {
    _internal_set_region_ping_failed_bitmask(from._internal_region_ping_failed_bitmask());
  }
}

void CMsgClientPingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPingData::CopyFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPingData::IsInitialized() const {
  return true;
}

void CMsgClientPingData::InternalSwap(CMsgClientPingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_codes_.InternalSwap(&other->relay_codes_);
  relay_pings_.InternalSwap(&other->relay_pings_);
  region_codes_.InternalSwap(&other->region_codes_);
  region_pings_.InternalSwap(&other->region_pings_);
  swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientPingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInviteToParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInviteToParty>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_as_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgInviteToParty* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPingData&
CMsgInviteToParty::_Internal::ping_data(const CMsgInviteToParty* msg) {
  return *msg->ping_data_;
}
CMsgInviteToParty::CMsgInviteToParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInviteToParty)
}
CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&as_coach_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(as_coach_));
  // @@protoc_insertion_point(copy_constructor:CMsgInviteToParty)
}

void CMsgInviteToParty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&as_coach_) -
    reinterpret_cast<char*>(&ping_data_)) + sizeof(as_coach_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  // @@protoc_insertion_point(destructor:CMsgInviteToParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInviteToParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgInviteToParty::ArenaDtor(void* object) {
  CMsgInviteToParty* _this = reinterpret_cast< CMsgInviteToParty* >(object);
  (void)_this;
}
void CMsgInviteToParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInviteToParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInviteToParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInviteToParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ping_data_ != nullptr);
    ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&as_coach_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(as_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInviteToParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool as_coach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_as_coach(&has_bits);
          as_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInviteToParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInviteToParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_as_coach(), target);
  }

  // optional .CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ping_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInviteToParty)
  return target;
}

size_t CMsgInviteToParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInviteToParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgClientPingData ping_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional bool as_coach = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInviteToParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInviteToParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInviteToParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInviteToParty)
    MergeFrom(*source);
  }
}

void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_coach_ = from.as_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  return true;
}

void CMsgInviteToParty::InternalSwap(CMsgInviteToParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, as_coach_)
      + sizeof(CMsgInviteToParty::as_coach_)
      - PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, ping_data_)>(
          reinterpret_cast<char*>(&ping_data_),
          reinterpret_cast<char*>(&other->ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInviteToParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInviteToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInviteToLobby>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgInviteToLobby::CMsgInviteToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInviteToLobby)
}
CMsgInviteToLobby::CMsgInviteToLobby(const CMsgInviteToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgInviteToLobby)
}

void CMsgInviteToLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
}

CMsgInviteToLobby::~CMsgInviteToLobby() {
  // @@protoc_insertion_point(destructor:CMsgInviteToLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInviteToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgInviteToLobby::ArenaDtor(void* object) {
  CMsgInviteToLobby* _this = reinterpret_cast< CMsgInviteToLobby* >(object);
  (void)_this;
}
void CMsgInviteToLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInviteToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInviteToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInviteToLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInviteToLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInviteToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInviteToLobby)
  return target;
}

size_t CMsgInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInviteToLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInviteToLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInviteToLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInviteToLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgInviteToLobby::MergeFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToLobby::CopyFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgInviteToLobby::InternalSwap(CMsgInviteToLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInviteToLobby, client_version_)
      + sizeof(CMsgInviteToLobby::client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgInviteToLobby, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInviteToLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInvitationCreated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInvitationCreated>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgInvitationCreated::CMsgInvitationCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInvitationCreated)
}
CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_offline_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
  // @@protoc_insertion_point(copy_constructor:CMsgInvitationCreated)
}

void CMsgInvitationCreated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_offline_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  // @@protoc_insertion_point(destructor:CMsgInvitationCreated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInvitationCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgInvitationCreated::ArenaDtor(void* object) {
  CMsgInvitationCreated* _this = reinterpret_cast< CMsgInvitationCreated* >(object);
  (void)_this;
}
void CMsgInvitationCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInvitationCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInvitationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInvitationCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_offline_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInvitationCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool user_offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_offline(&has_bits);
          user_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInvitationCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInvitationCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_user_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInvitationCreated)
  return target;
}

size_t CMsgInvitationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInvitationCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_group_id());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool user_offline = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInvitationCreated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInvitationCreated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInvitationCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInvitationCreated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInvitationCreated)
    MergeFrom(*source);
  }
}

void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_offline_ = from.user_offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInvitationCreated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  return true;
}

void CMsgInvitationCreated::InternalSwap(CMsgInvitationCreated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, user_offline_)
      + sizeof(CMsgInvitationCreated::user_offline_)
      - PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInvitationCreated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyInviteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyInviteResponse>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgPartyInviteResponse* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientPingData&
CMsgPartyInviteResponse::_Internal::ping_data(const CMsgPartyInviteResponse* msg) {
  return *msg->ping_data_;
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyInviteResponse)
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyInviteResponse)
}

void CMsgPartyInviteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&ping_data_)) + sizeof(client_version_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyInviteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgPartyInviteResponse::ArenaDtor(void* object) {
  CMsgPartyInviteResponse* _this = reinterpret_cast< CMsgPartyInviteResponse* >(object);
  (void)_this;
}
void CMsgPartyInviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ping_data_ != nullptr);
    ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyInviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyInviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional .CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ping_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyInviteResponse)
  return target;
}

size_t CMsgPartyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyInviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgClientPingData ping_data = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyInviteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyInviteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyInviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyInviteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyInviteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgPartyInviteResponse::InternalSwap(CMsgPartyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, client_version_)
      + sizeof(CMsgPartyInviteResponse::client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, ping_data_)>(
          reinterpret_cast<char*>(&ping_data_),
          reinterpret_cast<char*>(&other->ping_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyInviteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyInviteResponse>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyInviteResponse)
}
CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(const CMsgLobbyInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyInviteResponse)
}

void CMsgLobbyInviteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
}

CMsgLobbyInviteResponse::~CMsgLobbyInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgLobbyInviteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyInviteResponse::ArenaDtor(void* object) {
  CMsgLobbyInviteResponse* _this = reinterpret_cast< CMsgLobbyInviteResponse* >(object);
  (void)_this;
}
void CMsgLobbyInviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_timestamp_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyInviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyInviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyInviteResponse)
  return target;
}

size_t CMsgLobbyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyInviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional fixed64 custom_game_crc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyInviteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyInviteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyInviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyInviteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyInviteResponse::MergeFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyInviteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyInviteResponse::CopyFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyInviteResponse::InternalSwap(CMsgLobbyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyInviteResponse, custom_game_timestamp_)
      + sizeof(CMsgLobbyInviteResponse::custom_game_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyInviteResponse, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyInviteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgKickFromParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKickFromParty>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgKickFromParty::CMsgKickFromParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKickFromParty)
}
CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgKickFromParty)
}

void CMsgKickFromParty::SharedCtor() {
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgKickFromParty::~CMsgKickFromParty() {
  // @@protoc_insertion_point(destructor:CMsgKickFromParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgKickFromParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgKickFromParty::ArenaDtor(void* object) {
  CMsgKickFromParty* _this = reinterpret_cast< CMsgKickFromParty* >(object);
  (void)_this;
}
void CMsgKickFromParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKickFromParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKickFromParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKickFromParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKickFromParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKickFromParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKickFromParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKickFromParty)
  return target;
}

size_t CMsgKickFromParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKickFromParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKickFromParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKickFromParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgKickFromParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgKickFromParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgKickFromParty)
    MergeFrom(*source);
  }
}

void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
}

void CMsgKickFromParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  return true;
}

void CMsgKickFromParty::InternalSwap(CMsgKickFromParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKickFromParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeaveParty::_Internal {
 public:
};

CMsgLeaveParty::CMsgLeaveParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaveParty)
}
CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaveParty)
}

void CMsgLeaveParty::SharedCtor() {
}

CMsgLeaveParty::~CMsgLeaveParty() {
  // @@protoc_insertion_point(destructor:CMsgLeaveParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeaveParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeaveParty::ArenaDtor(void* object) {
  CMsgLeaveParty* _this = reinterpret_cast< CMsgLeaveParty* >(object);
  (void)_this;
}
void CMsgLeaveParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeaveParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeaveParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaveParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaveParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeaveParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaveParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaveParty)
  return target;
}

size_t CMsgLeaveParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaveParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaveParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaveParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeaveParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaveParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaveParty)
    MergeFrom(*source);
  }
}

void CMsgLeaveParty::MergeFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgLeaveParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveParty::CopyFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveParty::IsInitialized() const {
  return true;
}

void CMsgLeaveParty::InternalSwap(CMsgLeaveParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaveParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCustomGameInstallStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCustomGameInstallStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latest_timestamp_from_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameInstallStatus)
}
CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(const CMsgCustomGameInstallStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameInstallStatus)
}

void CMsgCustomGameInstallStatus::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
}

CMsgCustomGameInstallStatus::~CMsgCustomGameInstallStatus() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameInstallStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCustomGameInstallStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameInstallStatus::ArenaDtor(void* object) {
  CMsgCustomGameInstallStatus* _this = reinterpret_cast< CMsgCustomGameInstallStatus* >(object);
  (void)_this;
}
void CMsgCustomGameInstallStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCustomGameInstallStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCustomGameInstallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameInstallStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
        reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameInstallStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECustomGameInstallStatus_IsValid(val))) {
            _internal_set_status(static_cast<::ECustomGameInstallStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCustomGameInstallStatus.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 latest_timestamp_from_steam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_latest_timestamp_from_steam(&has_bits);
          latest_timestamp_from_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCustomGameInstallStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameInstallStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCustomGameInstallStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_latest_timestamp_from_steam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameInstallStatus)
  return target;
}

size_t CMsgCustomGameInstallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameInstallStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional fixed32 latest_timestamp_from_steam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameInstallStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameInstallStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCustomGameInstallStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCustomGameInstallStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCustomGameInstallStatus)
    MergeFrom(*source);
  }
}

void CMsgCustomGameInstallStatus::MergeFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      latest_timestamp_from_steam_ = from.latest_timestamp_from_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameInstallStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameInstallStatus::CopyFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameInstallStatus::IsInitialized() const {
  return true;
}

void CMsgCustomGameInstallStatus::InternalSwap(CMsgCustomGameInstallStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCustomGameInstallStatus, latest_timestamp_from_steam_)
      + sizeof(CMsgCustomGameInstallStatus::latest_timestamp_from_steam_)
      - PROTOBUF_FIELD_OFFSET(CMsgCustomGameInstallStatus, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameInstallStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerAvailable>()._has_bits_);
  static const ::CMsgCustomGameInstallStatus& custom_game_install_status(const CMsgServerAvailable* msg);
  static void set_has_custom_game_install_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCustomGameInstallStatus&
CMsgServerAvailable::_Internal::custom_game_install_status(const CMsgServerAvailable* msg) {
  return *msg->custom_game_install_status_;
}
CMsgServerAvailable::CMsgServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerAvailable)
}
CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_game_install_status()) {
    custom_game_install_status_ = new ::CMsgCustomGameInstallStatus(*from.custom_game_install_status_);
  } else {
    custom_game_install_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerAvailable)
}

void CMsgServerAvailable::SharedCtor() {
custom_game_install_status_ = nullptr;
}

CMsgServerAvailable::~CMsgServerAvailable() {
  // @@protoc_insertion_point(destructor:CMsgServerAvailable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete custom_game_install_status_;
}

void CMsgServerAvailable::ArenaDtor(void* object) {
  CMsgServerAvailable* _this = reinterpret_cast< CMsgServerAvailable* >(object);
  (void)_this;
}
void CMsgServerAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(custom_game_install_status_ != nullptr);
    custom_game_install_status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_install_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerAvailable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::custom_game_install_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerAvailable)
  return target;
}

size_t CMsgServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerAvailable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCustomGameInstallStatus custom_game_install_status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_game_install_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerAvailable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerAvailable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerAvailable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgServerAvailable::MergeFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_custom_game_install_status()) {
    _internal_mutable_custom_game_install_status()->::CMsgCustomGameInstallStatus::MergeFrom(from._internal_custom_game_install_status());
  }
}

void CMsgServerAvailable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  return true;
}

void CMsgServerAvailable::InternalSwap(CMsgServerAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(custom_game_install_status_, other->custom_game_install_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerAvailable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLANServerAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLANServerAvailable>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLANServerAvailable::CMsgLANServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLANServerAvailable)
}
CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLANServerAvailable)
}

void CMsgLANServerAvailable::SharedCtor() {
lobby_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  // @@protoc_insertion_point(destructor:CMsgLANServerAvailable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLANServerAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLANServerAvailable::ArenaDtor(void* object) {
  CMsgLANServerAvailable* _this = reinterpret_cast< CMsgLANServerAvailable* >(object);
  (void)_this;
}
void CMsgLANServerAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLANServerAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLANServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLANServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLANServerAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLANServerAvailable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLANServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLANServerAvailable)
  return target;
}

size_t CMsgLANServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLANServerAvailable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLANServerAvailable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLANServerAvailable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLANServerAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLANServerAvailable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLANServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgLANServerAvailable::MergeFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lobby_id()) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
}

void CMsgLANServerAvailable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  return true;
}

void CMsgLANServerAvailable::InternalSwap(CMsgLANServerAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLANServerAvailable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconGameAccountClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconGameAccountClient>()._has_bits_);
  static void set_has_additional_backpack_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trial_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eligible_for_online_play(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_need_to_choose_most_helpful_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_coaches_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trade_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duel_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_made_first_purchase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CSOEconGameAccountClient::CSOEconGameAccountClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconGameAccountClient)
}
CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&additional_backpack_slots_, &from.additional_backpack_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&eligible_for_online_play_) -
    reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(eligible_for_online_play_));
  // @@protoc_insertion_point(copy_constructor:CSOEconGameAccountClient)
}

void CSOEconGameAccountClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&additional_backpack_slots_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duel_ban_expiration_) -
    reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(duel_ban_expiration_));
eligible_for_online_play_ = true;
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSOEconGameAccountClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconGameAccountClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconGameAccountClient::ArenaDtor(void* object) {
  CSOEconGameAccountClient* _this = reinterpret_cast< CSOEconGameAccountClient* >(object);
  (void)_this;
}
void CSOEconGameAccountClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconGameAccountClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&additional_backpack_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duel_ban_expiration_) -
        reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(duel_ban_expiration_));
    eligible_for_online_play_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconGameAccountClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_additional_backpack_slots(&has_bits);
          additional_backpack_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trial_account = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trial_account(&has_bits);
          trial_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool eligible_for_online_play = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_eligible_for_online_play(&has_bits);
          eligible_for_online_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_need_to_choose_most_helpful_friend(&has_bits);
          need_to_choose_most_helpful_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_coaches_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_coaches_list(&has_bits);
          in_coaches_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 trade_ban_expiration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_trade_ban_expiration(&has_bits);
          trade_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 duel_ban_expiration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_duel_ban_expiration(&has_bits);
          duel_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool made_first_purchase = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_made_first_purchase(&has_bits);
          made_first_purchase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconGameAccountClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_additional_backpack_slots(), target);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trial_account(), target);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_eligible_for_online_play(), target);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_need_to_choose_most_helpful_friend(), target);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_in_coaches_list(), target);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_trade_ban_expiration(), target);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_duel_ban_expiration(), target);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_made_first_purchase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconGameAccountClient)
  return target;
}

size_t CSOEconGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconGameAccountClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_additional_backpack_slots());
    }

    // optional bool trial_account = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool need_to_choose_most_helpful_friend = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool in_coaches_list = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool made_first_purchase = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 trade_ban_expiration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 duel_ban_expiration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool eligible_for_online_play = 3 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconGameAccountClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconGameAccountClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconGameAccountClient)
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      additional_backpack_slots_ = from.additional_backpack_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      trial_account_ = from.trial_account_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_to_choose_most_helpful_friend_ = from.need_to_choose_most_helpful_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_coaches_list_ = from.in_coaches_list_;
    }
    if (cached_has_bits & 0x00000010u) {
      made_first_purchase_ = from.made_first_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00000040u) {
      duel_ban_expiration_ = from.duel_ban_expiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      eligible_for_online_play_ = from.eligible_for_online_play_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconGameAccountClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  return true;
}

void CSOEconGameAccountClient::InternalSwap(CSOEconGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, duel_ban_expiration_)
      + sizeof(CSOEconGameAccountClient::duel_ban_expiration_)
      - PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, additional_backpack_slots_)>(
          reinterpret_cast<char*>(&additional_backpack_slots_),
          reinterpret_cast<char*>(&other->additional_backpack_slots_));
  swap(eligible_for_online_play_, other->eligible_for_online_play_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconGameAccountClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOItemCriteriaCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemCriteriaCondition>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOItemCriteriaCondition::CSOItemCriteriaCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOItemCriteriaCondition)
}
CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArena());
  }
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:CSOItemCriteriaCondition)
}

void CSOItemCriteriaCondition::SharedCtor() {
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  // @@protoc_insertion_point(destructor:CSOItemCriteriaCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOItemCriteriaCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOItemCriteriaCondition::ArenaDtor(void* object) {
  CSOItemCriteriaCondition* _this = reinterpret_cast< CSOItemCriteriaCondition* >(object);
  (void)_this;
}
void CSOItemCriteriaCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemCriteriaCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemCriteriaCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&op_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_value_) -
        reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemCriteriaCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_op(&has_bits);
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemCriteriaCondition.field");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required(&has_bits);
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float float_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemCriteriaCondition.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemCriteriaCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemCriteriaCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemCriteriaCondition.field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field(), target);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_required(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_float_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemCriteriaCondition.string_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemCriteriaCondition)
  return target;
}

size_t CSOItemCriteriaCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemCriteriaCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string field = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field());
    }

    // optional string string_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional int32 op = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_op());
    }

    // optional bool required = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float float_value = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOItemCriteriaCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOItemCriteriaCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOItemCriteriaCondition)
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field(from._internal_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00000008u) {
      required_ = from.required_;
    }
    if (cached_has_bits & 0x00000010u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteriaCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  return true;
}

void CSOItemCriteriaCondition::InternalSwap(CSOItemCriteriaCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_.Swap(&other->field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_)
      + sizeof(CSOItemCriteriaCondition::float_value_)
      - PROTOBUF_FIELD_OFFSET(CSOItemCriteriaCondition, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOItemCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemCriteria>()._has_bits_);
  static void set_has_item_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_level_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_quality_set(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initial_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_enabled_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_recent_only(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSOItemCriteria::CSOItemCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOItemCriteria)
}
CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_level_, &from.item_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
  // @@protoc_insertion_point(copy_constructor:CSOItemCriteria)
}

void CSOItemCriteria::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
}

CSOItemCriteria::~CSOItemCriteria() {
  // @@protoc_insertion_point(destructor:CSOItemCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOItemCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOItemCriteria::ArenaDtor(void* object) {
  CSOItemCriteria* _this = reinterpret_cast< CSOItemCriteria* >(object);
  (void)_this;
}
void CSOItemCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&item_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_only_) -
        reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_level(&has_bits);
          item_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool item_level_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_level_set(&has_bits);
          item_level_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool item_quality_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_quality_set(&has_bits);
          item_quality_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_inventory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_inventory(&has_bits);
          initial_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_initial_quantity(&has_bits);
          initial_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_enabled_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ignore_enabled_flag(&has_bits);
          ignore_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOItemCriteriaCondition conditions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool recent_only = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_recent_only(&has_bits);
          recent_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_level(), target);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_item_level_set(), target);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_item_quality_set(), target);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_initial_inventory(), target);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_initial_quantity(), target);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ignore_enabled_flag(), target);
  }

  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_conditions(i), target, stream);
  }

  // optional bool recent_only = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_recent_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemCriteria)
  return target;
}

size_t CSOItemCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOItemCriteriaCondition conditions = 9;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 item_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_level());
    }

    // optional int32 item_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_quality());
    }

    // optional uint32 initial_inventory = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_inventory());
    }

    // optional uint32 initial_quantity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_quantity());
    }

    // optional bool item_level_set = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool item_quality_set = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_enabled_flag = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool recent_only = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOItemCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOItemCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOItemCriteria)
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_inventory_ = from.initial_inventory_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_quantity_ = from.initial_quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_level_set_ = from.item_level_set_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_quality_set_ = from.item_quality_set_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_enabled_flag_ = from.ignore_enabled_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      recent_only_ = from.recent_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  return true;
}

void CSOItemCriteria::InternalSwap(CSOItemCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conditions_.InternalSwap(&other->conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemCriteria, recent_only_)
      + sizeof(CSOItemCriteria::recent_only_)
      - PROTOBUF_FIELD_OFFSET(CSOItemCriteria, item_level_)>(
          reinterpret_cast<char*>(&item_level_),
          reinterpret_cast<char*>(&other->item_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemCriteria::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOItemRecipe::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemRecipe>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_n_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desc_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_di_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_di_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_di_c(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_do_a(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_do_b(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_do_c(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_requires_all_same_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_requires_all_same_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_class_usage_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_slot_usage_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_set_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CSOItemRecipe::CSOItemRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_items_criteria_(arena),
  output_items_criteria_(arena),
  input_item_dupe_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOItemRecipe)
}
CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_items_criteria_(from.input_items_criteria_),
      output_items_criteria_(from.output_items_criteria_),
      input_item_dupe_counts_(from.input_item_dupe_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  n_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_n_a()) {
    n_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_n_a(), 
      GetArena());
  }
  desc_inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc_inputs()) {
    desc_inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc_inputs(), 
      GetArena());
  }
  desc_outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc_outputs()) {
    desc_outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc_outputs(), 
      GetArena());
  }
  di_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_a()) {
    di_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_a(), 
      GetArena());
  }
  di_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_b()) {
    di_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_b(), 
      GetArena());
  }
  di_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_c()) {
    di_c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_c(), 
      GetArena());
  }
  do_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_a()) {
    do_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_a(), 
      GetArena());
  }
  do_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_b()) {
    do_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_b(), 
      GetArena());
  }
  do_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_c()) {
    do_c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_c(), 
      GetArena());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  // @@protoc_insertion_point(copy_constructor:CSOItemRecipe)
}

void CSOItemRecipe::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
n_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
}

CSOItemRecipe::~CSOItemRecipe() {
  // @@protoc_insertion_point(destructor:CSOItemRecipe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOItemRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOItemRecipe::ArenaDtor(void* object) {
  CSOItemRecipe* _this = reinterpret_cast< CSOItemRecipe* >(object);
  (void)_this;
}
void CSOItemRecipe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      n_a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_inputs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      desc_outputs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      di_a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      di_b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      di_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      do_a_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      do_b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      do_c_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_for_output_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemRecipe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string n_a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_n_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.n_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc_inputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.desc_inputs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc_outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_desc_outputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.desc_outputs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string di_a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_di_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string di_b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_di_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string di_c = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_di_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string do_a = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_do_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string do_b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_do_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string do_c = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_do_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_all_same_class = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_requires_all_same_class(&has_bits);
          requires_all_same_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_all_same_slot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_requires_all_same_slot(&has_bits);
          requires_all_same_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 class_usage_for_output = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_class_usage_for_output(&has_bits);
          class_usage_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot_usage_for_output = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_slot_usage_for_output(&has_bits);
          slot_usage_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 set_for_output = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_set_for_output(&has_bits);
          set_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOItemCriteria input_items_criteria = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_input_items_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CSOItemCriteria output_items_criteria = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_output_items_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 input_item_dupe_counts = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_input_item_dupe_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_input_item_dupe_counts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemRecipe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_n_a().data(), static_cast<int>(this->_internal_n_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.n_a");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_n_a(), target);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc_inputs().data(), static_cast<int>(this->_internal_desc_inputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.desc_inputs");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc_inputs(), target);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc_outputs().data(), static_cast<int>(this->_internal_desc_outputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.desc_outputs");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc_outputs(), target);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_a().data(), static_cast<int>(this->_internal_di_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_a");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_di_a(), target);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_b().data(), static_cast<int>(this->_internal_di_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_b");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_di_b(), target);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_c().data(), static_cast<int>(this->_internal_di_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_c");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_di_c(), target);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_a().data(), static_cast<int>(this->_internal_do_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_a");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_do_a(), target);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_b().data(), static_cast<int>(this->_internal_do_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_b");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_do_b(), target);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_c().data(), static_cast<int>(this->_internal_do_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_c");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_do_c(), target);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_requires_all_same_class(), target);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_requires_all_same_slot(), target);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_class_usage_for_output(), target);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_slot_usage_for_output(), target);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_set_for_output(), target);
  }

  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_items_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_input_items_criteria(i), target, stream);
  }

  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_items_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_output_items_criteria(i), target, stream);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0, n = this->_internal_input_item_dupe_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_input_item_dupe_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemRecipe)
  return target;
}

size_t CSOItemRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemRecipe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOItemCriteria input_items_criteria = 20;
  total_size += 2UL * this->_internal_input_items_criteria_size();
  for (const auto& msg : this->input_items_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOItemCriteria output_items_criteria = 21;
  total_size += 2UL * this->_internal_output_items_criteria_size();
  for (const auto& msg : this->output_items_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->input_item_dupe_counts_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_item_dupe_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string n_a = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_n_a());
    }

    // optional string desc_inputs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc_inputs());
    }

    // optional string desc_outputs = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc_outputs());
    }

    // optional string di_a = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_a());
    }

    // optional string di_b = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_b());
    }

    // optional string di_c = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_c());
    }

    // optional string do_a = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_a());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string do_b = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_b());
    }

    // optional string do_c = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_c());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional bool requires_all_same_class = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool requires_all_same_slot = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 class_usage_for_output = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_class_usage_for_output());
    }

    // optional int32 slot_usage_for_output = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot_usage_for_output());
    }

    // optional int32 set_for_output = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_set_for_output());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemRecipe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOItemRecipe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOItemRecipe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOItemRecipe)
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_n_a(from._internal_n_a());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc_inputs(from._internal_desc_inputs());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_desc_outputs(from._internal_desc_outputs());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_di_a(from._internal_di_a());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_di_b(from._internal_di_b());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_di_c(from._internal_di_c());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_do_a(from._internal_do_a());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_do_b(from._internal_do_b());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_do_c(from._internal_do_c());
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      requires_all_same_class_ = from.requires_all_same_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      requires_all_same_slot_ = from.requires_all_same_slot_;
    }
    if (cached_has_bits & 0x00002000u) {
      class_usage_for_output_ = from.class_usage_for_output_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_usage_for_output_ = from.slot_usage_for_output_;
    }
    if (cached_has_bits & 0x00008000u) {
      set_for_output_ = from.set_for_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemRecipe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  return true;
}

void CSOItemRecipe::InternalSwap(CSOItemRecipe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_items_criteria_.InternalSwap(&other->input_items_criteria_);
  output_items_criteria_.InternalSwap(&other->output_items_criteria_);
  input_item_dupe_counts_.InternalSwap(&other->input_item_dupe_counts_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  n_a_.Swap(&other->n_a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_inputs_.Swap(&other->desc_inputs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_outputs_.Swap(&other->desc_outputs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  di_a_.Swap(&other->di_a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  di_b_.Swap(&other->di_b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  di_c_.Swap(&other->di_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  do_a_.Swap(&other->do_a_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  do_b_.Swap(&other->do_b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  do_c_.Swap(&other->do_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemRecipe, set_for_output_)
      + sizeof(CSOItemRecipe::set_for_output_)
      - PROTOBUF_FIELD_OFFSET(CSOItemRecipe, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemRecipe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyStrangePart::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyStrangePart>()._has_bits_);
  static void set_has_strange_part_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyStrangePart::CMsgApplyStrangePart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyStrangePart)
}
CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&strange_part_item_id_, &from.strange_part_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyStrangePart)
}

void CMsgApplyStrangePart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strange_part_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  // @@protoc_insertion_point(destructor:CMsgApplyStrangePart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyStrangePart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyStrangePart::ArenaDtor(void* object) {
  CMsgApplyStrangePart* _this = reinterpret_cast< CMsgApplyStrangePart* >(object);
  (void)_this;
}
void CMsgApplyStrangePart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyStrangePart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyStrangePart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyStrangePart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&strange_part_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyStrangePart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 strange_part_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_strange_part_item_id(&has_bits);
          strange_part_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyStrangePart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyStrangePart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_strange_part_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyStrangePart)
  return target;
}

size_t CMsgApplyStrangePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyStrangePart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 strange_part_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_strange_part_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyStrangePart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyStrangePart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyStrangePart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyStrangePart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyStrangePart)
    MergeFrom(*source);
  }
}

void CMsgApplyStrangePart::MergeFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strange_part_item_id_ = from.strange_part_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyStrangePart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  return true;
}

void CMsgApplyStrangePart::InternalSwap(CMsgApplyStrangePart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, item_item_id_)
      + sizeof(CMsgApplyStrangePart::item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, strange_part_item_id_)>(
          reinterpret_cast<char*>(&strange_part_item_id_),
          reinterpret_cast<char*>(&other->strange_part_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyStrangePart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyPennantUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyPennantUpgrade>()._has_bits_);
  static void set_has_upgrade_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pennant_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyPennantUpgrade)
}
CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(const CMsgApplyPennantUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upgrade_item_id_, &from.upgrade_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyPennantUpgrade)
}

void CMsgApplyPennantUpgrade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upgrade_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
}

CMsgApplyPennantUpgrade::~CMsgApplyPennantUpgrade() {
  // @@protoc_insertion_point(destructor:CMsgApplyPennantUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyPennantUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyPennantUpgrade::ArenaDtor(void* object) {
  CMsgApplyPennantUpgrade* _this = reinterpret_cast< CMsgApplyPennantUpgrade* >(object);
  (void)_this;
}
void CMsgApplyPennantUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyPennantUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyPennantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyPennantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&upgrade_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pennant_item_id_) -
        reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyPennantUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 upgrade_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upgrade_item_id(&has_bits);
          upgrade_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pennant_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pennant_item_id(&has_bits);
          pennant_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyPennantUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyPennantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upgrade_item_id(), target);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pennant_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyPennantUpgrade)
  return target;
}

size_t CMsgApplyPennantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyPennantUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upgrade_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_upgrade_item_id());
    }

    // optional uint64 pennant_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pennant_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyPennantUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyPennantUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyPennantUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyPennantUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyPennantUpgrade)
    MergeFrom(*source);
  }
}

void CMsgApplyPennantUpgrade::MergeFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upgrade_item_id_ = from.upgrade_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pennant_item_id_ = from.pennant_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyPennantUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyPennantUpgrade::CopyFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyPennantUpgrade::IsInitialized() const {
  return true;
}

void CMsgApplyPennantUpgrade::InternalSwap(CMsgApplyPennantUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, pennant_item_id_)
      + sizeof(CMsgApplyPennantUpgrade::pennant_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, upgrade_item_id_)>(
          reinterpret_cast<char*>(&upgrade_item_id_),
          reinterpret_cast<char*>(&other->upgrade_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyPennantUpgrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyEggEssence::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyEggEssence>()._has_bits_);
  static void set_has_essence_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_egg_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyEggEssence::CMsgApplyEggEssence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyEggEssence)
}
CMsgApplyEggEssence::CMsgApplyEggEssence(const CMsgApplyEggEssence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&essence_item_id_, &from.essence_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyEggEssence)
}

void CMsgApplyEggEssence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&essence_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
}

CMsgApplyEggEssence::~CMsgApplyEggEssence() {
  // @@protoc_insertion_point(destructor:CMsgApplyEggEssence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyEggEssence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyEggEssence::ArenaDtor(void* object) {
  CMsgApplyEggEssence* _this = reinterpret_cast< CMsgApplyEggEssence* >(object);
  (void)_this;
}
void CMsgApplyEggEssence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyEggEssence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyEggEssence::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyEggEssence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&essence_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&egg_item_id_) -
        reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyEggEssence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 essence_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_essence_item_id(&has_bits);
          essence_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 egg_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_egg_item_id(&has_bits);
          egg_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyEggEssence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyEggEssence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_essence_item_id(), target);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_egg_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyEggEssence)
  return target;
}

size_t CMsgApplyEggEssence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyEggEssence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 essence_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_essence_item_id());
    }

    // optional uint64 egg_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_egg_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyEggEssence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyEggEssence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyEggEssence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyEggEssence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyEggEssence)
    MergeFrom(*source);
  }
}

void CMsgApplyEggEssence::MergeFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      essence_item_id_ = from.essence_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_item_id_ = from.egg_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyEggEssence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyEggEssence::CopyFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyEggEssence::IsInitialized() const {
  return true;
}

void CMsgApplyEggEssence::InternalSwap(CMsgApplyEggEssence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, egg_item_id_)
      + sizeof(CMsgApplyEggEssence::egg_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, essence_item_id_)>(
          reinterpret_cast<char*>(&essence_item_id_),
          reinterpret_cast<char*>(&other->essence_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyEggEssence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemAttribute>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconItemAttribute::CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_bytes()) {
    value_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_bytes(), 
      GetArena());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemAttribute)
}

void CSOEconItemAttribute::SharedCtor() {
value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:CSOEconItemAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::ArenaDtor(void* object) {
  CSOEconItemAttribute* _this = reinterpret_cast< CSOEconItemAttribute* >(object);
  (void)_this;
}
void CSOEconItemAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes value_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value_bytes());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemAttribute)
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_bytes(from._internal_value_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_bytes_.Swap(&other->value_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, value_)
      + sizeof(CSOEconItemAttribute::value_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemEquipped::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEquipped>()._has_bits_);
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOEconItemEquipped::CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEquipped)
}

void CSOEconItemEquipped::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_class_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:CSOEconItemEquipped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemEquipped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemEquipped::ArenaDtor(void* object) {
  CSOEconItemEquipped* _this = reinterpret_cast< CSOEconItemEquipped* >(object);
  (void)_this;
}
void CSOEconItemEquipped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEquipped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_slot_) -
        reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEquipped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemEquipped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEquipped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemEquipped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemEquipped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemEquipped)
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEquipped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_slot_)
      + sizeof(CSOEconItemEquipped::new_slot_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_class_)>(
          reinterpret_cast<char*>(&new_class_),
          reinterpret_cast<char*>(&other->new_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEquipped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CSOEconItem&
CSOEconItem::_Internal::interior_item(const CSOEconItem* msg) {
  return *msg->interior_item_;
}
CSOEconItem::CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribute_(arena),
  equipped_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interior_item()) {
    interior_item_ = new ::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItem)
}

void CSOEconItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interior_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_id_) -
    reinterpret_cast<char*>(&interior_item_)) + sizeof(original_id_));
quality_ = 4u;
quantity_ = 1u;
level_ = 1u;
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:CSOEconItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete interior_item_;
}

void CSOEconItem::ArenaDtor(void* object) {
  CSOEconItem* _this = reinterpret_cast< CSOEconItem* >(object);
  (void)_this;
}
void CSOEconItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  equipped_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(interior_item_ != nullptr);
    interior_item_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&id_)) + sizeof(style_));
  }
  if (cached_has_bits & 0x00000f00u) {
    original_id_ = PROTOBUF_ULONGLONG(0);
    quality_ = 4u;
    quantity_ = 1u;
    level_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CSOEconItem interior_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 original_id = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_original_id(&has_bits);
          original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_origin(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_attribute(i), target, stream);
  }

  // optional .CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::interior_item(this), target, stream);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_original_id(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_equipped_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 original_id = 16 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_id());
    }

    // optional uint32 quality = 7 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItem)
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_interior_item()->::CSOEconItem::MergeFrom(from._internal_interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  equipped_state_.InternalSwap(&other->equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItem, original_id_)
      + sizeof(CSOEconItem::original_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItem, interior_item_)>(
          reinterpret_cast<char*>(&interior_item_),
          reinterpret_cast<char*>(&other->interior_item_));
  swap(quality_, other->quality_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSortItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSortItems>()._has_bits_);
  static void set_has_sort_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSortItems::CMsgSortItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSortItems)
}
CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sort_type_ = from.sort_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSortItems)
}

void CMsgSortItems::SharedCtor() {
sort_type_ = 0u;
}

CMsgSortItems::~CMsgSortItems() {
  // @@protoc_insertion_point(destructor:CMsgSortItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSortItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSortItems::ArenaDtor(void* object) {
  CMsgSortItems* _this = reinterpret_cast< CMsgSortItems* >(object);
  (void)_this;
}
void CMsgSortItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSortItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSortItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSortItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sort_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSortItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sort_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sort_type(&has_bits);
          sort_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSortItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSortItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sort_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSortItems)
  return target;
}

size_t CMsgSortItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSortItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sort_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sort_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSortItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSortItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSortItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSortItems)
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sort_type()) {
    _internal_set_sort_type(from._internal_sort_type());
  }
}

void CMsgSortItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  return true;
}

void CMsgSortItems::InternalSwap(CMsgSortItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sort_type_, other->sort_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSortItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconClaimCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconClaimCode>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_acquired(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconClaimCode::CSOEconClaimCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconClaimCode)
}
CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  // @@protoc_insertion_point(copy_constructor:CSOEconClaimCode)
}

void CSOEconClaimCode::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  // @@protoc_insertion_point(destructor:CSOEconClaimCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconClaimCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconClaimCode::ArenaDtor(void* object) {
  CSOEconClaimCode* _this = reinterpret_cast< CSOEconClaimCode* >(object);
  (void)_this;
}
void CSOEconClaimCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconClaimCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconClaimCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconClaimCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_acquired_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconClaimCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 code_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_code_type(&has_bits);
          code_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_acquired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_acquired(&has_bits);
          time_acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOEconClaimCode.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconClaimCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconClaimCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code_type(), target);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_acquired(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOEconClaimCode.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconClaimCode)
  return target;
}

size_t CSOEconClaimCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconClaimCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 code_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_code_type());
    }

    // optional uint32 time_acquired = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_acquired());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconClaimCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconClaimCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconClaimCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconClaimCode)
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_type_ = from.code_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_acquired_ = from.time_acquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconClaimCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  return true;
}

void CSOEconClaimCode::InternalSwap(CSOEconClaimCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconClaimCode, time_acquired_)
      + sizeof(CSOEconClaimCode::time_acquired_)
      - PROTOBUF_FIELD_OFFSET(CSOEconClaimCode, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconClaimCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUpdateItemSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUpdateItemSchema>()._has_bits_);
  static void set_has_items_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_schema_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_items_game_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgUpdateItemSchema::CMsgUpdateItemSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUpdateItemSchema)
}
CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  items_game_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game()) {
    items_game_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game(), 
      GetArena());
  }
  items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game_url()) {
    items_game_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game_url(), 
      GetArena());
  }
  item_schema_version_ = from.item_schema_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateItemSchema)
}

void CMsgUpdateItemSchema::SharedCtor() {
items_game_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_schema_version_ = 0u;
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  // @@protoc_insertion_point(destructor:CMsgUpdateItemSchema)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUpdateItemSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  items_game_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateItemSchema::ArenaDtor(void* object) {
  CMsgUpdateItemSchema* _this = reinterpret_cast< CMsgUpdateItemSchema* >(object);
  (void)_this;
}
void CMsgUpdateItemSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUpdateItemSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateItemSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      items_game_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      items_game_url_.ClearNonDefaultToEmpty();
    }
  }
  item_schema_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUpdateItemSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes items_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_items_game();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 item_schema_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_item_schema_version(&has_bits);
          item_schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string items_game_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_items_game_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgUpdateItemSchema.items_game_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUpdateItemSchema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateItemSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_items_game(), target);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_item_schema_version(), target);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_url().data(), static_cast<int>(this->_internal_items_game_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgUpdateItemSchema.items_game_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_items_game_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateItemSchema)
  return target;
}

size_t CMsgUpdateItemSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateItemSchema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes items_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_items_game());
    }

    // optional string items_game_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_url());
    }

    // optional fixed32 item_schema_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUpdateItemSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUpdateItemSchema)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUpdateItemSchema)
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_items_game(from._internal_items_game());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_items_game_url(from._internal_items_game_url());
    }
    if (cached_has_bits & 0x00000004u) {
      item_schema_version_ = from.item_schema_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateItemSchema::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  return true;
}

void CMsgUpdateItemSchema::InternalSwap(CMsgUpdateItemSchema* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_game_.Swap(&other->items_game_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  items_game_url_.Swap(&other->items_game_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(item_schema_version_, other->item_schema_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCError>()._has_bits_);
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCError::CMsgGCError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCError)
}
CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_text()) {
    error_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCError)
}

void CMsgGCError::SharedCtor() {
error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCError::~CMsgGCError() {
  // @@protoc_insertion_point(destructor:CMsgGCError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCError::ArenaDtor(void* object) {
  CMsgGCError* _this = reinterpret_cast< CMsgGCError* >(object);
  (void)_this;
}
void CMsgGCError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string error_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCError.error_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCError.error_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCError)
  return target;
}

size_t CMsgGCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCError)
    MergeFrom(*source);
  }
}

void CMsgGCError::MergeFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_text()) {
    _internal_set_error_text(from._internal_error_text());
  }
}

void CMsgGCError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  return true;
}

void CMsgGCError::InternalSwap(CMsgGCError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_text_.Swap(&other->error_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestInventoryRefresh::_Internal {
 public:
};

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestInventoryRefresh)
}
CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestInventoryRefresh)
}

void CMsgRequestInventoryRefresh::SharedCtor() {
}

CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh() {
  // @@protoc_insertion_point(destructor:CMsgRequestInventoryRefresh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestInventoryRefresh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestInventoryRefresh::ArenaDtor(void* object) {
  CMsgRequestInventoryRefresh* _this = reinterpret_cast< CMsgRequestInventoryRefresh* >(object);
  (void)_this;
}
void CMsgRequestInventoryRefresh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestInventoryRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestInventoryRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestInventoryRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestInventoryRefresh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestInventoryRefresh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestInventoryRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestInventoryRefresh)
  return target;
}

size_t CMsgRequestInventoryRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestInventoryRefresh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestInventoryRefresh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestInventoryRefresh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestInventoryRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestInventoryRefresh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestInventoryRefresh)
    MergeFrom(*source);
  }
}

void CMsgRequestInventoryRefresh::MergeFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestInventoryRefresh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::CopyFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestInventoryRefresh::IsInitialized() const {
  return true;
}

void CMsgRequestInventoryRefresh::InternalSwap(CMsgRequestInventoryRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgConVarValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConVarValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgConVarValue::CMsgConVarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConVarValue)
}
CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgConVarValue)
}

void CMsgConVarValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgConVarValue::~CMsgConVarValue() {
  // @@protoc_insertion_point(destructor:CMsgConVarValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConVarValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgConVarValue::ArenaDtor(void* object) {
  CMsgConVarValue* _this = reinterpret_cast< CMsgConVarValue* >(object);
  (void)_this;
}
void CMsgConVarValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConVarValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConVarValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConVarValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgConVarValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgConVarValue.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConVarValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConVarValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgConVarValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgConVarValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConVarValue)
  return target;
}

size_t CMsgConVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConVarValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConVarValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConVarValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConVarValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConVarValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConVarValue)
    MergeFrom(*source);
  }
}

void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CMsgConVarValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  return true;
}

void CMsgConVarValue::InternalSwap(CMsgConVarValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConVarValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReplicateConVars::_Internal {
 public:
};

CMsgReplicateConVars::CMsgReplicateConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  convars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReplicateConVars)
}
CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      convars_(from.convars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgReplicateConVars)
}

void CMsgReplicateConVars::SharedCtor() {
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  // @@protoc_insertion_point(destructor:CMsgReplicateConVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReplicateConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgReplicateConVars::ArenaDtor(void* object) {
  CMsgReplicateConVars* _this = reinterpret_cast< CMsgReplicateConVars* >(object);
  (void)_this;
}
void CMsgReplicateConVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReplicateConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReplicateConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplicateConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReplicateConVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgConVarValue convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_convars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReplicateConVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplicateConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgConVarValue convars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_convars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_convars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplicateConVars)
  return target;
}

size_t CMsgReplicateConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplicateConVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgConVarValue convars = 1;
  total_size += 1UL * this->_internal_convars_size();
  for (const auto& msg : this->convars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReplicateConVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplicateConVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReplicateConVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReplicateConVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReplicateConVars)
    MergeFrom(*source);
  }
}

void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convars_.MergeFrom(from.convars_);
}

void CMsgReplicateConVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  return true;
}

void CMsgReplicateConVars::InternalSwap(CMsgReplicateConVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  convars_.InternalSwap(&other->convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReplicateConVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemAcknowledged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAcknowledged>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgItemAcknowledged::CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged)
}

void CMsgItemAcknowledged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemAcknowledged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemAcknowledged::ArenaDtor(void* object) {
  CMsgItemAcknowledged* _this = reinterpret_cast< CMsgItemAcknowledged* >(object);
  (void)_this;
}
void CMsgItemAcknowledged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAcknowledged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemAcknowledged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_def_index(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 inventory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventory());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rarity());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemAcknowledged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemAcknowledged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemAcknowledged)
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemAcknowledged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged, origin_)
      + sizeof(CMsgItemAcknowledged::origin_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAcknowledged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetItemPositions_ItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetItemPositions_ItemPosition>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions.ItemPosition)
}
CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions.ItemPosition)
}

void CMsgSetItemPositions_ItemPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions.ItemPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetItemPositions_ItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetItemPositions_ItemPosition::ArenaDtor(void* object) {
  CMsgSetItemPositions_ItemPosition* _this = reinterpret_cast< CMsgSetItemPositions_ItemPosition* >(object);
  (void)_this;
}
void CMsgSetItemPositions_ItemPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetItemPositions_ItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions.ItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions_ItemPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetItemPositions_ItemPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions.ItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions.ItemPosition)
  return target;
}

size_t CMsgSetItemPositions_ItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions.ItemPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions_ItemPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetItemPositions_ItemPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetItemPositions.ItemPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetItemPositions.ItemPosition)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions_ItemPosition::InternalSwap(CMsgSetItemPositions_ItemPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, position_)
      + sizeof(CMsgSetItemPositions_ItemPosition::position_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSetItemPositions::_Internal {
 public:
};

CMsgSetItemPositions::CMsgSetItemPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions)
}
CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_positions_(from.item_positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions)
}

void CMsgSetItemPositions::SharedCtor() {
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSetItemPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSetItemPositions::ArenaDtor(void* object) {
  CMsgSetItemPositions* _this = reinterpret_cast< CMsgSetItemPositions* >(object);
  (void)_this;
}
void CMsgSetItemPositions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetItemPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetItemPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetItemPositions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions)
  return target;
}

size_t CMsgSetItemPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  total_size += 1UL * this->_internal_item_positions_size();
  for (const auto& msg : this->item_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetItemPositions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSetItemPositions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSetItemPositions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSetItemPositions)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions::MergeFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_positions_.MergeFrom(from.item_positions_);
}

void CMsgSetItemPositions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions::InternalSwap(CMsgSetItemPositions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_positions_.InternalSwap(&other->item_positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCNameItemNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCNameItemNotification>()._has_bits_);
  static void set_has_player_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_name_custom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCNameItemNotification::CMsgGCNameItemNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCNameItemNotification)
}
CMsgGCNameItemNotification::CMsgGCNameItemNotification(const CMsgGCNameItemNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name_custom()) {
    item_name_custom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name_custom(), 
      GetArena());
  }
  ::memcpy(&player_steamid_, &from.player_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNameItemNotification)
}

void CMsgGCNameItemNotification::SharedCtor() {
item_name_custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
}

CMsgGCNameItemNotification::~CMsgGCNameItemNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCNameItemNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCNameItemNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_name_custom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNameItemNotification::ArenaDtor(void* object) {
  CMsgGCNameItemNotification* _this = reinterpret_cast< CMsgGCNameItemNotification* >(object);
  (void)_this;
}
void CMsgGCNameItemNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNameItemNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNameItemNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNameItemNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_name_custom_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_def_index_) -
        reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNameItemNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_player_steamid(&has_bits);
          player_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_name_custom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_name_custom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCNameItemNotification.item_name_custom");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNameItemNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNameItemNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_player_steamid(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name_custom().data(), static_cast<int>(this->_internal_item_name_custom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCNameItemNotification.item_name_custom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_name_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNameItemNotification)
  return target;
}

size_t CMsgGCNameItemNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNameItemNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name_custom = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name_custom());
    }

    // optional fixed64 player_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNameItemNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNameItemNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCNameItemNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCNameItemNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCNameItemNotification)
    MergeFrom(*source);
  }
}

void CMsgGCNameItemNotification::MergeFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name_custom(from._internal_item_name_custom());
    }
    if (cached_has_bits & 0x00000002u) {
      player_steamid_ = from.player_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_index_ = from.item_def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNameItemNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNameItemNotification::CopyFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNameItemNotification::IsInitialized() const {
  return true;
}

void CMsgGCNameItemNotification::InternalSwap(CMsgGCNameItemNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_name_custom_.Swap(&other->item_name_custom_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCNameItemNotification, item_def_index_)
      + sizeof(CMsgGCNameItemNotification::item_def_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCNameItemNotification, player_steamid_)>(
          reinterpret_cast<char*>(&player_steamid_),
          reinterpret_cast<char*>(&other->player_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNameItemNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientDisplayNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientDisplayNotification>()._has_bits_);
  static void set_has_notification_title_localization_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_body_localization_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  body_substring_keys_(arena),
  body_substring_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientDisplayNotification)
}
CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(const CMsgGCClientDisplayNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      body_substring_keys_(from.body_substring_keys_),
      body_substring_values_(from.body_substring_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notification_title_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_title_localization_key()) {
    notification_title_localization_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_title_localization_key(), 
      GetArena());
  }
  notification_body_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_body_localization_key()) {
    notification_body_localization_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_body_localization_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientDisplayNotification)
}

void CMsgGCClientDisplayNotification::SharedCtor() {
notification_title_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notification_body_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCClientDisplayNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientDisplayNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notification_title_localization_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCClientDisplayNotification::ArenaDtor(void* object) {
  CMsgGCClientDisplayNotification* _this = reinterpret_cast< CMsgGCClientDisplayNotification* >(object);
  (void)_this;
}
void CMsgGCClientDisplayNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientDisplayNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientDisplayNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientDisplayNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_substring_keys_.Clear();
  body_substring_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notification_title_localization_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_body_localization_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientDisplayNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string notification_title_localization_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_notification_title_localization_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.notification_title_localization_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notification_body_localization_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notification_body_localization_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.notification_body_localization_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string body_substring_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_body_substring_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.body_substring_keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string body_substring_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_body_substring_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.body_substring_values");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientDisplayNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientDisplayNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_title_localization_key().data(), static_cast<int>(this->_internal_notification_title_localization_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.notification_title_localization_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notification_title_localization_key(), target);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_body_localization_key().data(), static_cast<int>(this->_internal_notification_body_localization_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.notification_body_localization_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notification_body_localization_key(), target);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->_internal_body_substring_keys_size(); i < n; i++) {
    const auto& s = this->_internal_body_substring_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.body_substring_keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->_internal_body_substring_values_size(); i < n; i++) {
    const auto& s = this->_internal_body_substring_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.body_substring_values");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientDisplayNotification)
  return target;
}

size_t CMsgGCClientDisplayNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientDisplayNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string body_substring_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(body_substring_keys_.size());
  for (int i = 0, n = body_substring_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      body_substring_keys_.Get(i));
  }

  // repeated string body_substring_values = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(body_substring_values_.size());
  for (int i = 0, n = body_substring_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      body_substring_values_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string notification_title_localization_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_title_localization_key());
    }

    // optional string notification_body_localization_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_body_localization_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientDisplayNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientDisplayNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientDisplayNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientDisplayNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientDisplayNotification)
    MergeFrom(*source);
  }
}

void CMsgGCClientDisplayNotification::MergeFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_substring_keys_.MergeFrom(from.body_substring_keys_);
  body_substring_values_.MergeFrom(from.body_substring_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notification_title_localization_key(from._internal_notification_title_localization_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_notification_body_localization_key(from._internal_notification_body_localization_key());
    }
  }
}

void CMsgGCClientDisplayNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientDisplayNotification::CopyFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientDisplayNotification::IsInitialized() const {
  return true;
}

void CMsgGCClientDisplayNotification::InternalSwap(CMsgGCClientDisplayNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_substring_keys_.InternalSwap(&other->body_substring_keys_);
  body_substring_values_.InternalSwap(&other->body_substring_values_);
  notification_title_localization_key_.Swap(&other->notification_title_localization_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notification_body_localization_key_.Swap(&other->notification_body_localization_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientDisplayNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCShowItemsPickedUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCShowItemsPickedUp>()._has_bits_);
  static void set_has_player_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCShowItemsPickedUp)
}
CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(const CMsgGCShowItemsPickedUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_steamid_ = from.player_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCShowItemsPickedUp)
}

void CMsgGCShowItemsPickedUp::SharedCtor() {
player_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp() {
  // @@protoc_insertion_point(destructor:CMsgGCShowItemsPickedUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCShowItemsPickedUp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCShowItemsPickedUp::ArenaDtor(void* object) {
  CMsgGCShowItemsPickedUp* _this = reinterpret_cast< CMsgGCShowItemsPickedUp* >(object);
  (void)_this;
}
void CMsgGCShowItemsPickedUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCShowItemsPickedUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCShowItemsPickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCShowItemsPickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCShowItemsPickedUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_player_steamid(&has_bits);
          player_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCShowItemsPickedUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCShowItemsPickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_player_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCShowItemsPickedUp)
  return target;
}

size_t CMsgGCShowItemsPickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCShowItemsPickedUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 player_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCShowItemsPickedUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCShowItemsPickedUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCShowItemsPickedUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCShowItemsPickedUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCShowItemsPickedUp)
    MergeFrom(*source);
  }
}

void CMsgGCShowItemsPickedUp::MergeFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_steamid()) {
    _internal_set_player_steamid(from._internal_player_steamid());
  }
}

void CMsgGCShowItemsPickedUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCShowItemsPickedUp::CopyFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShowItemsPickedUp::IsInitialized() const {
  return true;
}

void CMsgGCShowItemsPickedUp::InternalSwap(CMsgGCShowItemsPickedUp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_steamid_, other->player_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCShowItemsPickedUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCIncrementKillCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCIncrementKillCountResponse>()._has_bits_);
  static void set_has_killer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_level_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCIncrementKillCountResponse)
}
CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(const CMsgGCIncrementKillCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCIncrementKillCountResponse)
}

void CMsgGCIncrementKillCountResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
}

CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCIncrementKillCountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCIncrementKillCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCIncrementKillCountResponse::ArenaDtor(void* object) {
  CMsgGCIncrementKillCountResponse* _this = reinterpret_cast< CMsgGCIncrementKillCountResponse* >(object);
  (void)_this;
}
void CMsgGCIncrementKillCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCIncrementKillCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCIncrementKillCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCIncrementKillCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_type_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCIncrementKillCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 killer_account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_killer_account_id(&has_bits);
          killer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_kills(&has_bits);
          num_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level_type(&has_bits);
          level_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCIncrementKillCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCIncrementKillCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_killer_account_id(), target);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_kills(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_def(), target);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCIncrementKillCountResponse)
  return target;
}

size_t CMsgGCIncrementKillCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCIncrementKillCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 killer_account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_account_id());
    }

    // optional uint32 num_kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_kills());
    }

    // optional uint32 item_def = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 level_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIncrementKillCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCIncrementKillCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCIncrementKillCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCIncrementKillCountResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_kills_ = from.num_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_type_ = from.level_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIncrementKillCountResponse::IsInitialized() const {
  return true;
}

void CMsgGCIncrementKillCountResponse::InternalSwap(CMsgGCIncrementKillCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, level_type_)
      + sizeof(CMsgGCIncrementKillCountResponse::level_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, killer_account_id_)>(
          reinterpret_cast<char*>(&killer_account_id_),
          reinterpret_cast<char*>(&other->killer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCIncrementKillCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemDropRateBonus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seconds_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemDropRateBonus)
}
CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(const CSOEconItemDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemDropRateBonus)
}

void CSOEconItemDropRateBonus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
}

CSOEconItemDropRateBonus::~CSOEconItemDropRateBonus() {
  // @@protoc_insertion_point(destructor:CSOEconItemDropRateBonus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemDropRateBonus::ArenaDtor(void* object) {
  CSOEconItemDropRateBonus* _this = reinterpret_cast< CSOEconItemDropRateBonus* >(object);
  (void)_this;
}
void CSOEconItemDropRateBonus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemDropRateBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&booster_type_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemDropRateBonus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 expiration_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_expiration_date(&has_bits);
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional float bonus = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bonus(&has_bits);
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 bonus_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bonus_count(&has_bits);
          bonus_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_seconds_left(&has_bits);
          seconds_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 booster_type = 8 [(.key_field) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_booster_type(&has_bits);
          booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemDropRateBonus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_expiration_date(), target);
  }

  // optional float bonus = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bonus(), target);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bonus_count(), target);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_def_index(), target);
  }

  // optional uint32 seconds_left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_seconds_left(), target);
  }

  // optional uint32 booster_type = 8 [(.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_booster_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemDropRateBonus)
  return target;
}

size_t CSOEconItemDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemDropRateBonus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional fixed32 expiration_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bonus = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bonus_count());
    }

    // optional uint64 item_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 seconds_left = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_left());
    }

    // optional uint32 booster_type = 8 [(.key_field) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_booster_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemDropRateBonus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemDropRateBonus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemDropRateBonus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemDropRateBonus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemDropRateBonus)
    MergeFrom(*source);
  }
}

void CSOEconItemDropRateBonus::MergeFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_date_ = from.expiration_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_count_ = from.bonus_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_left_ = from.seconds_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      booster_type_ = from.booster_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemDropRateBonus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemDropRateBonus::CopyFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemDropRateBonus::IsInitialized() const {
  return true;
}

void CSOEconItemDropRateBonus::InternalSwap(CSOEconItemDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemDropRateBonus, booster_type_)
      + sizeof(CSOEconItemDropRateBonus::booster_type_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemDropRateBonus, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemDropRateBonus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemLeagueViewPass::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemLeagueViewPass>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_grant_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemLeagueViewPass)
}
CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(const CSOEconItemLeagueViewPass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemLeagueViewPass)
}

void CSOEconItemLeagueViewPass::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
}

CSOEconItemLeagueViewPass::~CSOEconItemLeagueViewPass() {
  // @@protoc_insertion_point(destructor:CSOEconItemLeagueViewPass)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemLeagueViewPass::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemLeagueViewPass::ArenaDtor(void* object) {
  CSOEconItemLeagueViewPass* _this = reinterpret_cast< CSOEconItemLeagueViewPass* >(object);
  (void)_this;
}
void CSOEconItemLeagueViewPass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemLeagueViewPass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemLeagueViewPass::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemLeagueViewPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grant_reason_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemLeagueViewPass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_itemindex(&has_bits);
          itemindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grant_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_grant_reason(&has_bits);
          grant_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemLeagueViewPass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemLeagueViewPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 league_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemindex(), target);
  }

  // optional uint32 grant_reason = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_grant_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemLeagueViewPass)
  return target;
}

size_t CSOEconItemLeagueViewPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemLeagueViewPass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 league_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 itemindex = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemindex());
    }

    // optional uint32 grant_reason = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grant_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemLeagueViewPass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemLeagueViewPass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemLeagueViewPass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemLeagueViewPass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemLeagueViewPass)
    MergeFrom(*source);
  }
}

void CSOEconItemLeagueViewPass::MergeFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemindex_ = from.itemindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      grant_reason_ = from.grant_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemLeagueViewPass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemLeagueViewPass::CopyFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemLeagueViewPass::IsInitialized() const {
  return true;
}

void CSOEconItemLeagueViewPass::InternalSwap(CSOEconItemLeagueViewPass* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemLeagueViewPass, grant_reason_)
      + sizeof(CSOEconItemLeagueViewPass::grant_reason_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemLeagueViewPass, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemLeagueViewPass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemEventTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEventTicket>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOEconItemEventTicket::CSOEconItemEventTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEventTicket)
}
CSOEconItemEventTicket::CSOEconItemEventTicket(const CSOEconItemEventTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEventTicket)
}

void CSOEconItemEventTicket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
}

CSOEconItemEventTicket::~CSOEconItemEventTicket() {
  // @@protoc_insertion_point(destructor:CSOEconItemEventTicket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemEventTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemEventTicket::ArenaDtor(void* object) {
  CSOEconItemEventTicket* _this = reinterpret_cast< CSOEconItemEventTicket* >(object);
  (void)_this;
}
void CSOEconItemEventTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEventTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEventTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEventTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEventTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemEventTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEventTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEventTicket)
  return target;
}

size_t CSOEconItemEventTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEventTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemEventTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEventTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemEventTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemEventTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemEventTicket)
    MergeFrom(*source);
  }
}

void CSOEconItemEventTicket::MergeFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEventTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEventTicket::CopyFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEventTicket::IsInitialized() const {
  return true;
}

void CSOEconItemEventTicket::InternalSwap(CSOEconItemEventTicket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEventTicket, item_id_)
      + sizeof(CSOEconItemEventTicket::item_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEventTicket, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEventTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSOEconItemTournamentPassport::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemTournamentPassport>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_purchaser_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_passports_bought(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reward_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSOEconItemTournamentPassport::CSOEconItemTournamentPassport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSOEconItemTournamentPassport)
}
CSOEconItemTournamentPassport::CSOEconItemTournamentPassport(const CSOEconItemTournamentPassport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemTournamentPassport)
}

void CSOEconItemTournamentPassport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
}

CSOEconItemTournamentPassport::~CSOEconItemTournamentPassport() {
  // @@protoc_insertion_point(destructor:CSOEconItemTournamentPassport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSOEconItemTournamentPassport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSOEconItemTournamentPassport::ArenaDtor(void* object) {
  CSOEconItemTournamentPassport* _this = reinterpret_cast< CSOEconItemTournamentPassport* >(object);
  (void)_this;
}
void CSOEconItemTournamentPassport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemTournamentPassport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemTournamentPassport::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemTournamentPassport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_flags_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemTournamentPassport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_purchaser_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_original_purchaser_id(&has_bits);
          original_purchaser_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 passports_bought = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_passports_bought(&has_bits);
          passports_bought_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reward_flags(&has_bits);
          reward_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemTournamentPassport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemTournamentPassport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  // optional uint32 original_purchaser_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_original_purchaser_id(), target);
  }

  // optional uint32 passports_bought = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_passports_bought(), target);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_version(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_def_index(), target);
  }

  // optional uint32 reward_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_reward_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemTournamentPassport)
  return target;
}

size_t CSOEconItemTournamentPassport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemTournamentPassport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 original_purchaser_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_purchaser_id());
    }

    // optional uint32 passports_bought = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_passports_bought());
    }

    // optional uint32 version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 def_index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 reward_flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemTournamentPassport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemTournamentPassport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSOEconItemTournamentPassport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSOEconItemTournamentPassport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSOEconItemTournamentPassport)
    MergeFrom(*source);
  }
}

void CSOEconItemTournamentPassport::MergeFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      original_purchaser_id_ = from.original_purchaser_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      passports_bought_ = from.passports_bought_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      reward_flags_ = from.reward_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemTournamentPassport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemTournamentPassport::CopyFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemTournamentPassport::IsInitialized() const {
  return true;
}

void CSOEconItemTournamentPassport::InternalSwap(CSOEconItemTournamentPassport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemTournamentPassport, reward_flags_)
      + sizeof(CSOEconItemTournamentPassport::reward_flags_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemTournamentPassport, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemTournamentPassport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseCancel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancel>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancel)
}
CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancel)
}

void CMsgGCStorePurchaseCancel::SharedCtor() {
txn_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCStorePurchaseCancel::ArenaDtor(void* object) {
  CMsgGCStorePurchaseCancel* _this = reinterpret_cast< CMsgGCStorePurchaseCancel* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancel)
  return target;
}

size_t CMsgGCStorePurchaseCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseCancel)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancel::MergeFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _internal_set_txn_id(from._internal_txn_id());
  }
}

void CMsgGCStorePurchaseCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancel::InternalSwap(CMsgGCStorePurchaseCancel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseCancelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancelResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancelResponse)
}
CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancelResponse)
}

void CMsgGCStorePurchaseCancelResponse::SharedCtor() {
result_ = 0u;
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCStorePurchaseCancelResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseCancelResponse* _this = reinterpret_cast< CMsgGCStorePurchaseCancelResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseCancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseCancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancelResponse)
  return target;
}

size_t CMsgGCStorePurchaseCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseCancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseCancelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancelResponse::InternalSwap(CMsgGCStorePurchaseCancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseFinalize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalize>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalize)
}
CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalize)
}

void CMsgGCStorePurchaseFinalize::SharedCtor() {
txn_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseFinalize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCStorePurchaseFinalize::ArenaDtor(void* object) {
  CMsgGCStorePurchaseFinalize* _this = reinterpret_cast< CMsgGCStorePurchaseFinalize* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseFinalize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseFinalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalize)
  return target;
}

size_t CMsgGCStorePurchaseFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseFinalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseFinalize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseFinalize)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _internal_set_txn_id(from._internal_txn_id());
  }
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalize::InternalSwap(CMsgGCStorePurchaseFinalize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCStorePurchaseFinalizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalizeResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalizeResponse)
}
CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalizeResponse)
}

void CMsgGCStorePurchaseFinalizeResponse::SharedCtor() {
result_ = 0u;
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCStorePurchaseFinalizeResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseFinalizeResponse* _this = reinterpret_cast< CMsgGCStorePurchaseFinalizeResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseFinalizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseFinalizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalizeResponse)
  return target;
}

size_t CMsgGCStorePurchaseFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCStorePurchaseFinalizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCStorePurchaseFinalizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCStorePurchaseFinalizeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::InternalSwap(CMsgGCStorePurchaseFinalizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCBannedWordListUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBannedWordListUpdated>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBannedWordListUpdated)
}
CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(const CMsgGCToGCBannedWordListUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBannedWordListUpdated)
}

void CMsgGCToGCBannedWordListUpdated::SharedCtor() {
group_id_ = 0u;
}

CMsgGCToGCBannedWordListUpdated::~CMsgGCToGCBannedWordListUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBannedWordListUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCBannedWordListUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCBannedWordListUpdated::ArenaDtor(void* object) {
  CMsgGCToGCBannedWordListUpdated* _this = reinterpret_cast< CMsgGCToGCBannedWordListUpdated* >(object);
  (void)_this;
}
void CMsgGCToGCBannedWordListUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBannedWordListUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBannedWordListUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBannedWordListUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBannedWordListUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBannedWordListUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBannedWordListUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBannedWordListUpdated)
  return target;
}

size_t CMsgGCToGCBannedWordListUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBannedWordListUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBannedWordListUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCBannedWordListUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCBannedWordListUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCBannedWordListUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_id()) {
    _internal_set_group_id(from._internal_group_id());
  }
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListUpdated::InternalSwap(CMsgGCToGCBannedWordListUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBannedWordListUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCDirtySDOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCDirtySDOCache>()._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCDirtySDOCache)
}
CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(const CMsgGCToGCDirtySDOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_uint64_, &from.key_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCDirtySDOCache)
}

void CMsgGCToGCDirtySDOCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_uint64_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
}

CMsgGCToGCDirtySDOCache::~CMsgGCToGCDirtySDOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCDirtySDOCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCDirtySDOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCDirtySDOCache::ArenaDtor(void* object) {
  CMsgGCToGCDirtySDOCache* _this = reinterpret_cast< CMsgGCToGCDirtySDOCache* >(object);
  (void)_this;
}
void CMsgGCToGCDirtySDOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCDirtySDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCDirtySDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCDirtySDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sdo_type_) -
        reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCDirtySDOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 key_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_key_uint64(&has_bits);
          key_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCDirtySDOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCDirtySDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCDirtySDOCache)
  return target;
}

size_t CMsgGCToGCDirtySDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCDirtySDOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 key_uint64 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_key_uint64());
    }

    // optional uint32 sdo_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sdo_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtySDOCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCDirtySDOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCDirtySDOCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCDirtySDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_uint64_ = from.key_uint64_;
    }
    if (cached_has_bits & 0x00000002u) {
      sdo_type_ = from.sdo_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtySDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtySDOCache::InternalSwap(CMsgGCToGCDirtySDOCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, sdo_type_)
      + sizeof(CMsgGCToGCDirtySDOCache::sdo_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, key_uint64_)>(
          reinterpret_cast<char*>(&key_uint64_),
          reinterpret_cast<char*>(&other->key_uint64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCDirtySDOCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCDirtyMultipleSDOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCDirtyMultipleSDOCache>()._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_uint64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCDirtyMultipleSDOCache)
}
CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(const CMsgGCToGCDirtyMultipleSDOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      key_uint64_(from.key_uint64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdo_type_ = from.sdo_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCDirtyMultipleSDOCache)
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedCtor() {
sdo_type_ = 0u;
}

CMsgGCToGCDirtyMultipleSDOCache::~CMsgGCToGCDirtyMultipleSDOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCDirtyMultipleSDOCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCDirtyMultipleSDOCache::ArenaDtor(void* object) {
  CMsgGCToGCDirtyMultipleSDOCache* _this = reinterpret_cast< CMsgGCToGCDirtyMultipleSDOCache* >(object);
  (void)_this;
}
void CMsgGCToGCDirtyMultipleSDOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCDirtyMultipleSDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCDirtyMultipleSDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCDirtyMultipleSDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uint64_.Clear();
  sdo_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCDirtyMultipleSDOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 key_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_key_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_key_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCDirtyMultipleSDOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCDirtyMultipleSDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // repeated uint64 key_uint64 = 2;
  for (int i = 0, n = this->_internal_key_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_uint64(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCDirtyMultipleSDOCache)
  return target;
}

size_t CMsgGCToGCDirtyMultipleSDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCDirtyMultipleSDOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key_uint64 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->key_uint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_uint64_size());
    total_size += data_size;
  }

  // optional uint32 sdo_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sdo_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtyMultipleSDOCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCDirtyMultipleSDOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCDirtyMultipleSDOCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCDirtyMultipleSDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_uint64_.MergeFrom(from.key_uint64_);
  if (from._internal_has_sdo_type()) {
    _internal_set_sdo_type(from._internal_sdo_type());
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtyMultipleSDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtyMultipleSDOCache::InternalSwap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_uint64_.InternalSwap(&other->key_uint64_);
  swap(sdo_type_, other->sdo_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCDirtyMultipleSDOCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCApplyLocalizationDiff::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCApplyLocalizationDiff>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packed_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCApplyLocalizationDiff)
}
CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff(const CMsgGCToGCApplyLocalizationDiff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packed_diff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_packed_diff()) {
    packed_diff_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packed_diff(), 
      GetArena());
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCApplyLocalizationDiff)
}

void CMsgGCToGCApplyLocalizationDiff::SharedCtor() {
packed_diff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_ = 0u;
}

CMsgGCToGCApplyLocalizationDiff::~CMsgGCToGCApplyLocalizationDiff() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCApplyLocalizationDiff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCApplyLocalizationDiff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packed_diff_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCApplyLocalizationDiff::ArenaDtor(void* object) {
  CMsgGCToGCApplyLocalizationDiff* _this = reinterpret_cast< CMsgGCToGCApplyLocalizationDiff* >(object);
  (void)_this;
}
void CMsgGCToGCApplyLocalizationDiff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCApplyLocalizationDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCApplyLocalizationDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCApplyLocalizationDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packed_diff_.ClearNonDefaultToEmpty();
  }
  language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCApplyLocalizationDiff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string packed_diff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_packed_diff();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCApplyLocalizationDiff.packed_diff");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCApplyLocalizationDiff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCApplyLocalizationDiff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_language(), target);
  }

  // optional string packed_diff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_packed_diff().data(), static_cast<int>(this->_internal_packed_diff().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCApplyLocalizationDiff.packed_diff");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_packed_diff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCApplyLocalizationDiff)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCApplyLocalizationDiff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string packed_diff = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_packed_diff());
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_language());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCApplyLocalizationDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCApplyLocalizationDiff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCApplyLocalizationDiff)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_packed_diff(from._internal_packed_diff());
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiff::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiff::InternalSwap(CMsgGCToGCApplyLocalizationDiff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_diff_.Swap(&other->packed_diff_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCApplyLocalizationDiff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCApplyLocalizationDiffResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCApplyLocalizationDiffResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCApplyLocalizationDiffResponse)
}
CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse(const CMsgGCToGCApplyLocalizationDiffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCApplyLocalizationDiffResponse)
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedCtor() {
success_ = false;
}

CMsgGCToGCApplyLocalizationDiffResponse::~CMsgGCToGCApplyLocalizationDiffResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCApplyLocalizationDiffResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCApplyLocalizationDiffResponse::ArenaDtor(void* object) {
  CMsgGCToGCApplyLocalizationDiffResponse* _this = reinterpret_cast< CMsgGCToGCApplyLocalizationDiffResponse* >(object);
  (void)_this;
}
void CMsgGCToGCApplyLocalizationDiffResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCApplyLocalizationDiffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCApplyLocalizationDiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCApplyLocalizationDiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCApplyLocalizationDiffResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCApplyLocalizationDiffResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCApplyLocalizationDiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCApplyLocalizationDiffResponse)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCApplyLocalizationDiffResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiffResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCApplyLocalizationDiffResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCApplyLocalizationDiffResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCApplyLocalizationDiffResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiffResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiffResponse::InternalSwap(CMsgGCToGCApplyLocalizationDiffResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCApplyLocalizationDiffResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCCollectItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCollectItem>()._has_bits_);
  static void set_has_collection_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCollectItem::CMsgGCCollectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCollectItem)
}
CMsgGCCollectItem::CMsgGCCollectItem(const CMsgGCCollectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&collection_item_id_, &from.collection_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCollectItem)
}

void CMsgGCCollectItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&collection_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
}

CMsgGCCollectItem::~CMsgGCCollectItem() {
  // @@protoc_insertion_point(destructor:CMsgGCCollectItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCCollectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCCollectItem::ArenaDtor(void* object) {
  CMsgGCCollectItem* _this = reinterpret_cast< CMsgGCCollectItem* >(object);
  (void)_this;
}
void CMsgGCCollectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCollectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCCollectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCollectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&collection_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subject_item_id_) -
        reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCollectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 collection_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_collection_item_id(&has_bits);
          collection_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 subject_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subject_item_id(&has_bits);
          subject_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCollectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCollectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_collection_item_id(), target);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subject_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCollectItem)
  return target;
}

size_t CMsgGCCollectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCollectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 collection_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_collection_item_id());
    }

    // optional uint64 subject_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subject_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCollectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCollectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCCollectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCCollectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCCollectItem)
    MergeFrom(*source);
  }
}

void CMsgGCCollectItem::MergeFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      collection_item_id_ = from.collection_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      subject_item_id_ = from.subject_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCollectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCollectItem::CopyFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCollectItem::IsInitialized() const {
  return true;
}

void CMsgGCCollectItem::InternalSwap(CMsgGCCollectItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCollectItem, subject_item_id_)
      + sizeof(CMsgGCCollectItem::subject_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCollectItem, collection_item_id_)>(
          reinterpret_cast<char*>(&collection_item_id_),
          reinterpret_cast<char*>(&other->collection_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCollectItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSDONoMemcached::_Internal {
 public:
};

CMsgSDONoMemcached::CMsgSDONoMemcached(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSDONoMemcached)
}
CMsgSDONoMemcached::CMsgSDONoMemcached(const CMsgSDONoMemcached& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSDONoMemcached)
}

void CMsgSDONoMemcached::SharedCtor() {
}

CMsgSDONoMemcached::~CMsgSDONoMemcached() {
  // @@protoc_insertion_point(destructor:CMsgSDONoMemcached)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSDONoMemcached::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSDONoMemcached::ArenaDtor(void* object) {
  CMsgSDONoMemcached* _this = reinterpret_cast< CMsgSDONoMemcached* >(object);
  (void)_this;
}
void CMsgSDONoMemcached::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSDONoMemcached::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSDONoMemcached::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSDONoMemcached)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSDONoMemcached::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSDONoMemcached::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSDONoMemcached)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSDONoMemcached)
  return target;
}

size_t CMsgSDONoMemcached::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSDONoMemcached)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSDONoMemcached::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSDONoMemcached* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSDONoMemcached>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSDONoMemcached)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSDONoMemcached)
    MergeFrom(*source);
  }
}

void CMsgSDONoMemcached::MergeFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSDONoMemcached::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSDONoMemcached::CopyFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSDONoMemcached::IsInitialized() const {
  return true;
}

void CMsgSDONoMemcached::InternalSwap(CMsgSDONoMemcached* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSDONoMemcached::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUpdateSQLKeyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSQLKeyValue>()._has_bits_);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSQLKeyValue)
}
CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(const CMsgGCToGCUpdateSQLKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSQLKeyValue)
}

void CMsgGCToGCUpdateSQLKeyValue::SharedCtor() {
key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToGCUpdateSQLKeyValue::~CMsgGCToGCUpdateSQLKeyValue() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSQLKeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUpdateSQLKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCUpdateSQLKeyValue::ArenaDtor(void* object) {
  CMsgGCToGCUpdateSQLKeyValue* _this = reinterpret_cast< CMsgGCToGCUpdateSQLKeyValue* >(object);
  (void)_this;
}
void CMsgGCToGCUpdateSQLKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUpdateSQLKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUpdateSQLKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSQLKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSQLKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCUpdateSQLKeyValue.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUpdateSQLKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSQLKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCUpdateSQLKeyValue.key_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSQLKeyValue)
  return target;
}

size_t CMsgGCToGCUpdateSQLKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSQLKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSQLKeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUpdateSQLKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUpdateSQLKeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUpdateSQLKeyValue)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_name()) {
    _internal_set_key_name(from._internal_key_name());
  }
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSQLKeyValue::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSQLKeyValue::InternalSwap(CMsgGCToGCUpdateSQLKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSQLKeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCServerVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCServerVersionUpdated>()._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCServerVersionUpdated)
}
CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(const CMsgGCServerVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_version_ = from.server_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCServerVersionUpdated)
}

void CMsgGCServerVersionUpdated::SharedCtor() {
server_version_ = 0u;
}

CMsgGCServerVersionUpdated::~CMsgGCServerVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCServerVersionUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCServerVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCServerVersionUpdated::ArenaDtor(void* object) {
  CMsgGCServerVersionUpdated* _this = reinterpret_cast< CMsgGCServerVersionUpdated* >(object);
  (void)_this;
}
void CMsgGCServerVersionUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCServerVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCServerVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCServerVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCServerVersionUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCServerVersionUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCServerVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCServerVersionUpdated)
  return target;
}

size_t CMsgGCServerVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCServerVersionUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCServerVersionUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCServerVersionUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCServerVersionUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCServerVersionUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCServerVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCServerVersionUpdated::MergeFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_version()) {
    _internal_set_server_version(from._internal_server_version());
  }
}

void CMsgGCServerVersionUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCServerVersionUpdated::CopyFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCServerVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCServerVersionUpdated::InternalSwap(CMsgGCServerVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_version_, other->server_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCServerVersionUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientVersionUpdated>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientVersionUpdated)
}
CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(const CMsgGCClientVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientVersionUpdated)
}

void CMsgGCClientVersionUpdated::SharedCtor() {
client_version_ = 0u;
}

CMsgGCClientVersionUpdated::~CMsgGCClientVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCClientVersionUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCClientVersionUpdated::ArenaDtor(void* object) {
  CMsgGCClientVersionUpdated* _this = reinterpret_cast< CMsgGCClientVersionUpdated* >(object);
  (void)_this;
}
void CMsgGCClientVersionUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientVersionUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientVersionUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientVersionUpdated)
  return target;
}

size_t CMsgGCClientVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientVersionUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientVersionUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientVersionUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientVersionUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientVersionUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCClientVersionUpdated::MergeFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _internal_set_client_version(from._internal_client_version());
  }
}

void CMsgGCClientVersionUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientVersionUpdated::CopyFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCClientVersionUpdated::InternalSwap(CMsgGCClientVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientVersionUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCWebAPIAccountChanged::_Internal {
 public:
};

CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCWebAPIAccountChanged)
}
CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(const CMsgGCToGCWebAPIAccountChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCWebAPIAccountChanged)
}

void CMsgGCToGCWebAPIAccountChanged::SharedCtor() {
}

CMsgGCToGCWebAPIAccountChanged::~CMsgGCToGCWebAPIAccountChanged() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCWebAPIAccountChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCWebAPIAccountChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCWebAPIAccountChanged::ArenaDtor(void* object) {
  CMsgGCToGCWebAPIAccountChanged* _this = reinterpret_cast< CMsgGCToGCWebAPIAccountChanged* >(object);
  (void)_this;
}
void CMsgGCToGCWebAPIAccountChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCWebAPIAccountChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCWebAPIAccountChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCWebAPIAccountChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCWebAPIAccountChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCWebAPIAccountChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCWebAPIAccountChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCWebAPIAccountChanged)
  return target;
}

size_t CMsgGCToGCWebAPIAccountChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCWebAPIAccountChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCWebAPIAccountChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCWebAPIAccountChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCWebAPIAccountChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCWebAPIAccountChanged)
    MergeFrom(*source);
  }
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCWebAPIAccountChanged::IsInitialized() const {
  return true;
}

void CMsgGCToGCWebAPIAccountChanged::InternalSwap(CMsgGCToGCWebAPIAccountChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCWebAPIAccountChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRecipeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRecipeComponent>()._has_bits_);
  static void set_has_subject_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgRecipeComponent::CMsgRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRecipeComponent)
}
CMsgRecipeComponent::CMsgRecipeComponent(const CMsgRecipeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&subject_item_id_, &from.subject_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgRecipeComponent)
}

void CMsgRecipeComponent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subject_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
}

CMsgRecipeComponent::~CMsgRecipeComponent() {
  // @@protoc_insertion_point(destructor:CMsgRecipeComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRecipeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRecipeComponent::ArenaDtor(void* object) {
  CMsgRecipeComponent* _this = reinterpret_cast< CMsgRecipeComponent* >(object);
  (void)_this;
}
void CMsgRecipeComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&subject_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attribute_index_) -
        reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRecipeComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 subject_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subject_item_id(&has_bits);
          subject_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 attribute_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attribute_index(&has_bits);
          attribute_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRecipeComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_subject_item_id(), target);
  }

  // optional uint64 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attribute_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRecipeComponent)
  return target;
}

size_t CMsgRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRecipeComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 subject_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subject_item_id());
    }

    // optional uint64 attribute_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_attribute_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRecipeComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecipeComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRecipeComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgRecipeComponent::MergeFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subject_item_id_ = from.subject_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_index_ = from.attribute_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRecipeComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecipeComponent::CopyFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgRecipeComponent::InternalSwap(CMsgRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRecipeComponent, attribute_index_)
      + sizeof(CMsgRecipeComponent::attribute_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgRecipeComponent, subject_item_id_)>(
          reinterpret_cast<char*>(&subject_item_id_),
          reinterpret_cast<char*>(&other->subject_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRecipeComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgFulfillDynamicRecipeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFulfillDynamicRecipeComponent>()._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  consumption_components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgFulfillDynamicRecipeComponent)
}
CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(const CMsgFulfillDynamicRecipeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      consumption_components_(from.consumption_components_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tool_item_id_ = from.tool_item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgFulfillDynamicRecipeComponent)
}

void CMsgFulfillDynamicRecipeComponent::SharedCtor() {
tool_item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgFulfillDynamicRecipeComponent::~CMsgFulfillDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CMsgFulfillDynamicRecipeComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgFulfillDynamicRecipeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgFulfillDynamicRecipeComponent::ArenaDtor(void* object) {
  CMsgFulfillDynamicRecipeComponent* _this = reinterpret_cast< CMsgFulfillDynamicRecipeComponent* >(object);
  (void)_this;
}
void CMsgFulfillDynamicRecipeComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgFulfillDynamicRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgFulfillDynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFulfillDynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumption_components_.Clear();
  tool_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFulfillDynamicRecipeComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgRecipeComponent consumption_components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumption_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgFulfillDynamicRecipeComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFulfillDynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // repeated .CMsgRecipeComponent consumption_components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_consumption_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_consumption_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFulfillDynamicRecipeComponent)
  return target;
}

size_t CMsgFulfillDynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFulfillDynamicRecipeComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgRecipeComponent consumption_components = 2;
  total_size += 1UL * this->_internal_consumption_components_size();
  for (const auto& msg : this->consumption_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 tool_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tool_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFulfillDynamicRecipeComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgFulfillDynamicRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgFulfillDynamicRecipeComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgFulfillDynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumption_components_.MergeFrom(from.consumption_components_);
  if (from._internal_has_tool_item_id()) {
    _internal_set_tool_item_id(from._internal_tool_item_id());
  }
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFulfillDynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgFulfillDynamicRecipeComponent::InternalSwap(CMsgFulfillDynamicRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  consumption_components_.InternalSwap(&other->consumption_components_);
  swap(tool_item_id_, other->tool_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFulfillDynamicRecipeComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientMarketDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientMarketDataRequest>()._has_bits_);
  static void set_has_user_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientMarketDataRequest)
}
CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(const CMsgGCClientMarketDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_currency_ = from.user_currency_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientMarketDataRequest)
}

void CMsgGCClientMarketDataRequest::SharedCtor() {
user_currency_ = 0u;
}

CMsgGCClientMarketDataRequest::~CMsgGCClientMarketDataRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCClientMarketDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientMarketDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCClientMarketDataRequest::ArenaDtor(void* object) {
  CMsgGCClientMarketDataRequest* _this = reinterpret_cast< CMsgGCClientMarketDataRequest* >(object);
  (void)_this;
}
void CMsgGCClientMarketDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientMarketDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientMarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientMarketDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_currency_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientMarketDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 user_currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_currency(&has_bits);
          user_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientMarketDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientMarketDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_currency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientMarketDataRequest)
  return target;
}

size_t CMsgGCClientMarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientMarketDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 user_currency = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_currency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientMarketDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientMarketDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientMarketDataRequest)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataRequest::MergeFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_currency()) {
    _internal_set_user_currency(from._internal_user_currency());
  }
}

void CMsgGCClientMarketDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataRequest::CopyFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataRequest::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataRequest::InternalSwap(CMsgGCClientMarketDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_currency_, other->user_currency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientMarketDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientMarketDataEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientMarketDataEntry>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_sell_listings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price_in_local_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientMarketDataEntry)
}
CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(const CMsgGCClientMarketDataEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_in_local_currency_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientMarketDataEntry)
}

void CMsgGCClientMarketDataEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_in_local_currency_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
}

CMsgGCClientMarketDataEntry::~CMsgGCClientMarketDataEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCClientMarketDataEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientMarketDataEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCClientMarketDataEntry::ArenaDtor(void* object) {
  CMsgGCClientMarketDataEntry* _this = reinterpret_cast< CMsgGCClientMarketDataEntry* >(object);
  (void)_this;
}
void CMsgGCClientMarketDataEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientMarketDataEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientMarketDataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientMarketDataEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_in_local_currency_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientMarketDataEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_sell_listings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_sell_listings(&has_bits);
          item_sell_listings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price_in_local_currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_price_in_local_currency(&has_bits);
          price_in_local_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientMarketDataEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientMarketDataEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional uint32 item_sell_listings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_sell_listings(), target);
  }

  // optional uint32 price_in_local_currency = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price_in_local_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientMarketDataEntry)
  return target;
}

size_t CMsgGCClientMarketDataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientMarketDataEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional uint32 item_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_quality());
    }

    // optional uint32 item_sell_listings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_sell_listings());
    }

    // optional uint32 price_in_local_currency = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price_in_local_currency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketDataEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientMarketDataEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientMarketDataEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientMarketDataEntry)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataEntry::MergeFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_sell_listings_ = from.item_sell_listings_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_in_local_currency_ = from.price_in_local_currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCClientMarketDataEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataEntry::CopyFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataEntry::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataEntry::InternalSwap(CMsgGCClientMarketDataEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCClientMarketDataEntry, price_in_local_currency_)
      + sizeof(CMsgGCClientMarketDataEntry::price_in_local_currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCClientMarketDataEntry, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientMarketDataEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientMarketData::_Internal {
 public:
};

CMsgGCClientMarketData::CMsgGCClientMarketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientMarketData)
}
CMsgGCClientMarketData::CMsgGCClientMarketData(const CMsgGCClientMarketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientMarketData)
}

void CMsgGCClientMarketData::SharedCtor() {
}

CMsgGCClientMarketData::~CMsgGCClientMarketData() {
  // @@protoc_insertion_point(destructor:CMsgGCClientMarketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientMarketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCClientMarketData::ArenaDtor(void* object) {
  CMsgGCClientMarketData* _this = reinterpret_cast< CMsgGCClientMarketData* >(object);
  (void)_this;
}
void CMsgGCClientMarketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientMarketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCClientMarketDataEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientMarketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientMarketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCClientMarketDataEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientMarketData)
  return target;
}

size_t CMsgGCClientMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientMarketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCClientMarketDataEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientMarketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientMarketData)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketData::MergeFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCClientMarketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketData::CopyFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketData::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketData::InternalSwap(CMsgGCClientMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientMarketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgExtractGems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExtractGems>()._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_socket_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgExtractGems::CMsgExtractGems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgExtractGems)
}
CMsgExtractGems::CMsgExtractGems(const CMsgExtractGems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_socket_id_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_socket_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgExtractGems)
}

void CMsgExtractGems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tool_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_item_id_));
item_socket_id_ = 65535u;
}

CMsgExtractGems::~CMsgExtractGems() {
  // @@protoc_insertion_point(destructor:CMsgExtractGems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgExtractGems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgExtractGems::ArenaDtor(void* object) {
  CMsgExtractGems* _this = reinterpret_cast< CMsgExtractGems* >(object);
  (void)_this;
}
void CMsgExtractGems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgExtractGems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExtractGems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExtractGems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_item_id_));
    item_socket_id_ = 65535u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExtractGems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_socket_id = 3 [default = 65535];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_socket_id(&has_bits);
          item_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExtractGems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExtractGems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExtractGems)
  return target;
}

size_t CMsgExtractGems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExtractGems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

    // optional uint32 item_socket_id = 3 [default = 65535];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_socket_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExtractGems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExtractGems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExtractGems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExtractGems)
    MergeFrom(*source);
  }
}

void CMsgExtractGems::MergeFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_socket_id_ = from.item_socket_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGems::CopyFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGems::IsInitialized() const {
  return true;
}

void CMsgExtractGems::InternalSwap(CMsgExtractGems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExtractGems, item_item_id_)
      + sizeof(CMsgExtractGems::item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgExtractGems, tool_item_id_)>(
          reinterpret_cast<char*>(&tool_item_id_),
          reinterpret_cast<char*>(&other->tool_item_id_));
  swap(item_socket_id_, other->item_socket_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExtractGems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgExtractGemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgExtractGemsResponse>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgExtractGemsResponse::CMsgExtractGemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgExtractGemsResponse)
}
CMsgExtractGemsResponse::CMsgExtractGemsResponse(const CMsgExtractGemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgExtractGemsResponse)
}

void CMsgExtractGemsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgExtractGemsResponse::~CMsgExtractGemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgExtractGemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgExtractGemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgExtractGemsResponse::ArenaDtor(void* object) {
  CMsgExtractGemsResponse* _this = reinterpret_cast< CMsgExtractGemsResponse* >(object);
  (void)_this;
}
void CMsgExtractGemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgExtractGemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgExtractGemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgExtractGemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgExtractGemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgExtractGemsResponse_EExtractGems_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgExtractGemsResponse_EExtractGems>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgExtractGemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgExtractGemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgExtractGemsResponse)
  return target;
}

size_t CMsgExtractGemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgExtractGemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExtractGemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgExtractGemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgExtractGemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgExtractGemsResponse)
    MergeFrom(*source);
  }
}

void CMsgExtractGemsResponse::MergeFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGemsResponse::CopyFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGemsResponse::IsInitialized() const {
  return true;
}

void CMsgExtractGemsResponse::InternalSwap(CMsgExtractGemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgExtractGemsResponse, response_)
      + sizeof(CMsgExtractGemsResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgExtractGemsResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgExtractGemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddSocket>()._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unusual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAddSocket::CMsgAddSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddSocket)
}
CMsgAddSocket::CMsgAddSocket(const CMsgAddSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unusual_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddSocket)
}

void CMsgAddSocket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tool_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unusual_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
}

CMsgAddSocket::~CMsgAddSocket() {
  // @@protoc_insertion_point(destructor:CMsgAddSocket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAddSocket::ArenaDtor(void* object) {
  CMsgAddSocket* _this = reinterpret_cast< CMsgAddSocket* >(object);
  (void)_this;
}
void CMsgAddSocket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unusual_) -
        reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddSocket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unusual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unusual(&has_bits);
          unusual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddSocket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unusual(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddSocket)
  return target;
}

size_t CMsgAddSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddSocket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

    // optional bool unusual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddSocket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddSocket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddSocket)
    MergeFrom(*source);
  }
}

void CMsgAddSocket::MergeFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unusual_ = from.unusual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocket::CopyFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocket::IsInitialized() const {
  return true;
}

void CMsgAddSocket::InternalSwap(CMsgAddSocket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddSocket, unusual_)
      + sizeof(CMsgAddSocket::unusual_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddSocket, tool_item_id_)>(
          reinterpret_cast<char*>(&tool_item_id_),
          reinterpret_cast<char*>(&other->tool_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddSocket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddSocketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddSocketResponse>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddSocketResponse::CMsgAddSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updated_socket_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddSocketResponse)
}
CMsgAddSocketResponse::CMsgAddSocketResponse(const CMsgAddSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddSocketResponse)
}

void CMsgAddSocketResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgAddSocketResponse::~CMsgAddSocketResponse() {
  // @@protoc_insertion_point(destructor:CMsgAddSocketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAddSocketResponse::ArenaDtor(void* object) {
  CMsgAddSocketResponse* _this = reinterpret_cast< CMsgAddSocketResponse* >(object);
  (void)_this;
}
void CMsgAddSocketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_socket_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddSocketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 updated_socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_updated_socket_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_updated_socket_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgAddSocketResponse_EAddSocket_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgAddSocketResponse_EAddSocket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddSocketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->_internal_updated_socket_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_socket_index(i), target);
  }

  // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddSocketResponse)
  return target;
}

size_t CMsgAddSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddSocketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddSocketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddSocketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddSocketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddSocketResponse::MergeFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocketResponse::CopyFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddSocketResponse::InternalSwap(CMsgAddSocketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddSocketResponse, response_)
      + sizeof(CMsgAddSocketResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddSocketResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddSocketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddItemToSocketData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocketData>()._has_bits_);
  static void set_has_gem_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddItemToSocketData::CMsgAddItemToSocketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocketData)
}
CMsgAddItemToSocketData::CMsgAddItemToSocketData(const CMsgAddItemToSocketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gem_item_id_, &from.gem_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocketData)
}

void CMsgAddItemToSocketData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gem_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
}

CMsgAddItemToSocketData::~CMsgAddItemToSocketData() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddItemToSocketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAddItemToSocketData::ArenaDtor(void* object) {
  CMsgAddItemToSocketData* _this = reinterpret_cast< CMsgAddItemToSocketData* >(object);
  (void)_this;
}
void CMsgAddItemToSocketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddItemToSocketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddItemToSocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gem_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socket_index_) -
        reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 gem_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gem_item_id(&has_bits);
          gem_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_socket_index(&has_bits);
          socket_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddItemToSocketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gem_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocketData)
  return target;
}

size_t CMsgAddItemToSocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 gem_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gem_item_id());
    }

    // optional uint32 socket_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_socket_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddItemToSocketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddItemToSocketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddItemToSocketData)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketData::MergeFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gem_item_id_ = from.gem_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketData::CopyFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketData::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketData::InternalSwap(CMsgAddItemToSocketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketData, socket_index_)
      + sizeof(CMsgAddItemToSocketData::socket_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketData, gem_item_id_)>(
          reinterpret_cast<char*>(&gem_item_id_),
          reinterpret_cast<char*>(&other->gem_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddItemToSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocket>()._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAddItemToSocket::CMsgAddItemToSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gems_to_socket_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocket)
}
CMsgAddItemToSocket::CMsgAddItemToSocket(const CMsgAddItemToSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gems_to_socket_(from.gems_to_socket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_item_id_ = from.item_item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocket)
}

void CMsgAddItemToSocket::SharedCtor() {
item_item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgAddItemToSocket::~CMsgAddItemToSocket() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddItemToSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAddItemToSocket::ArenaDtor(void* object) {
  CMsgAddItemToSocket* _this = reinterpret_cast< CMsgAddItemToSocket* >(object);
  (void)_this;
}
void CMsgAddItemToSocket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddItemToSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddItemToSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gems_to_socket_.Clear();
  item_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gems_to_socket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddItemToSocket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gems_to_socket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gems_to_socket(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocket)
  return target;
}

size_t CMsgAddItemToSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAddItemToSocketData gems_to_socket = 2;
  total_size += 1UL * this->_internal_gems_to_socket_size();
  for (const auto& msg : this->gems_to_socket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 item_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddItemToSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddItemToSocket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddItemToSocket)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocket::MergeFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gems_to_socket_.MergeFrom(from.gems_to_socket_);
  if (from._internal_has_item_item_id()) {
    _internal_set_item_item_id(from._internal_item_item_id());
  }
}

void CMsgAddItemToSocket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocket::CopyFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocket::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocket::InternalSwap(CMsgAddItemToSocket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gems_to_socket_.InternalSwap(&other->gems_to_socket_);
  swap(item_item_id_, other->item_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAddItemToSocketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAddItemToSocketResponse>()._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updated_socket_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAddItemToSocketResponse)
}
CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(const CMsgAddItemToSocketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgAddItemToSocketResponse)
}

void CMsgAddItemToSocketResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
}

CMsgAddItemToSocketResponse::~CMsgAddItemToSocketResponse() {
  // @@protoc_insertion_point(destructor:CMsgAddItemToSocketResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAddItemToSocketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAddItemToSocketResponse::ArenaDtor(void* object) {
  CMsgAddItemToSocketResponse* _this = reinterpret_cast< CMsgAddItemToSocketResponse* >(object);
  (void)_this;
}
void CMsgAddItemToSocketResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAddItemToSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAddItemToSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAddItemToSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_socket_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAddItemToSocketResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 updated_socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_updated_socket_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_updated_socket_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgAddItemToSocketResponse_EAddGem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgAddItemToSocketResponse_EAddGem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAddItemToSocketResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAddItemToSocketResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->_internal_updated_socket_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_updated_socket_index(i), target);
  }

  // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAddItemToSocketResponse)
  return target;
}

size_t CMsgAddItemToSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAddItemToSocketResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

    // optional .CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocketResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAddItemToSocketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAddItemToSocketResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAddItemToSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketResponse::MergeFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketResponse::CopyFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketResponse::InternalSwap(CMsgAddItemToSocketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketResponse, response_)
      + sizeof(CMsgAddItemToSocketResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgAddItemToSocketResponse, item_item_id_)>(
          reinterpret_cast<char*>(&item_item_id_),
          reinterpret_cast<char*>(&other->item_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAddItemToSocketResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgResetStrangeGemCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResetStrangeGemCount>()._has_bits_);
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgResetStrangeGemCount)
}
CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(const CMsgResetStrangeGemCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgResetStrangeGemCount)
}

void CMsgResetStrangeGemCount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
}

CMsgResetStrangeGemCount::~CMsgResetStrangeGemCount() {
  // @@protoc_insertion_point(destructor:CMsgResetStrangeGemCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgResetStrangeGemCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgResetStrangeGemCount::ArenaDtor(void* object) {
  CMsgResetStrangeGemCount* _this = reinterpret_cast< CMsgResetStrangeGemCount* >(object);
  (void)_this;
}
void CMsgResetStrangeGemCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgResetStrangeGemCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgResetStrangeGemCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResetStrangeGemCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socket_index_) -
        reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResetStrangeGemCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 socket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_socket_index(&has_bits);
          socket_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgResetStrangeGemCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResetStrangeGemCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_socket_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResetStrangeGemCount)
  return target;
}

size_t CMsgResetStrangeGemCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResetStrangeGemCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

    // optional uint32 socket_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_socket_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResetStrangeGemCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgResetStrangeGemCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgResetStrangeGemCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgResetStrangeGemCount)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCount::MergeFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResetStrangeGemCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCount::CopyFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCount::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCount::InternalSwap(CMsgResetStrangeGemCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgResetStrangeGemCount, socket_index_)
      + sizeof(CMsgResetStrangeGemCount::socket_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgResetStrangeGemCount, item_item_id_)>(
          reinterpret_cast<char*>(&item_item_id_),
          reinterpret_cast<char*>(&other->item_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResetStrangeGemCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgResetStrangeGemCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResetStrangeGemCountResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgResetStrangeGemCountResponse)
}
CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(const CMsgResetStrangeGemCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgResetStrangeGemCountResponse)
}

void CMsgResetStrangeGemCountResponse::SharedCtor() {
response_ = 0;
}

CMsgResetStrangeGemCountResponse::~CMsgResetStrangeGemCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgResetStrangeGemCountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgResetStrangeGemCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgResetStrangeGemCountResponse::ArenaDtor(void* object) {
  CMsgResetStrangeGemCountResponse* _this = reinterpret_cast< CMsgResetStrangeGemCountResponse* >(object);
  (void)_this;
}
void CMsgResetStrangeGemCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgResetStrangeGemCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgResetStrangeGemCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResetStrangeGemCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResetStrangeGemCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgResetStrangeGemCountResponse_EResetGem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgResetStrangeGemCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResetStrangeGemCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResetStrangeGemCountResponse)
  return target;
}

size_t CMsgResetStrangeGemCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResetStrangeGemCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgResetStrangeGemCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgResetStrangeGemCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgResetStrangeGemCountResponse)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCountResponse::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCountResponse::InternalSwap(CMsgResetStrangeGemCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResetStrangeGemCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPollFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollFileRequest>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollFileRequest)
}
CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(const CMsgGCToClientPollFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&poll_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollFileRequest)
}

void CMsgGCToClientPollFileRequest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&poll_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
}

CMsgGCToClientPollFileRequest::~CMsgGCToClientPollFileRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollFileRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPollFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollFileRequest::ArenaDtor(void* object) {
  CMsgGCToClientPollFileRequest* _this = reinterpret_cast< CMsgGCToClientPollFileRequest* >(object);
  (void)_this;
}
void CMsgGCToClientPollFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPollFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPollFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poll_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPollFileRequest.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poll_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_poll_id(&has_bits);
          poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPollFileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollFileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPollFileRequest.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_poll_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollFileRequest)
  return target;
}

size_t CMsgGCToClientPollFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollFileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_name());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

    // optional uint32 poll_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollFileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPollFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPollFileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPollFileRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileRequest::MergeFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_file_name(from._internal_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileRequest::CopyFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileRequest::InternalSwap(CMsgGCToClientPollFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileRequest, poll_id_)
      + sizeof(CMsgGCToClientPollFileRequest::poll_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileRequest, client_version_)>(
          reinterpret_cast<char*>(&client_version_),
          reinterpret_cast<char*>(&other->client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollFileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPollFileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollFileResponse>()._has_bits_);
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollFileResponse)
}
CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(const CMsgGCToClientPollFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&poll_id_, &from.poll_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollFileResponse)
}

void CMsgGCToClientPollFileResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&poll_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
}

CMsgGCToClientPollFileResponse::~CMsgGCToClientPollFileResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPollFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientPollFileResponse::ArenaDtor(void* object) {
  CMsgGCToClientPollFileResponse* _this = reinterpret_cast< CMsgGCToClientPollFileResponse* >(object);
  (void)_this;
}
void CMsgGCToClientPollFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPollFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPollFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&poll_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 poll_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_poll_id(&has_bits);
          poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPollFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poll_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollFileResponse)
  return target;
}

size_t CMsgGCToClientPollFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 poll_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_id());
    }

    // optional uint32 file_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPollFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPollFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPollFileResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileResponse::MergeFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      poll_id_ = from.poll_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileResponse::CopyFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileResponse::InternalSwap(CMsgGCToClientPollFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileResponse, file_size_)
      + sizeof(CMsgGCToClientPollFileResponse::file_size_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPollFileResponse, poll_id_)>(
          reinterpret_cast<char*>(&poll_id_),
          reinterpret_cast<char*>(&other->poll_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCPerformManualOp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCPerformManualOp>()._has_bits_);
  static void set_has_op_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPerformManualOp)
}
CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(const CMsgGCToGCPerformManualOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_id_, &from.op_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_code_) -
    reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPerformManualOp)
}

void CMsgGCToGCPerformManualOp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_code_) -
    reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
}

CMsgGCToGCPerformManualOp::~CMsgGCToGCPerformManualOp() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPerformManualOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCPerformManualOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCPerformManualOp::ArenaDtor(void* object) {
  CMsgGCToGCPerformManualOp* _this = reinterpret_cast< CMsgGCToGCPerformManualOp* >(object);
  (void)_this;
}
void CMsgGCToGCPerformManualOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCPerformManualOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCPerformManualOp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPerformManualOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&op_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_code_) -
        reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPerformManualOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_op_id(&has_bits);
          op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 group_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_group_code(&has_bits);
          group_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCPerformManualOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPerformManualOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 op_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_op_id(), target);
  }

  // optional uint32 group_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPerformManualOp)
  return target;
}

size_t CMsgGCToGCPerformManualOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPerformManualOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 op_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_op_id());
    }

    // optional uint32 group_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_group_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPerformManualOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCPerformManualOp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPerformManualOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCPerformManualOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCPerformManualOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCPerformManualOp)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPerformManualOp::MergeFrom(const CMsgGCToGCPerformManualOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPerformManualOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      op_id_ = from.op_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_code_ = from.group_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCPerformManualOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCPerformManualOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPerformManualOp::CopyFrom(const CMsgGCToGCPerformManualOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPerformManualOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOp::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOp::InternalSwap(CMsgGCToGCPerformManualOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOp, group_code_)
      + sizeof(CMsgGCToGCPerformManualOp::group_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOp, op_id_)>(
          reinterpret_cast<char*>(&op_id_),
          reinterpret_cast<char*>(&other->op_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPerformManualOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCPerformManualOpCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCPerformManualOpCompleted>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPerformManualOpCompleted)
}
CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(const CMsgGCToGCPerformManualOpCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPerformManualOpCompleted)
}

void CMsgGCToGCPerformManualOpCompleted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
}

CMsgGCToGCPerformManualOpCompleted::~CMsgGCToGCPerformManualOpCompleted() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPerformManualOpCompleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCPerformManualOpCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCPerformManualOpCompleted::ArenaDtor(void* object) {
  CMsgGCToGCPerformManualOpCompleted* _this = reinterpret_cast< CMsgGCToGCPerformManualOpCompleted* >(object);
  (void)_this;
}
void CMsgGCToGCPerformManualOpCompleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCPerformManualOpCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCPerformManualOpCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPerformManualOpCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_gc_) -
        reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPerformManualOpCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_gc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_gc(&has_bits);
          source_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCPerformManualOpCompleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPerformManualOpCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional uint32 source_gc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_gc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPerformManualOpCompleted)
  return target;
}

size_t CMsgGCToGCPerformManualOpCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPerformManualOpCompleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 source_gc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_gc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPerformManualOpCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCPerformManualOpCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPerformManualOpCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCPerformManualOpCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCPerformManualOpCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCPerformManualOpCompleted)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPerformManualOpCompleted::MergeFrom(const CMsgGCToGCPerformManualOpCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPerformManualOpCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_gc_ = from.source_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCPerformManualOpCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCPerformManualOpCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPerformManualOpCompleted::CopyFrom(const CMsgGCToGCPerformManualOpCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPerformManualOpCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOpCompleted::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOpCompleted::InternalSwap(CMsgGCToGCPerformManualOpCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOpCompleted, source_gc_)
      + sizeof(CMsgGCToGCPerformManualOpCompleted::source_gc_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCPerformManualOpCompleted, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPerformManualOpCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCReloadServerRegionSettings::_Internal {
 public:
};

CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCReloadServerRegionSettings)
}
CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(const CMsgGCToGCReloadServerRegionSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCReloadServerRegionSettings)
}

void CMsgGCToGCReloadServerRegionSettings::SharedCtor() {
}

CMsgGCToGCReloadServerRegionSettings::~CMsgGCToGCReloadServerRegionSettings() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCReloadServerRegionSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCReloadServerRegionSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCReloadServerRegionSettings::ArenaDtor(void* object) {
  CMsgGCToGCReloadServerRegionSettings* _this = reinterpret_cast< CMsgGCToGCReloadServerRegionSettings* >(object);
  (void)_this;
}
void CMsgGCToGCReloadServerRegionSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCReloadServerRegionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCReloadServerRegionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCReloadServerRegionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCReloadServerRegionSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCReloadServerRegionSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCReloadServerRegionSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCReloadServerRegionSettings)
  return target;
}

size_t CMsgGCToGCReloadServerRegionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCReloadServerRegionSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCReloadServerRegionSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCReloadServerRegionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCReloadServerRegionSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCReloadServerRegionSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCReloadServerRegionSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCReloadServerRegionSettings)
    MergeFrom(*source);
  }
}

void CMsgGCToGCReloadServerRegionSettings::MergeFrom(const CMsgGCToGCReloadServerRegionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCReloadServerRegionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCReloadServerRegionSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCReloadServerRegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCReloadServerRegionSettings::CopyFrom(const CMsgGCToGCReloadServerRegionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCReloadServerRegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCReloadServerRegionSettings::IsInitialized() const {
  return true;
}

void CMsgGCToGCReloadServerRegionSettings::InternalSwap(CMsgGCToGCReloadServerRegionSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCReloadServerRegionSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCAdditionalWelcomeMsgList::_Internal {
 public:
};

void CMsgGCAdditionalWelcomeMsgList::clear_welcome_messages() {
  welcome_messages_.Clear();
}
CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  welcome_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCAdditionalWelcomeMsgList)
}
CMsgGCAdditionalWelcomeMsgList::CMsgGCAdditionalWelcomeMsgList(const CMsgGCAdditionalWelcomeMsgList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      welcome_messages_(from.welcome_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCAdditionalWelcomeMsgList)
}

void CMsgGCAdditionalWelcomeMsgList::SharedCtor() {
}

CMsgGCAdditionalWelcomeMsgList::~CMsgGCAdditionalWelcomeMsgList() {
  // @@protoc_insertion_point(destructor:CMsgGCAdditionalWelcomeMsgList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCAdditionalWelcomeMsgList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCAdditionalWelcomeMsgList::ArenaDtor(void* object) {
  CMsgGCAdditionalWelcomeMsgList* _this = reinterpret_cast< CMsgGCAdditionalWelcomeMsgList* >(object);
  (void)_this;
}
void CMsgGCAdditionalWelcomeMsgList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCAdditionalWelcomeMsgList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCAdditionalWelcomeMsgList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCAdditionalWelcomeMsgList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  welcome_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCAdditionalWelcomeMsgList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CExtraMsgBlock welcome_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_welcome_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCAdditionalWelcomeMsgList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCAdditionalWelcomeMsgList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock welcome_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_welcome_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_welcome_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCAdditionalWelcomeMsgList)
  return target;
}

size_t CMsgGCAdditionalWelcomeMsgList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCAdditionalWelcomeMsgList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock welcome_messages = 1;
  total_size += 1UL * this->_internal_welcome_messages_size();
  for (const auto& msg : this->welcome_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCAdditionalWelcomeMsgList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCAdditionalWelcomeMsgList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCAdditionalWelcomeMsgList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCAdditionalWelcomeMsgList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCAdditionalWelcomeMsgList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCAdditionalWelcomeMsgList)
    MergeFrom(*source);
  }
}

void CMsgGCAdditionalWelcomeMsgList::MergeFrom(const CMsgGCAdditionalWelcomeMsgList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCAdditionalWelcomeMsgList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  welcome_messages_.MergeFrom(from.welcome_messages_);
}

void CMsgGCAdditionalWelcomeMsgList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCAdditionalWelcomeMsgList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCAdditionalWelcomeMsgList::CopyFrom(const CMsgGCAdditionalWelcomeMsgList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCAdditionalWelcomeMsgList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCAdditionalWelcomeMsgList::IsInitialized() const {
  return true;
}

void CMsgGCAdditionalWelcomeMsgList::InternalSwap(CMsgGCAdditionalWelcomeMsgList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  welcome_messages_.InternalSwap(&other->welcome_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCAdditionalWelcomeMsgList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyRemoteConVars_ConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyRemoteConVars_ConVar>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyRemoteConVars.ConVar)
}
CMsgApplyRemoteConVars_ConVar::CMsgApplyRemoteConVars_ConVar(const CMsgApplyRemoteConVars_ConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  ::memcpy(&version_min_, &from.version_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&version_min_)) + sizeof(platform_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyRemoteConVars.ConVar)
}

void CMsgApplyRemoteConVars_ConVar::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&version_min_)) + sizeof(platform_));
}

CMsgApplyRemoteConVars_ConVar::~CMsgApplyRemoteConVars_ConVar() {
  // @@protoc_insertion_point(destructor:CMsgApplyRemoteConVars.ConVar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyRemoteConVars_ConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgApplyRemoteConVars_ConVar::ArenaDtor(void* object) {
  CMsgApplyRemoteConVars_ConVar* _this = reinterpret_cast< CMsgApplyRemoteConVars_ConVar* >(object);
  (void)_this;
}
void CMsgApplyRemoteConVars_ConVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyRemoteConVars_ConVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyRemoteConVars_ConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyRemoteConVars.ConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platform_) -
        reinterpret_cast<char*>(&version_min_)) + sizeof(platform_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyRemoteConVars_ConVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgApplyRemoteConVars.ConVar.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgApplyRemoteConVars.ConVar.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version_min(&has_bits);
          version_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 version_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version_max(&has_bits);
          version_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EDACPlatform platform = 5 [default = k_eDACPlatform_None];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDACPlatform_IsValid(val))) {
            _internal_set_platform(static_cast<::EDACPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyRemoteConVars_ConVar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyRemoteConVars.ConVar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgApplyRemoteConVars.ConVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgApplyRemoteConVars.ConVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional uint32 version_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_min(), target);
  }

  // optional uint32 version_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version_max(), target);
  }

  // optional .EDACPlatform platform = 5 [default = k_eDACPlatform_None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyRemoteConVars.ConVar)
  return target;
}

size_t CMsgApplyRemoteConVars_ConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyRemoteConVars.ConVar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional uint32 version_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_min());
    }

    // optional uint32 version_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version_max());
    }

    // optional .EDACPlatform platform = 5 [default = k_eDACPlatform_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyRemoteConVars_ConVar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyRemoteConVars.ConVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyRemoteConVars_ConVar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyRemoteConVars_ConVar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyRemoteConVars.ConVar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyRemoteConVars.ConVar)
    MergeFrom(*source);
  }
}

void CMsgApplyRemoteConVars_ConVar::MergeFrom(const CMsgApplyRemoteConVars_ConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyRemoteConVars.ConVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      version_min_ = from.version_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_max_ = from.version_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      platform_ = from.platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyRemoteConVars_ConVar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyRemoteConVars.ConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyRemoteConVars_ConVar::CopyFrom(const CMsgApplyRemoteConVars_ConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyRemoteConVars.ConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyRemoteConVars_ConVar::IsInitialized() const {
  return true;
}

void CMsgApplyRemoteConVars_ConVar::InternalSwap(CMsgApplyRemoteConVars_ConVar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyRemoteConVars_ConVar, platform_)
      + sizeof(CMsgApplyRemoteConVars_ConVar::platform_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyRemoteConVars_ConVar, version_min_)>(
          reinterpret_cast<char*>(&version_min_),
          reinterpret_cast<char*>(&other->version_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyRemoteConVars_ConVar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgApplyRemoteConVars::_Internal {
 public:
};

CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  con_vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyRemoteConVars)
}
CMsgApplyRemoteConVars::CMsgApplyRemoteConVars(const CMsgApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      con_vars_(from.con_vars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgApplyRemoteConVars)
}

void CMsgApplyRemoteConVars::SharedCtor() {
}

CMsgApplyRemoteConVars::~CMsgApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgApplyRemoteConVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyRemoteConVars::ArenaDtor(void* object) {
  CMsgApplyRemoteConVars* _this = reinterpret_cast< CMsgApplyRemoteConVars* >(object);
  (void)_this;
}
void CMsgApplyRemoteConVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyRemoteConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  con_vars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyRemoteConVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_con_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyRemoteConVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_con_vars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_con_vars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyRemoteConVars)
  return target;
}

size_t CMsgApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyRemoteConVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgApplyRemoteConVars.ConVar con_vars = 1;
  total_size += 1UL * this->_internal_con_vars_size();
  for (const auto& msg : this->con_vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyRemoteConVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyRemoteConVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyRemoteConVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyRemoteConVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyRemoteConVars)
    MergeFrom(*source);
  }
}

void CMsgApplyRemoteConVars::MergeFrom(const CMsgApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  con_vars_.MergeFrom(from.con_vars_);
}

void CMsgApplyRemoteConVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyRemoteConVars::CopyFrom(const CMsgApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgApplyRemoteConVars::InternalSwap(CMsgApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  con_vars_.InternalSwap(&other->con_vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyRemoteConVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientApplyRemoteConVars::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientApplyRemoteConVars>()._has_bits_);
  static const ::CMsgApplyRemoteConVars& msg(const CMsgGCToClientApplyRemoteConVars* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgApplyRemoteConVars&
CMsgGCToClientApplyRemoteConVars::_Internal::msg(const CMsgGCToClientApplyRemoteConVars* msg) {
  return *msg->msg_;
}
CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientApplyRemoteConVars)
}
CMsgGCToClientApplyRemoteConVars::CMsgGCToClientApplyRemoteConVars(const CMsgGCToClientApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::CMsgApplyRemoteConVars(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientApplyRemoteConVars)
}

void CMsgGCToClientApplyRemoteConVars::SharedCtor() {
msg_ = nullptr;
}

CMsgGCToClientApplyRemoteConVars::~CMsgGCToClientApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientApplyRemoteConVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void CMsgGCToClientApplyRemoteConVars::ArenaDtor(void* object) {
  CMsgGCToClientApplyRemoteConVars* _this = reinterpret_cast< CMsgGCToClientApplyRemoteConVars* >(object);
  (void)_this;
}
void CMsgGCToClientApplyRemoteConVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientApplyRemoteConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != nullptr);
    msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientApplyRemoteConVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgApplyRemoteConVars msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientApplyRemoteConVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgApplyRemoteConVars msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientApplyRemoteConVars)
  return target;
}

size_t CMsgGCToClientApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientApplyRemoteConVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgApplyRemoteConVars msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientApplyRemoteConVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientApplyRemoteConVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientApplyRemoteConVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientApplyRemoteConVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientApplyRemoteConVars)
    MergeFrom(*source);
  }
}

void CMsgGCToClientApplyRemoteConVars::MergeFrom(const CMsgGCToClientApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::CMsgApplyRemoteConVars::MergeFrom(from._internal_msg());
  }
}

void CMsgGCToClientApplyRemoteConVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientApplyRemoteConVars::CopyFrom(const CMsgGCToClientApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgGCToClientApplyRemoteConVars::InternalSwap(CMsgGCToClientApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientApplyRemoteConVars::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToServerApplyRemoteConVars::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerApplyRemoteConVars>()._has_bits_);
  static const ::CMsgApplyRemoteConVars& msg(const CMsgGCToServerApplyRemoteConVars* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgApplyRemoteConVars&
CMsgGCToServerApplyRemoteConVars::_Internal::msg(const CMsgGCToServerApplyRemoteConVars* msg) {
  return *msg->msg_;
}
CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerApplyRemoteConVars)
}
CMsgGCToServerApplyRemoteConVars::CMsgGCToServerApplyRemoteConVars(const CMsgGCToServerApplyRemoteConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::CMsgApplyRemoteConVars(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerApplyRemoteConVars)
}

void CMsgGCToServerApplyRemoteConVars::SharedCtor() {
msg_ = nullptr;
}

CMsgGCToServerApplyRemoteConVars::~CMsgGCToServerApplyRemoteConVars() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerApplyRemoteConVars)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToServerApplyRemoteConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void CMsgGCToServerApplyRemoteConVars::ArenaDtor(void* object) {
  CMsgGCToServerApplyRemoteConVars* _this = reinterpret_cast< CMsgGCToServerApplyRemoteConVars* >(object);
  (void)_this;
}
void CMsgGCToServerApplyRemoteConVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToServerApplyRemoteConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToServerApplyRemoteConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != nullptr);
    msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerApplyRemoteConVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgApplyRemoteConVars msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToServerApplyRemoteConVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerApplyRemoteConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgApplyRemoteConVars msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerApplyRemoteConVars)
  return target;
}

size_t CMsgGCToServerApplyRemoteConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerApplyRemoteConVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgApplyRemoteConVars msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToServerApplyRemoteConVars::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToServerApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToServerApplyRemoteConVars* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToServerApplyRemoteConVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToServerApplyRemoteConVars)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToServerApplyRemoteConVars)
    MergeFrom(*source);
  }
}

void CMsgGCToServerApplyRemoteConVars::MergeFrom(const CMsgGCToServerApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerApplyRemoteConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::CMsgApplyRemoteConVars::MergeFrom(from._internal_msg());
  }
}

void CMsgGCToServerApplyRemoteConVars::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToServerApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToServerApplyRemoteConVars::CopyFrom(const CMsgGCToServerApplyRemoteConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerApplyRemoteConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerApplyRemoteConVars::IsInitialized() const {
  return true;
}

void CMsgGCToServerApplyRemoteConVars::InternalSwap(CMsgGCToServerApplyRemoteConVars* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerApplyRemoteConVars::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGCStorePurchaseInit_LineItem* Arena::CreateMaybeMessage< ::CGCStorePurchaseInit_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCStorePurchaseInit_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInit* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInitResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSystemBroadcast* Arena::CreateMaybeMessage< ::CMsgSystemBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSystemBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientPingData* Arena::CreateMaybeMessage< ::CMsgClientPingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientPingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInviteToParty* Arena::CreateMaybeMessage< ::CMsgInviteToParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInviteToParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInviteToLobby* Arena::CreateMaybeMessage< ::CMsgInviteToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInviteToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInvitationCreated* Arena::CreateMaybeMessage< ::CMsgInvitationCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInvitationCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyInviteResponse* Arena::CreateMaybeMessage< ::CMsgPartyInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyInviteResponse* Arena::CreateMaybeMessage< ::CMsgLobbyInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKickFromParty* Arena::CreateMaybeMessage< ::CMsgKickFromParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKickFromParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaveParty* Arena::CreateMaybeMessage< ::CMsgLeaveParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaveParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameInstallStatus* Arena::CreateMaybeMessage< ::CMsgCustomGameInstallStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameInstallStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerAvailable* Arena::CreateMaybeMessage< ::CMsgServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLANServerAvailable* Arena::CreateMaybeMessage< ::CMsgLANServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLANServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconGameAccountClient* Arena::CreateMaybeMessage< ::CSOEconGameAccountClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemCriteriaCondition* Arena::CreateMaybeMessage< ::CSOItemCriteriaCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemCriteriaCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemCriteria* Arena::CreateMaybeMessage< ::CSOItemCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemRecipe* Arena::CreateMaybeMessage< ::CSOItemRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemRecipe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyStrangePart* Arena::CreateMaybeMessage< ::CMsgApplyStrangePart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyStrangePart >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyPennantUpgrade* Arena::CreateMaybeMessage< ::CMsgApplyPennantUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyPennantUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyEggEssence* Arena::CreateMaybeMessage< ::CMsgApplyEggEssence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyEggEssence >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemAttribute* Arena::CreateMaybeMessage< ::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEquipped* Arena::CreateMaybeMessage< ::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItem* Arena::CreateMaybeMessage< ::CSOEconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSortItems* Arena::CreateMaybeMessage< ::CMsgSortItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSortItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconClaimCode* Arena::CreateMaybeMessage< ::CSOEconClaimCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconClaimCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUpdateItemSchema* Arena::CreateMaybeMessage< ::CMsgUpdateItemSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUpdateItemSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCError* Arena::CreateMaybeMessage< ::CMsgGCError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestInventoryRefresh* Arena::CreateMaybeMessage< ::CMsgRequestInventoryRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestInventoryRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConVarValue* Arena::CreateMaybeMessage< ::CMsgConVarValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConVarValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReplicateConVars* Arena::CreateMaybeMessage< ::CMsgReplicateConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReplicateConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAcknowledged* Arena::CreateMaybeMessage< ::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAcknowledged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions_ItemPosition* Arena::CreateMaybeMessage< ::CMsgSetItemPositions_ItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions_ItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions* Arena::CreateMaybeMessage< ::CMsgSetItemPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNameItemNotification* Arena::CreateMaybeMessage< ::CMsgGCNameItemNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNameItemNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientDisplayNotification* Arena::CreateMaybeMessage< ::CMsgGCClientDisplayNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientDisplayNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCShowItemsPickedUp* Arena::CreateMaybeMessage< ::CMsgGCShowItemsPickedUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCShowItemsPickedUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCIncrementKillCountResponse* Arena::CreateMaybeMessage< ::CMsgGCIncrementKillCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCIncrementKillCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemDropRateBonus* Arena::CreateMaybeMessage< ::CSOEconItemDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemLeagueViewPass* Arena::CreateMaybeMessage< ::CSOEconItemLeagueViewPass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemLeagueViewPass >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEventTicket* Arena::CreateMaybeMessage< ::CSOEconItemEventTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEventTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemTournamentPassport* Arena::CreateMaybeMessage< ::CSOEconItemTournamentPassport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemTournamentPassport >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancel* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancelResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalize* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalizeResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBannedWordListUpdated* Arena::CreateMaybeMessage< ::CMsgGCToGCBannedWordListUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBannedWordListUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCDirtySDOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCDirtySDOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCDirtySDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCDirtyMultipleSDOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCDirtyMultipleSDOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCDirtyMultipleSDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCApplyLocalizationDiff* Arena::CreateMaybeMessage< ::CMsgGCToGCApplyLocalizationDiff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCApplyLocalizationDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCApplyLocalizationDiffResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCApplyLocalizationDiffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCApplyLocalizationDiffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCollectItem* Arena::CreateMaybeMessage< ::CMsgGCCollectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCollectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSDONoMemcached* Arena::CreateMaybeMessage< ::CMsgSDONoMemcached >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSDONoMemcached >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSQLKeyValue* Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSQLKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSQLKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCServerVersionUpdated* Arena::CreateMaybeMessage< ::CMsgGCServerVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCServerVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientVersionUpdated* Arena::CreateMaybeMessage< ::CMsgGCClientVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCWebAPIAccountChanged* Arena::CreateMaybeMessage< ::CMsgGCToGCWebAPIAccountChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCWebAPIAccountChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRecipeComponent* Arena::CreateMaybeMessage< ::CMsgRecipeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFulfillDynamicRecipeComponent* Arena::CreateMaybeMessage< ::CMsgFulfillDynamicRecipeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFulfillDynamicRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientMarketDataRequest* Arena::CreateMaybeMessage< ::CMsgGCClientMarketDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientMarketDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientMarketDataEntry* Arena::CreateMaybeMessage< ::CMsgGCClientMarketDataEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientMarketDataEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientMarketData* Arena::CreateMaybeMessage< ::CMsgGCClientMarketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExtractGems* Arena::CreateMaybeMessage< ::CMsgExtractGems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExtractGems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgExtractGemsResponse* Arena::CreateMaybeMessage< ::CMsgExtractGemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgExtractGemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddSocket* Arena::CreateMaybeMessage< ::CMsgAddSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddSocketResponse* Arena::CreateMaybeMessage< ::CMsgAddSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocketData* Arena::CreateMaybeMessage< ::CMsgAddItemToSocketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocketData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocket* Arena::CreateMaybeMessage< ::CMsgAddItemToSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAddItemToSocketResponse* Arena::CreateMaybeMessage< ::CMsgAddItemToSocketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAddItemToSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResetStrangeGemCount* Arena::CreateMaybeMessage< ::CMsgResetStrangeGemCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResetStrangeGemCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResetStrangeGemCountResponse* Arena::CreateMaybeMessage< ::CMsgResetStrangeGemCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResetStrangeGemCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollFileRequest* Arena::CreateMaybeMessage< ::CMsgGCToClientPollFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollFileResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientPollFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPerformManualOp* Arena::CreateMaybeMessage< ::CMsgGCToGCPerformManualOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPerformManualOp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPerformManualOpCompleted* Arena::CreateMaybeMessage< ::CMsgGCToGCPerformManualOpCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPerformManualOpCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCReloadServerRegionSettings* Arena::CreateMaybeMessage< ::CMsgGCToGCReloadServerRegionSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCReloadServerRegionSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCAdditionalWelcomeMsgList* Arena::CreateMaybeMessage< ::CMsgGCAdditionalWelcomeMsgList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCAdditionalWelcomeMsgList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyRemoteConVars_ConVar* Arena::CreateMaybeMessage< ::CMsgApplyRemoteConVars_ConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyRemoteConVars_ConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyRemoteConVars* Arena::CreateMaybeMessage< ::CMsgApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyRemoteConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientApplyRemoteConVars* Arena::CreateMaybeMessage< ::CMsgGCToClientApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientApplyRemoteConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerApplyRemoteConVars* Arena::CreateMaybeMessage< ::CMsgGCToServerApplyRemoteConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerApplyRemoteConVars >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
